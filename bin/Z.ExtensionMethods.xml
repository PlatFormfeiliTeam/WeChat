<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Z.ExtensionMethods</name>
    </assembly>
    <members>
        <member name="M:Extensions.FromCache``2(``0,System.Runtime.Caching.MemoryCache,System.String,``1)">
            <summary>A TKey extension method that from cache.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="cache">The cache.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>A TValue.</returns>
        </member>
        <member name="M:Extensions.FromCache``2(``0,System.String,``1)">
            <summary>A TKey extension method that from cache.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>A TValue.</returns>
        </member>
        <member name="M:Extensions.FromCache``2(``0,System.Runtime.Caching.MemoryCache,System.String,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>A TKey extension method that from cache.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="cache">The cache.</param>
            <param name="key">The key.</param>
            <param name="valueFactory">The value factory.</param>
            <returns>A TValue.</returns>
        </member>
        <member name="M:Extensions.FromCache``2(``0,System.String,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>A TKey extension method that from cache.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="key">The key.</param>
            <param name="valueFactory">The value factory.</param>
            <returns>A TValue.</returns>
        </member>
        <member name="M:Extensions.FromCache``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>A TKey extension method that from cache.</summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="valueFactory">The value factory.</param>
            <returns>A TValue.</returns>
        </member>
        <member name="M:Extensions.FromCache``2(``0,System.Runtime.Caching.MemoryCache,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>A TKey extension method that from cache.</summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="cache">The cache.</param>
            <param name="valueFactory">The value factory.</param>
            <returns>A TValue.</returns>
        </member>
        <member name="M:Extensions.AddOrGetExisting``1(System.Runtime.Caching.MemoryCache,System.String,``0)">
            <summary>A MemoryCache extension method that adds an or get existing.</summary>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="cache">The cache to act on.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>A TValue.</returns>
        </member>
        <member name="M:Extensions.AddOrGetExisting``1(System.Runtime.Caching.MemoryCache,System.String,System.Func{System.String,``0})">
            <summary>A MemoryCache extension method that adds an or get existing.</summary>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="cache">The cache to act on.</param>
            <param name="key">The key.</param>
            <param name="valueFactory">The value factory.</param>
            <returns>A TValue.</returns>
        </member>
        <member name="M:Extensions.AddOrGetExisting``1(System.Runtime.Caching.MemoryCache,System.String,System.Func{System.String,``0},System.Runtime.Caching.CacheItemPolicy,System.String)">
            <summary>A MemoryCache extension method that adds an or get existing.</summary>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="cache">The cache to act on.</param>
            <param name="key">The key.</param>
            <param name="valueFactory">The value factory.</param>
            <param name="policy">The policy.</param>
            <param name="regionName">(Optional) name of the region.</param>
            <returns>A TValue.</returns>
        </member>
        <member name="M:Extensions.AddOrGetExisting``1(System.Runtime.Caching.MemoryCache,System.String,System.Func{System.String,``0},System.DateTimeOffset,System.String)">
            <summary>A MemoryCache extension method that adds an or get existing.</summary>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="cache">The cache to act on.</param>
            <param name="key">The key.</param>
            <param name="valueFactory">The value factory.</param>
            <param name="absoluteExpiration">The policy.</param>
            <param name="regionName">(Optional) name of the region.</param>
            <returns>A TValue.</returns>
        </member>
        <member name="M:Extensions.AddIf``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},``0)">
            <summary>
                An ICollection&lt;T&gt; extension method that adds only if the value satisfies the predicate.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="predicate">The predicate.</param>
            <param name="value">The value.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Extensions.AddIfNotContains``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
                An ICollection&lt;T&gt; extension method that add value if the ICollection doesn't contains it already.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="value">The value.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Extensions.AddRange``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
                An ICollection&lt;T&gt; extension method that adds a range to 'values'.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="values">A variable-length parameters list containing values.</param>
        </member>
        <member name="M:Extensions.AddRangeIf``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},``0[])">
            <summary>
                An ICollection&lt;T&gt; extension method that adds a collection of objects to the end of this collection only
                for value who satisfies the predicate.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="predicate">The predicate.</param>
            <param name="values">A variable-length parameters list containing values.</param>
        </member>
        <member name="M:Extensions.AddRangeIfNotContains``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
                An ICollection&lt;T&gt; extension method that adds a range of values that's not already in the ICollection.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="values">A variable-length parameters list containing values.</param>
        </member>
        <member name="M:Extensions.ContainsAll``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
                An ICollection&lt;T&gt; extension method that query if '@this' contains all values.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="values">A variable-length parameters list containing values.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Extensions.ContainsAny``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
                An ICollection&lt;T&gt; extension method that query if '@this' contains any value.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="values">A variable-length parameters list containing values.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Extensions.IsEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
                An ICollection&lt;T&gt; extension method that query if the collection is empty.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>true if empty&lt; t&gt;, false if not.</returns>
        </member>
        <member name="M:Extensions.IsNotEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
                An ICollection&lt;T&gt; extension method that query if the collection is not empty.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>true if not empty&lt; t&gt;, false if not.</returns>
        </member>
        <member name="M:Extensions.IsNotNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
                An ICollection&lt;T&gt; extension method that queries if the collection is not (null or is empty).
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>true if the collection is not (null or empty), false if not.</returns>
        </member>
        <member name="M:Extensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
                An ICollection&lt;T&gt; extension method that queries if the collection is null or is empty.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>true if null or empty&lt; t&gt;, false if not.</returns>
        </member>
        <member name="M:Extensions.RemoveIf``1(System.Collections.Generic.ICollection{``0},``0,System.Func{``0,System.Boolean})">
            <summary>
                An ICollection&lt;T&gt; extension method that removes if.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="value">The value.</param>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:Extensions.RemoveIfContains``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
                An ICollection&lt;T&gt; extension method that removes if contains.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Extensions.RemoveRange``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
                An ICollection&lt;T&gt; extension method that removes the range.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="values">A variable-length parameters list containing values.</param>
        </member>
        <member name="M:Extensions.RemoveRangeIf``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},``0[])">
            <summary>
                An ICollection&lt;T&gt; extension method that removes range item that satisfy the predicate.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="predicate">The predicate.</param>
            <param name="values">A variable-length parameters list containing values.</param>
        </member>
        <member name="M:Extensions.RemoveRangeIfContains``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
                An ICollection&lt;T&gt; extension method that removes the range if contains.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="values">A variable-length parameters list containing values.</param>
        </member>
        <member name="M:Extensions.RemoveWhere``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
            <summary>
                An ICollection&lt;T&gt; extension method that removes value that satisfy the predicate.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:Extensions.ToExpando(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
                An IDictionary&lt;string,object&gt; extension method that converts the @this to an expando.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as an ExpandoObject.</returns>
        </member>
        <member name="M:Extensions.ToNameValueCollection(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                An IDictionary&lt;string,string&gt; extension method that converts the @this to a name value collection.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a NameValueCollection.</returns>
        </member>
        <member name="M:Extensions.AddIfNotContainsKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
                An IDictionary&lt;TKey,TValue&gt; extension method that adds if not contains key.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Extensions.AddIfNotContainsKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})">
            <summary>
                An IDictionary&lt;TKey,TValue&gt; extension method that adds if not contains key.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="key">The key.</param>
            <param name="valueFactory">The value factory.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Extensions.AddIfNotContainsKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
                An IDictionary&lt;TKey,TValue&gt; extension method that adds if not contains key.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="key">The key.</param>
            <param name="valueFactory">The value factory.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Extensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
                Uses the specified functions to add a key/value pair to the IDictionary&lt;TKey, TValue&gt; if the key does
                not already exist, or to update a key/value pair in the IDictionary&lt;TKey, TValue&gt;> if the key already
                exists.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="key">The key to be added or whose value should be updated.</param>
            <param name="value">The value to be added or updated.</param>
            <returns>The new value for the key.</returns>
        </member>
        <member name="M:Extensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.Func{``0,``1,``1})">
            <summary>
                Uses the specified functions to add a key/value pair to the IDictionary&lt;TKey, TValue&gt; if the key does
                not already exist, or to update a key/value pair in the IDictionary&lt;TKey, TValue&gt;> if the key already
                exists.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="key">The key to be added or whose value should be updated.</param>
            <param name="addValue">The value to be added for an absent key.</param>
            <param name="updateValueFactory">
                The function used to generate a new value for an existing key based on the key's
                existing value.
            </param>
            <returns>
                The new value for the key. This will be either be addValue (if the key was absent) or the result of
                updateValueFactory (if the key was present).
            </returns>
        </member>
        <member name="M:Extensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
            <summary>
                Uses the specified functions to add a key/value pair to the IDictionary&lt;TKey, TValue&gt; if the key does
                not already exist, or to update a key/value pair in the IDictionary&lt;TKey, TValue&gt;> if the key already
                exists.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="key">The key to be added or whose value should be updated.</param>
            <param name="addValueFactory">The function used to generate a value for an absent key.</param>
            <param name="updateValueFactory">
                The function used to generate a new value for an existing key based on the key's
                existing value.
            </param>
            <returns>
                The new value for the key. This will be either be the result of addValueFactory (if the key was absent) or
                the result of updateValueFactory (if the key was present).
            </returns>
        </member>
        <member name="M:Extensions.ContainsAllKey``2(System.Collections.Generic.IDictionary{``0,``1},``0[])">
            <summary>
                An IDictionary&lt;TKey,TValue&gt; extension method that query if '@this' contains all key.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="keys">A variable-length parameters list containing keys.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Extensions.ContainsAnyKey``2(System.Collections.Generic.IDictionary{``0,``1},``0[])">
            <summary>
                An IDictionary&lt;TKey,TValue&gt; extension method that query if '@this' contains any key.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="keys">A variable-length parameters list containing keys.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Extensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
                Adds a key/value pair to the IDictionary&lt;TKey, TValue&gt; if the key does not already exist.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value to be added, if the key does not already exist.</param>
            <returns>
                The value for the key. This will be either the existing value for the key if the key is already in the
                dictionary, or the new value if the key was not in the dictionary.
            </returns>
        </member>
        <member name="M:Extensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
                Adds a key/value pair to the IDictionary&lt;TKey, TValue&gt; by using the specified function, if the key does
                not already exist.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="key">The key of the element to add.</param>
            <param name="valueFactory">TThe function used to generate a value for the key.</param>
            <returns>
                The value for the key. This will be either the existing value for the key if the key is already in the
                dictionary, or the new value for the key as returned by valueFactory if the key was not in the dictionary.
            </returns>
        </member>
        <member name="M:Extensions.RemoveIfContainsKey``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
                An IDictionary&lt;TKey,TValue&gt; extension method that removes if contains key.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:Extensions.ToSortedDictionary``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
                An IDictionary&lt;TKey,TValue&gt; extension method that converts the @this to a sorted dictionary.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>@this as a SortedDictionary&lt;TKey,TValue&gt;</returns>
        </member>
        <member name="M:Extensions.ToSortedDictionary``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IComparer{``0})">
            <summary>
                An IDictionary&lt;TKey,TValue&gt; extension method that converts the @this to a sorted dictionary.
            </summary>
            <typeparam name="TKey">Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="comparer">The comparer.</param>
            <returns>@this as a SortedDictionary&lt;TKey,TValue&gt;</returns>
        </member>
        <member name="M:Extensions.MergeDistinctInnerEnumerable``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>Enumerates merge distinct inner enumerable in this collection.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>
                An enumerator that allows foreach to be used to process merge distinct inner
                enumerable in this collection.
            </returns>
        </member>
        <member name="M:Extensions.MergeInnerEnumerable``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>Enumerates merge inner enumerable in this collection.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>
                An enumerator that allows foreach to be used to process merge inner enumerable in
                this collection.
            </returns>
        </member>
        <member name="M:Extensions.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
                An IEnumerable&lt;T&gt; extension method that query if '@this' contains all.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="values">A variable-length parameters list containing values.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Extensions.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
                An IEnumerable&lt;T&gt; extension method that query if '@this' contains any.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="values">A variable-length parameters list containing values.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Extensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
                Enumerates for each in this collection.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="action">The action.</param>
            <returns>An enumerator that allows foreach to be used to process for each in this collection.</returns>
        </member>
        <member name="M:Extensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>Enumerates for each in this collection.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="action">The action.</param>
            <returns>An enumerator that allows foreach to be used to process for each in this collection.</returns>
        </member>
        <member name="M:Extensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                An IEnumerable&lt;T&gt; extension method that query if 'collection' is empty.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The collection to act on.</param>
            <returns>true if empty, false if not.</returns>
        </member>
        <member name="M:Extensions.IsNotEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                An IEnumerable&lt;T&gt; extension method that queries if a not is empty.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The collection to act on.</param>
            <returns>true if a not is t>, false if not.</returns>
        </member>
        <member name="M:Extensions.IsNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                An IEnumerable&lt;T&gt; extension method that queries if a not null or is empty.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The collection to act on.</param>
            <returns>true if a not null or is t>, false if not.</returns>
        </member>
        <member name="M:Extensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                An IEnumerable&lt;T&gt; extension method that queries if a null or is empty.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The collection to act on.</param>
            <returns>true if a null or is t>, false if not.</returns>
        </member>
        <member name="M:Extensions.StringJoin``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
                Concatenates all the elements of a IEnumerable, using the specified separator between each element.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">An IEnumerable that contains the elements to concatenate.</param>
            <param name="separator">
                The string to use as a separator. separator is included in the returned string only if
                value has more than one element.
            </param>
            <returns>
                A string that consists of the elements in value delimited by the separator string. If value is an empty array,
                the method returns String.Empty.
            </returns>
        </member>
        <member name="M:Extensions.StringJoin``1(System.Collections.Generic.IEnumerable{``0},System.Char)">
            <summary>
                Concatenates all the elements of a IEnumerable, using the specified separator between
                each element.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="separator">
                The string to use as a separator. separator is included in the
                returned string only if value has more than one element.
            </param>
            <returns>
                A string that consists of the elements in value delimited by the separator string. If
                value is an empty array, the method returns String.Empty.
            </returns>
        </member>
        <member name="M:Extensions.ToHashtable(System.Collections.IDictionary)">
            <summary>
                An IDictionary extension method that converts the @this to a hashtable.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a Hashtable.</returns>
        </member>
        <member name="M:Extensions.ToDictionary(System.Collections.Specialized.NameValueCollection)">
            <summary>
                A NameValueCollection extension method that converts the @this to a dictionary.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as an IDictionary&lt;string,object&gt;</returns>
        </member>
        <member name="M:Extensions.DecompressGZip(System.Byte[])">
            <summary>
                A byte[] extension method that decompress the byte array gzip to string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The byte array gzip to string.</returns>
        </member>
        <member name="M:Extensions.DecompressGZip(System.Byte[],System.Text.Encoding)">
            <summary>
                A byte[] extension method that decompress the byte array gzip to string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="encoding">The encoding.</param>
            <returns>The byte array gzip to string.</returns>
        </member>
        <member name="M:Extensions.CreateGZip(System.IO.FileInfo)">
            <summary>
                A FileInfo extension method that creates a zip file.
            </summary>
            <param name="this">The @this to act on.</param>
        </member>
        <member name="M:Extensions.CreateGZip(System.IO.FileInfo,System.String)">
            <summary>
                A FileInfo extension method that creates a zip file.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="destination">Destination for the zip.</param>
        </member>
        <member name="M:Extensions.CreateGZip(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
                A FileInfo extension method that creates a zip file.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="destination">Destination for the zip.</param>
        </member>
        <member name="M:Extensions.ExtractGZipToDirectory(System.IO.FileInfo)">
            <summary>
                A FileInfo extension method that extracts the g zip to directory described by
                @this.
            </summary>
            <param name="this">The @this to act on.</param>
        </member>
        <member name="M:Extensions.ExtractGZipToDirectory(System.IO.FileInfo,System.String)">
            <summary>
                A FileInfo extension method that extracts the g zip to directory described by
                @this.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="destination">Destination for the.</param>
        </member>
        <member name="M:Extensions.ExtractGZipToDirectory(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
                A FileInfo extension method that extracts the g zip to directory described by
                @this.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="destination">Destination for the.</param>
        </member>
        <member name="M:Extensions.CompressGZip(System.String)">
            <summary>
                A string extension method that compress the given string to GZip byte array.
            </summary>
            <param name="this">The stringToCompress to act on.</param>
            <returns>The string compressed into a GZip byte array.</returns>
        </member>
        <member name="M:Extensions.CompressGZip(System.String,System.Text.Encoding)">
            <summary>
                A string extension method that compress the given string to GZip byte array.
            </summary>
            <param name="this">The stringToCompress to act on.</param>
            <param name="encoding">The encoding.</param>
            <returns>The string compressed into a GZip byte array.</returns>
        </member>
        <member name="M:Extensions.CreateZipFile(System.IO.DirectoryInfo,System.String)">
            <summary>
                Creates a zip archive that contains the files and directories from the specified
                directory.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="destinationArchiveFileName">
                The path of the archive to be created, specified as a
                relative or absolute path. A relative path is interpreted as relative to the current working
                directory.
            </param>
        </member>
        <member name="M:Extensions.CreateZipFile(System.IO.DirectoryInfo,System.String,System.IO.Compression.CompressionLevel,System.Boolean)">
            <summary>
                Creates a zip archive that contains the files and directories from the specified
                directory, uses the specified compression level, and optionally includes the base directory.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="destinationArchiveFileName">
                The path of the archive to be created, specified as a
                relative or absolute path. A relative path is interpreted as relative to the current working
                directory.
            </param>
            <param name="compressionLevel">
                One of the enumeration values that indicates whether to
                emphasize speed or compression effectiveness when creating the entry.
            </param>
            <param name="includeBaseDirectory">
                true to include the directory name from
                sourceDirectoryName at the root of the archive; false to include only the contents of the
                directory.
            </param>
        </member>
        <member name="M:Extensions.CreateZipFile(System.IO.DirectoryInfo,System.String,System.IO.Compression.CompressionLevel,System.Boolean,System.Text.Encoding)">
            <summary>
                Creates a zip archive that contains the files and directories from the specified directory, uses the specified
                compression level and character encoding for entry names, and optionally includes the base directory.
            </summary>
            <param name="this">
                The path to the directory to be archived, specified as a relative or absolute path. A relative path
                is interpreted as relative to the current working directory.
            </param>
            <param name="destinationArchiveFileName">
                The path of the archive to be created, specified as a relative or absolute
                path. A relative path is interpreted as relative to the current working directory.
            </param>
            <param name="compressionLevel">
                One of the enumeration values that indicates whether to emphasize speed or compression
                effectiveness when creating the entry.
            </param>
            <param name="includeBaseDirectory">
                true to include the directory name from sourceDirectoryName at the root of the
                archive; false to include only the contents of the directory.
            </param>
            <param name="entryNameEncoding">
                The encoding to use when reading or writing entry names in this archive. Specify a
                value for this parameter only when an encoding is required for interoperability with zip archive tools and
                libraries that do not support UTF-8 encoding for entry names.
            </param>
        </member>
        <member name="M:Extensions.CreateZipFile(System.IO.DirectoryInfo,System.IO.FileInfo)">
            <summary>
                Creates a zip archive that contains the files and directories from the specified
                directory.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="destinationArchiveFile">
                The path of the archive to be created, specified as a
                relative or absolute path. A relative path is interpreted as relative to the current working
                directory.
            </param>
        </member>
        <member name="M:Extensions.CreateZipFile(System.IO.DirectoryInfo,System.IO.FileInfo,System.IO.Compression.CompressionLevel,System.Boolean)">
            <summary>
                Creates a zip archive that contains the files and directories from the specified
                directory, uses the specified compression level, and optionally includes the base directory.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="destinationArchiveFile">
                The path of the archive to be created, specified as a
                relative or absolute path. A relative path is interpreted as relative to the current working
                directory.
            </param>
            <param name="compressionLevel">
                One of the enumeration values that indicates whether to
                emphasize speed or compression effectiveness when creating the entry.
            </param>
            <param name="includeBaseDirectory">
                true to include the directory name from
                sourceDirectoryName at the root of the archive; false to include only the contents of the
                directory.
            </param>
        </member>
        <member name="M:Extensions.CreateZipFile(System.IO.DirectoryInfo,System.IO.FileInfo,System.IO.Compression.CompressionLevel,System.Boolean,System.Text.Encoding)">
            <summary>
                Creates a zip archive that contains the files and directories from the specified
                directory, uses the specified compression level and character encoding for entry names, and
                optionally includes the base directory.
            </summary>
            <param name="this">
                The path to the directory to be archived, specified as a relative or
                absolute path. A relative path is interpreted as relative to the current working directory.
            </param>
            <param name="destinationArchiveFile">
                The path of the archive to be created, specified as a
                relative or absolute path. A relative path is interpreted as relative to the current working
                directory.
            </param>
            <param name="compressionLevel">
                One of the enumeration values that indicates whether to
                emphasize speed or compression effectiveness when creating the entry.
            </param>
            <param name="includeBaseDirectory">
                true to include the directory name from
                sourceDirectoryName at the root of the archive; false to include only the contents of the
                directory.
            </param>
            <param name="entryNameEncoding">
                The encoding to use when reading or writing entry names in
                this archive. Specify a value for this parameter only when an encoding is required for
                interoperability with zip archive tools and libraries that do not support UTF-8 encoding for
                entry names.
            </param>
        </member>
        <member name="M:Extensions.ExtractZipFileToDirectory(System.IO.FileInfo,System.String)">
            <summary>
                Extracts all the files in the specified zip archive to a directory on the file system
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="destinationDirectoryName">
                The path to the directory in which to place the
                extracted files, specified as a relative or absolute path. A relative path is interpreted as
                relative to the current working directory.
            </param>
        </member>
        <member name="M:Extensions.ExtractZipFileToDirectory(System.IO.FileInfo,System.String,System.Text.Encoding)">
            <summary>
                Extracts all the files in the specified zip archive to a directory on the file system and uses the specified
                character encoding for entry names.
            </summary>
            <param name="this">The path to the archive that is to be extracted.</param>
            <param name="destinationDirectoryName">
                The path to the directory in which to place the extracted files, specified as a
                relative or absolute path. A relative path is interpreted as relative to the current working directory.
            </param>
            <param name="entryNameEncoding">
                The encoding to use when reading or writing entry names in this archive. Specify a
                value for this parameter only when an encoding is required for interoperability with zip archive tools and
                libraries that do not support UTF-8 encoding for entry names.
            </param>
        </member>
        <member name="M:Extensions.ExtractZipFileToDirectory(System.IO.FileInfo,System.IO.DirectoryInfo)">
            <summary>Extracts all the files in the specified zip archive to a directory on the file system.</summary>
            <param name="this">The @this to act on.</param>
            <param name="destinationDirectory">Pathname of the destination directory.</param>
        </member>
        <member name="M:Extensions.ExtractZipFileToDirectory(System.IO.FileInfo,System.IO.DirectoryInfo,System.Text.Encoding)">
            <summary>
                Extracts all the files in the specified zip archive to a directory on the file system
                and uses the specified character encoding for entry names.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="destinationDirectory">Pathname of the destination directory.</param>
            <param name="entryNameEncoding">
                The encoding to use when reading or writing entry names in
                this archive. Specify a value for this parameter only when an encoding is required for
                interoperability with zip archive tools and libraries that do not support UTF-8 encoding for
                entry names.
            </param>
        </member>
        <member name="M:Extensions.OpenReadZipFile(System.IO.FileInfo)">
            <summary>
                The path to the archive to open, specified as a relative or absolute path. A relative path is interpreted as
                relative to the current working directory.
            </summary>
            <param name="this">
                The path to the archive to open, specified as a relative or absolute path. A relative path is
                interpreted as relative to the current working directory.
            </param>
            <returns>The opened zip archive.</returns>
        </member>
        <member name="M:Extensions.OpenZipFile(System.IO.FileInfo,System.IO.Compression.ZipArchiveMode)">
            <summary>Opens a zip archive at the specified path and in the specified mode.</summary>
            <param name="this">The @this to act on.</param>
            <param name="mode">
                One of the enumeration values that specifies the actions that are allowed
                on the entries in the opened archive.
            </param>
            <returns>A ZipArchive.</returns>
        </member>
        <member name="M:Extensions.OpenZipFile(System.IO.FileInfo,System.IO.Compression.ZipArchiveMode,System.Text.Encoding)">
            <summary>Opens a zip archive at the specified path and in the specified mode.</summary>
            <param name="this">
                The path to the archive to open, specified as a relative or absolute
                path. A relative path is interpreted as relative to the current working directory.
            </param>
            <param name="mode">
                One of the enumeration values that specifies the actions that are allowed
                on the entries in the opened archive.
            </param>
            <param name="entryNameEncoding">
                The encoding to use when reading or writing entry names in
                this archive. Specify a value for this parameter only when an encoding is required for
                interoperability with zip archive tools and libraries that do not support UTF-8 encoding for
                entry names.
            </param>
            <returns>A ZipArchive.</returns>
        </member>
        <member name="M:Extensions.ClearAll(System.Array)">
            <summary>
                An Array extension method that clears the array.
            </summary>
            <param name="this">The @this to act on.</param>
        </member>
        <member name="M:Extensions.WithinIndex(System.Array,System.Int32)">
            <summary>
                An Array extension method that check if the array is lower then the specified index.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="index">Zero-based index of the.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Extensions.WithinIndex(System.Array,System.Int32,System.Int32)">
            <summary>
                An Array extension method that check if the array is lower then the specified index.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="index">Zero-based index of the.</param>
            <param name="dimension">(Optional) the dimension.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Extensions.BinarySearch(System.Array,System.Object)">
            <summary>
                Searches an entire one-dimensional sorted  for a specific element, using the  interface implemented by each
                element of the  and by the specified object.
            </summary>
            <param name="array">The sorted one-dimensional  to search.</param>
            <param name="value">The object to search for.</param>
            <returns>
                The index of the specified  in the specified , if  is found. If  is not found and  is less than one or more
                elements in , a negative number which is the bitwise complement of the index of the first element that is
                larger than . If  is not found and  is greater than any of the elements in , a negative number which is the
                bitwise complement of (the index of the last element plus 1).
            </returns>
        </member>
        <member name="M:Extensions.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)">
            <summary>
                Searches a range of elements in a one-dimensional sorted  for a value, using the  interface implemented by
                each element of the  and by the specified value.
            </summary>
            <param name="array">The sorted one-dimensional  to search.</param>
            <param name="index">The starting index of the range to search.</param>
            <param name="length">The length of the range to search.</param>
            <param name="value">The object to search for.</param>
            <returns>
                The index of the specified  in the specified , if  is found. If  is not found and  is less than one or more
                elements in , a negative number which is the bitwise complement of the index of the first element that is
                larger than . If  is not found and  is greater than any of the elements in , a negative number which is the
                bitwise complement of (the index of the last element plus 1).
            </returns>
        </member>
        <member name="M:Extensions.BinarySearch(System.Array,System.Object,System.Collections.IComparer)">
            <summary>
                Searches an entire one-dimensional sorted  for a value using the specified  interface.
            </summary>
            <param name="array">The sorted one-dimensional  to search.</param>
            <param name="value">The object to search for.</param>
            <param name="comparer">
                The  implementation to use when comparing elements.-or- null to use the  implementation
                of each element.
            </param>
            <returns>
                The index of the specified  in the specified , if  is found. If  is not found and  is less than one or more
                elements in , a negative number which is the bitwise complement of the index of the first element that is
                larger than . If  is not found and  is greater than any of the elements in , a negative number which is the
                bitwise complement of (the index of the last element plus 1).
            </returns>
        </member>
        <member name="M:Extensions.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
            <summary>
                Searches a range of elements in a one-dimensional sorted  for a value, using the specified  interface.
            </summary>
            <param name="array">The sorted one-dimensional  to search.</param>
            <param name="index">The starting index of the range to search.</param>
            <param name="length">The length of the range to search.</param>
            <param name="value">The object to search for.</param>
            <param name="comparer">
                The  implementation to use when comparing elements.-or- null to use the  implementation
                of each element.
            </param>
            <returns>
                The index of the specified  in the specified , if  is found. If  is not found and  is less than one or more
                elements in , a negative number which is the bitwise complement of the index of the first element that is
                larger than . If  is not found and  is greater than any of the elements in , a negative number which is the
                bitwise complement of (the index of the last element plus 1).
            </returns>
        </member>
        <member name="M:Extensions.Clear(System.Array,System.Int32,System.Int32)">
            <summary>
                Sets a range of elements in the  to zero, to false, or to null, depending on the element type.
            </summary>
            <param name="array">The  whose elements need to be cleared.</param>
            <param name="index">The starting index of the range of elements to clear.</param>
            <param name="length">The number of elements to clear.</param>
        </member>
        <member name="M:Extensions.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>
                Copies a range of elements from an  starting at the specified source index and pastes them to another
                starting at the specified destination index.  Guarantees that all changes are undone if the copy does not
                succeed completely.
            </summary>
            <param name="sourceArray">The  that contains the data to copy.</param>
            <param name="sourceIndex">A 32-bit integer that represents the index in the  at which copying begins.</param>
            <param name="destinationArray">The  that receives the data.</param>
            <param name="destinationIndex">A 32-bit integer that represents the index in the  at which storing begins.</param>
            <param name="length">A 32-bit integer that represents the number of elements to copy.</param>
        </member>
        <member name="M:Extensions.Copy(System.Array,System.Array,System.Int32)">
            <summary>
                Copies a range of elements from an  starting at the first element and pastes them into another  starting at
                the first element. The length is specified as a 32-bit integer.
            </summary>
            <param name="sourceArray">The  that contains the data to copy.</param>
            <param name="destinationArray">The  that receives the data.</param>
            <param name="length">A 32-bit integer that represents the number of elements to copy.</param>
        </member>
        <member name="M:Extensions.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>
                Copies a range of elements from an  starting at the specified source index and pastes them to another
                starting at the specified destination index. The length and the indexes are specified as 32-bit integers.
            </summary>
            <param name="sourceArray">The  that contains the data to copy.</param>
            <param name="sourceIndex">A 32-bit integer that represents the index in the  at which copying begins.</param>
            <param name="destinationArray">The  that receives the data.</param>
            <param name="destinationIndex">A 32-bit integer that represents the index in the  at which storing begins.</param>
            <param name="length">A 32-bit integer that represents the number of elements to copy.</param>
        </member>
        <member name="M:Extensions.Copy(System.Array,System.Array,System.Int64)">
            <summary>
                Copies a range of elements from an  starting at the first element and pastes them into another  starting at
                the first element. The length is specified as a 64-bit integer.
            </summary>
            <param name="sourceArray">The  that contains the data to copy.</param>
            <param name="destinationArray">The  that receives the data.</param>
            <param name="length">
                A 64-bit integer that represents the number of elements to copy. The integer must be between
                zero and , inclusive.
            </param>
        </member>
        <member name="M:Extensions.Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)">
            <summary>
                Copies a range of elements from an  starting at the specified source index and pastes them to another
                starting at the specified destination index. The length and the indexes are specified as 64-bit integers.
            </summary>
            <param name="sourceArray">The  that contains the data to copy.</param>
            <param name="sourceIndex">A 64-bit integer that represents the index in the  at which copying begins.</param>
            <param name="destinationArray">The  that receives the data.</param>
            <param name="destinationIndex">A 64-bit integer that represents the index in the  at which storing begins.</param>
            <param name="length">
                A 64-bit integer that represents the number of elements to copy. The integer must be between
                zero and , inclusive.
            </param>
        </member>
        <member name="M:Extensions.IndexOf(System.Array,System.Object)">
            <summary>
                Searches for the specified object and returns the index of the first occurrence within the entire one-
                dimensional .
            </summary>
            <param name="array">The one-dimensional  to search.</param>
            <param name="value">The object to locate in .</param>
            <returns>
                The index of the first occurrence of  within the entire , if found; otherwise, the lower bound of the array
                minus 1.
            </returns>
        </member>
        <member name="M:Extensions.IndexOf(System.Array,System.Object,System.Int32)">
            <summary>
                Searches for the specified object and returns the index of the first occurrence within the range of elements
                in the one-dimensional  that extends from the specified index to the last element.
            </summary>
            <param name="array">The one-dimensional  to search.</param>
            <param name="value">The object to locate in .</param>
            <param name="startIndex">The starting index of the search. 0 (zero) is valid in an empty array.</param>
            <returns>
                The index of the first occurrence of  within the range of elements in  that extends from  to the last element,
                if found; otherwise, the lower bound of the array minus 1.
            </returns>
        </member>
        <member name="M:Extensions.IndexOf(System.Array,System.Object,System.Int32,System.Int32)">
            <summary>
                Searches for the specified object and returns the index of the first occurrence within the range of elements
                in the one-dimensional  that starts at the specified index and contains the specified number of elements.
            </summary>
            <param name="array">The one-dimensional  to search.</param>
            <param name="value">The object to locate in .</param>
            <param name="startIndex">The starting index of the search. 0 (zero) is valid in an empty array.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>
                The index of the first occurrence of  within the range of elements in  that starts at  and contains the
                number of elements specified in , if found; otherwise, the lower bound of the array minus 1.
            </returns>
        </member>
        <member name="M:Extensions.LastIndexOf(System.Array,System.Object)">
            <summary>
                Searches for the specified object and returns the index of the last occurrence within the entire one-
                dimensional .
            </summary>
            <param name="array">The one-dimensional  to search.</param>
            <param name="value">The object to locate in .</param>
            <returns>
                The index of the last occurrence of  within the entire , if found; otherwise, the lower bound of the array
                minus 1.
            </returns>
        </member>
        <member name="M:Extensions.LastIndexOf(System.Array,System.Object,System.Int32)">
            <summary>
                Searches for the specified object and returns the index of the last occurrence within the range of elements
                in the one-dimensional  that extends from the first element to the specified index.
            </summary>
            <param name="array">The one-dimensional  to search.</param>
            <param name="value">The object to locate in .</param>
            <param name="startIndex">The starting index of the backward search.</param>
            <returns>
                The index of the last occurrence of  within the range of elements in  that extends from the first element to ,
                if found; otherwise, the lower bound of the array minus 1.
            </returns>
        </member>
        <member name="M:Extensions.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)">
            <summary>
                Searches for the specified object and returns the index of the last occurrence within the range of elements
                in the one-dimensional  that contains the specified number of elements and ends at the specified index.
            </summary>
            <param name="array">The one-dimensional  to search.</param>
            <param name="value">The object to locate in .</param>
            <param name="startIndex">The starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>
                The index of the last occurrence of  within the range of elements in  that contains the number of elements
                specified in  and ends at , if found; otherwise, the lower bound of the array minus 1.
            </returns>
        </member>
        <member name="M:Extensions.Reverse(System.Array)">
            <summary>
                Reverses the sequence of the elements in the entire one-dimensional .
            </summary>
            <param name="array">The one-dimensional  to reverse.</param>
        </member>
        <member name="M:Extensions.Reverse(System.Array,System.Int32,System.Int32)">
            <summary>
                Reverses the sequence of the elements in a range of elements in the one-dimensional .
            </summary>
            <param name="array">The one-dimensional  to reverse.</param>
            <param name="index">The starting index of the section to reverse.</param>
            <param name="length">The number of elements in the section to reverse.</param>
        </member>
        <member name="M:Extensions.Sort(System.Array)">
            <summary>
                Sorts the elements in an entire one-dimensional  using the  implementation of each element of the .
            </summary>
            <param name="array">The one-dimensional  to sort.</param>
        </member>
        <member name="M:Extensions.Sort(System.Array,System.Array)">
            <summary>
                Sorts a pair of one-dimensional  objects (one contains the keys and the other contains the corresponding
                items) based on the keys in the first  using the  implementation of each key.
            </summary>
            <param name="array">The one-dimensional  to sort.</param>
            <param name="items">
                The one-dimensional  that contains the items that correspond to each of the keys in the .-or-
                null to sort only the .
            </param>
            ###
            <param name="keys">The one-dimensional  that contains the keys to sort.</param>
        </member>
        <member name="M:Extensions.Sort(System.Array,System.Int32,System.Int32)">
            <summary>
                Sorts the elements in a range of elements in a one-dimensional  using the  implementation of each element of
                the .
            </summary>
            <param name="array">The one-dimensional  to sort.</param>
            <param name="index">The starting index of the range to sort.</param>
            <param name="length">The number of elements in the range to sort.</param>
        </member>
        <member name="M:Extensions.Sort(System.Array,System.Array,System.Int32,System.Int32)">
            <summary>
                Sorts a range of elements in a pair of one-dimensional  objects (one contains the keys and the other contains
                the corresponding items) based on the keys in the first  using the  implementation of each key.
            </summary>
            <param name="array">The one-dimensional  to sort.</param>
            <param name="items">
                The one-dimensional  that contains the items that correspond to each of the keys in the .-or-
                null to sort only the .
            </param>
            <param name="index">The starting index of the range to sort.</param>
            <param name="length">The number of elements in the range to sort.</param>
            ###
            <param name="keys">The one-dimensional  that contains the keys to sort.</param>
        </member>
        <member name="M:Extensions.Sort(System.Array,System.Collections.IComparer)">
            <summary>
                Sorts the elements in a one-dimensional  using the specified .
            </summary>
            <param name="array">The one-dimensional  to sort.</param>
            <param name="comparer">
                The  implementation to use when comparing elements.-or-null to use the  implementation of
                each element.
            </param>
        </member>
        <member name="M:Extensions.Sort(System.Array,System.Array,System.Collections.IComparer)">
            <summary>
                Sorts a pair of one-dimensional  objects (one contains the keys and the other contains the corresponding
                items) based on the keys in the first  using the specified .
            </summary>
            <param name="array">The one-dimensional  to sort.</param>
            <param name="items">
                The one-dimensional  that contains the items that correspond to each of the keys in the .-or-
                null to sort only the .
            </param>
            <param name="comparer">
                The  implementation to use when comparing elements.-or-null to use the  implementation of
                each element.
            </param>
            ###
            <param name="keys">The one-dimensional  that contains the keys to sort.</param>
        </member>
        <member name="M:Extensions.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
            <summary>
                Sorts the elements in a range of elements in a one-dimensional  using the specified .
            </summary>
            <param name="array">The one-dimensional  to sort.</param>
            <param name="index">The starting index of the range to sort.</param>
            <param name="length">The number of elements in the range to sort.</param>
            <param name="comparer">
                The  implementation to use when comparing elements.-or-null to use the  implementation of
                each element.
            </param>
        </member>
        <member name="M:Extensions.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
            <summary>
                Sorts a range of elements in a pair of one-dimensional  objects (one contains the keys and the other contains
                the corresponding items) based on the keys in the first  using the specified .
            </summary>
            <param name="array">The one-dimensional  to sort.</param>
            <param name="items">
                The one-dimensional  that contains the items that correspond to each of the keys in the .-or-
                null to sort only the .
            </param>
            <param name="index">The starting index of the range to sort.</param>
            <param name="length">The number of elements in the range to sort.</param>
            <param name="comparer">
                The  implementation to use when comparing elements.-or-null to use the  implementation of
                each element.
            </param>
            ###
            <param name="keys">The one-dimensional  that contains the keys to sort.</param>
        </member>
        <member name="M:Extensions.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>
                Copies a specified number of bytes from a source array starting at a particular offset to a destination array
                starting at a particular offset.
            </summary>
            <param name="src">The source buffer.</param>
            <param name="srcOffset">The zero-based byte offset into .</param>
            <param name="dst">The destination buffer.</param>
            <param name="dstOffset">The zero-based byte offset into .</param>
            <param name="count">The number of bytes to copy.</param>
        </member>
        <member name="M:Extensions.ByteLength(System.Array)">
            <summary>
                Returns the number of bytes in the specified array.
            </summary>
            <param name="array">An array.</param>
            <returns>The number of bytes in the array.</returns>
        </member>
        <member name="M:Extensions.GetByte(System.Array,System.Int32)">
            <summary>
                Retrieves the byte at a specified location in a specified array.
            </summary>
            <param name="array">An array.</param>
            <param name="index">A location in the array.</param>
            <returns>Returns the  byte in the array.</returns>
        </member>
        <member name="M:Extensions.SetByte(System.Array,System.Int32,System.Byte)">
            <summary>
                Assigns a specified value to a byte at a particular location in a specified array.
            </summary>
            <param name="array">An array.</param>
            <param name="index">A location in the array.</param>
            <param name="value">A value to assign.</param>
        </member>
        <member name="M:Extensions.IfFalse(System.Boolean,System.Action)">
            <summary>
                A bool extension method that execute an Action if the value is false.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:Extensions.IfTrue(System.Boolean,System.Action)">
            <summary>
                A bool extension method that execute an Action if the value is true.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:Extensions.ToBinary(System.Boolean)">
            <summary>
                A bool extension method that convert this object into a binary representation.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>A binary represenation of this object.</returns>
        </member>
        <member name="M:Extensions.ToString(System.Boolean,System.String,System.String)">
            <summary>
                A bool extension method that show the trueValue when the @this value is true; otherwise show the falseValue.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="trueValue">The true value to be returned if the @this value is true.</param>
            <param name="falseValue">The false value to be returned if the @this value is false.</param>
            <returns>A string that represents of the current boolean value.</returns>
        </member>
        <member name="M:Extensions.Resize(System.Byte[],System.Int32)">
            <summary>
                A byte[] extension method that resizes the byte[].
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="newSize">Size of the new.</param>
            <returns>A byte[].</returns>
        </member>
        <member name="M:Extensions.ToImage(System.Byte[])">
            <summary>
                A byte[] extension method that converts the @this to an image.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as an Image.</returns>
        </member>
        <member name="M:Extensions.ToMemoryStream(System.Byte[])">
            <summary>
                A byte[] extension method that converts the @this to a memory stream.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a MemoryStream.</returns>
        </member>
        <member name="M:Extensions.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
                Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array
                encoded with base-64 digits. Parameters specify the subsets as offsets in the input and output arrays, and
                the number of elements in the input array to convert.
            </summary>
            <param name="inArray">An input array of 8-bit unsigned integers.</param>
            <param name="offsetIn">A position within .</param>
            <param name="length">The number of elements of  to convert.</param>
            <param name="outArray">An output array of Unicode characters.</param>
            <param name="offsetOut">A position within .</param>
            <returns>A 32-bit signed integer containing the number of bytes in .</returns>
        </member>
        <member name="M:Extensions.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
            <summary>
                Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array
                encoded with base-64 digits. Parameters specify the subsets as offsets in the input and output arrays, the
                number of elements in the input array to convert, and whether line breaks are inserted in the output array.
            </summary>
            <param name="inArray">An input array of 8-bit unsigned integers.</param>
            <param name="offsetIn">A position within .</param>
            <param name="length">The number of elements of  to convert.</param>
            <param name="outArray">An output array of Unicode characters.</param>
            <param name="offsetOut">A position within .</param>
            <param name="options">to insert a line break every 76 characters, or  to not insert line breaks.</param>
            <returns>A 32-bit signed integer containing the number of bytes in .</returns>
        </member>
        <member name="M:Extensions.ToBase64String(System.Byte[])">
            <summary>
                Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with
                base-64 digits.
            </summary>
            <param name="inArray">An array of 8-bit unsigned integers.</param>
            <returns>The string representation, in base 64, of the contents of .</returns>
        </member>
        <member name="M:Extensions.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
            <summary>
                Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with
                base-64 digits. A parameter specifies whether to insert line breaks in the return value.
            </summary>
            <param name="inArray">An array of 8-bit unsigned integers.</param>
            <param name="options">to insert a line break every 76 characters, or  to not insert line breaks.</param>
            <returns>The string representation in base 64 of the elements in .</returns>
        </member>
        <member name="M:Extensions.ToBase64String(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is
                encoded with base-64 digits. Parameters specify the subset as an offset in the input array, and the number of
                elements in the array to convert.
            </summary>
            <param name="inArray">An array of 8-bit unsigned integers.</param>
            <param name="offset">An offset in .</param>
            <param name="length">The number of elements of  to convert.</param>
            <returns>The string representation in base 64 of  elements of , starting at position .</returns>
        </member>
        <member name="M:Extensions.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
            <summary>
                Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is
                encoded with base-64 digits. Parameters specify the subset as an offset in the input array, the number of
                elements in the array to convert, and whether to insert line breaks in the return value.
            </summary>
            <param name="inArray">An array of 8-bit unsigned integers.</param>
            <param name="offset">An offset in .</param>
            <param name="length">The number of elements of  to convert.</param>
            <param name="options">to insert a line break every 76 characters, or  to not insert line breaks.</param>
            <returns>The string representation in base 64 of  elements of , starting at position .</returns>
        </member>
        <member name="M:Extensions.UrlTokenEncode(System.Byte[])">
            <summary>
                Encodes a byte array into its equivalent string representation using base 64 digits, which is usable for
                transmission on the URL.
            </summary>
            <param name="input">The byte array to encode.</param>
            <returns>
                The string containing the encoded token if the byte array length is greater than one; otherwise, an empty
                string (&quot;&quot;).
            </returns>
        </member>
        <member name="M:Extensions.UrlDecode(System.Byte[],System.Text.Encoding)">
            <summary>
                Converts a URL-encoded byte array into a decoded string using the specified decoding object.
            </summary>
            <param name="bytes">The array of bytes to decode.</param>
            <param name="e">The  that specifies the decoding scheme.</param>
            <returns>A decoded string.</returns>
        </member>
        <member name="M:Extensions.UrlDecode(System.Byte[],System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
                Converts a URL-encoded byte array into a decoded string using the specified encoding object, starting at the
                specified position in the array, and continuing for the specified number of bytes.
            </summary>
            <param name="bytes">The array of bytes to decode.</param>
            <param name="offset">The position in the byte to begin decoding.</param>
            <param name="count">The number of bytes to decode.</param>
            <param name="e">The  object that specifies the decoding scheme.</param>
            <returns>A decoded string.</returns>
        </member>
        <member name="M:Extensions.UrlDecodeToBytes(System.Byte[])">
            <summary>
                Converts a URL-encoded array of bytes into a decoded array of bytes.
            </summary>
            <param name="bytes">The array of bytes to decode.</param>
            <returns>A decoded array of bytes.</returns>
        </member>
        <member name="M:Extensions.UrlDecodeToBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Converts a URL-encoded array of bytes into a decoded array of bytes, starting at the specified position in
                the array and continuing for the specified number of bytes.
            </summary>
            <param name="bytes">The array of bytes to decode.</param>
            <param name="offset">The position in the byte array at which to begin decoding.</param>
            <param name="count">The number of bytes to decode.</param>
            <returns>A decoded array of bytes.</returns>
        </member>
        <member name="M:Extensions.UrlEncode(System.Byte[])">
            <summary>
                Converts a byte array into an encoded URL string.
            </summary>
            <param name="bytes">The array of bytes to encode.</param>
            <returns>An encoded string.</returns>
        </member>
        <member name="M:Extensions.UrlEncode(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Converts a byte array into a URL-encoded string, starting at the specified position in the array and
                continuing for the specified number of bytes.
            </summary>
            <param name="bytes">The array of bytes to encode.</param>
            <param name="offset">The position in the byte array at which to begin encoding.</param>
            <param name="count">The number of bytes to encode.</param>
            <returns>An encoded string.</returns>
        </member>
        <member name="M:Extensions.UrlEncodeToBytes(System.Byte[])">
            <summary>
                Converts an array of bytes into a URL-encoded array of bytes.
            </summary>
            <param name="bytes">The array of bytes to encode.</param>
            <returns>An encoded array of bytes.</returns>
        </member>
        <member name="M:Extensions.UrlEncodeToBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Converts an array of bytes into a URL-encoded array of bytes, starting at the specified position in the array
                and continuing for the specified number of bytes.
            </summary>
            <param name="bytes">The array of bytes to encode.</param>
            <param name="offset">The position in the byte array at which to begin encoding.</param>
            <param name="count">The number of bytes to encode.</param>
            <returns>An encoded array of bytes.</returns>
        </member>
        <member name="M:Extensions.Max(System.Byte,System.Byte)">
            <summary>
                Returns the larger of two 8-bit unsigned integers.
            </summary>
            <param name="val1">The first of two 8-bit unsigned integers to compare.</param>
            <param name="val2">The second of two 8-bit unsigned integers to compare.</param>
            <returns>Parameter  or , whichever is larger.</returns>
        </member>
        <member name="M:Extensions.Min(System.Byte,System.Byte)">
            <summary>
                Returns the smaller of two 8-bit unsigned integers.
            </summary>
            <param name="val1">The first of two 8-bit unsigned integers to compare.</param>
            <param name="val2">The second of two 8-bit unsigned integers to compare.</param>
            <returns>Parameter  or , whichever is smaller.</returns>
        </member>
        <member name="M:Extensions.Repeat(System.Char,System.Int32)">
            <summary>
                A char extension method that repeats a character the specified number of times.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="repeatCount">Number of repeats.</param>
            <returns>The repeated char.</returns>
        </member>
        <member name="M:Extensions.To(System.Char,System.Char)">
            <summary>
                Enumerates from @this to toCharacter.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="toCharacter">to character.</param>
            <returns>An enumerator that allows foreach to be used to process @this to toCharacter.</returns>
        </member>
        <member name="M:Extensions.ConvertToUtf32(System.Char,System.Char)">
            <summary>
                Converts the value of a UTF-16 encoded surrogate pair into a Unicode code point.
            </summary>
            <param name="highSurrogate">A high surrogate code unit (that is, a code unit ranging from U+D800 through U+DBFF).</param>
            <param name="lowSurrogate">A low surrogate code unit (that is, a code unit ranging from U+DC00 through U+DFFF).</param>
            <returns>The 21-bit Unicode code point represented by the  and  parameters.</returns>
        </member>
        <member name="M:Extensions.GetNumericValue(System.Char)">
            <summary>
                Converts the specified numeric Unicode character to a double-precision floating point number.
            </summary>
            <param name="c">The Unicode character to convert.</param>
            <returns>The numeric value of  if that character represents a number; otherwise, -1.0.</returns>
        </member>
        <member name="M:Extensions.GetUnicodeCategory(System.Char)">
            <summary>
                Categorizes a specified Unicode character into a group identified by one of the  values.
            </summary>
            <param name="c">The Unicode character to categorize.</param>
            <returns>A  value that identifies the group that contains .</returns>
        </member>
        <member name="M:Extensions.IsControl(System.Char)">
            <summary>
                Indicates whether the specified Unicode character is categorized as a control character.
            </summary>
            <param name="c">The Unicode character to evaluate.</param>
            <returns>true if  is a control character; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.IsDigit(System.Char)">
            <summary>
                Indicates whether the specified Unicode character is categorized as a decimal digit.
            </summary>
            <param name="c">The Unicode character to evaluate.</param>
            <returns>true if  is a decimal digit; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.IsHighSurrogate(System.Char)">
            <summary>
                Indicates whether the specified  object is a high surrogate.
            </summary>
            <param name="c">The Unicode character to evaluate.</param>
            <returns>
                true if the numeric value of the  parameter ranges from U+D800 through U+DBFF; otherwise, false.
            </returns>
        </member>
        <member name="M:Extensions.IsLetter(System.Char)">
            <summary>
                Indicates whether the specified Unicode character is categorized as a Unicode letter.
            </summary>
            <param name="c">The Unicode character to evaluate.</param>
            <returns>true if  is a letter; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.IsLetterOrDigit(System.Char)">
            <summary>
                Indicates whether the specified Unicode character is categorized as a letter or a decimal digit.
            </summary>
            <param name="c">The Unicode character to evaluate.</param>
            <returns>true if  is a letter or a decimal digit; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.IsLower(System.Char)">
            <summary>
                Indicates whether the specified Unicode character is categorized as a lowercase letter.
            </summary>
            <param name="c">The Unicode character to evaluate.</param>
            <returns>true if  is a lowercase letter; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.IsLowSurrogate(System.Char)">
            <summary>
                Indicates whether the specified  object is a low surrogate.
            </summary>
            <param name="c">The character to evaluate.</param>
            <returns>
                true if the numeric value of the  parameter ranges from U+DC00 through U+DFFF; otherwise, false.
            </returns>
        </member>
        <member name="M:Extensions.IsNumber(System.Char)">
            <summary>
                Indicates whether the specified Unicode character is categorized as a number.
            </summary>
            <param name="c">The Unicode character to evaluate.</param>
            <returns>true if  is a number; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.IsPunctuation(System.Char)">
            <summary>
                Indicates whether the specified Unicode character is categorized as a punctuation mark.
            </summary>
            <param name="c">The Unicode character to evaluate.</param>
            <returns>true if  is a punctuation mark; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.IsSeparator(System.Char)">
            <summary>
                Indicates whether the specified Unicode character is categorized as a separator character.
            </summary>
            <param name="c">The Unicode character to evaluate.</param>
            <returns>true if  is a separator character; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.IsSurrogate(System.Char)">
            <summary>
                Indicates whether the specified character has a surrogate code unit.
            </summary>
            <param name="c">The Unicode character to evaluate.</param>
            <returns>true if  is either a high surrogate or a low surrogate; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.IsSurrogatePair(System.Char,System.Char)">
            <summary>
                Indicates whether the two specified  objects form a surrogate pair.
            </summary>
            <param name="highSurrogate">The character to evaluate as the high surrogate of a surrogate pair.</param>
            <param name="lowSurrogate">The character to evaluate as the low surrogate of a surrogate pair.</param>
            <returns>
                true if the numeric value of the  parameter ranges from U+D800 through U+DBFF, and the numeric value of the
                parameter ranges from U+DC00 through U+DFFF; otherwise, false.
            </returns>
        </member>
        <member name="M:Extensions.IsSymbol(System.Char)">
            <summary>
                Indicates whether the specified Unicode character is categorized as a symbol character.
            </summary>
            <param name="c">The Unicode character to evaluate.</param>
            <returns>true if  is a symbol character; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.IsUpper(System.Char)">
            <summary>
                Indicates whether the specified Unicode character is categorized as an uppercase letter.
            </summary>
            <param name="c">The Unicode character to evaluate.</param>
            <returns>true if  is an uppercase letter; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.IsWhiteSpace(System.Char)">
            <summary>
                Indicates whether the specified Unicode character is categorized as white space.
            </summary>
            <param name="c">The Unicode character to evaluate.</param>
            <returns>true if  is white space; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.ToLower(System.Char,System.Globalization.CultureInfo)">
            <summary>
                Converts the value of a specified Unicode character to its lowercase equivalent using specified culture-
                specific formatting information.
            </summary>
            <param name="c">The Unicode character to convert.</param>
            <param name="culture">An object that supplies culture-specific casing rules.</param>
            <returns>
                The lowercase equivalent of , modified according to , or the unchanged value of , if  is already lowercase or
                not alphabetic.
            </returns>
        </member>
        <member name="M:Extensions.ToLower(System.Char)">
            <summary>
                Converts the value of a Unicode character to its lowercase equivalent.
            </summary>
            <param name="c">The Unicode character to convert.</param>
            <returns>
                The lowercase equivalent of , or the unchanged value of , if  is already lowercase or not alphabetic.
            </returns>
        </member>
        <member name="M:Extensions.ToLowerInvariant(System.Char)">
            <summary>
                Converts the value of a Unicode character to its lowercase equivalent using the casing rules of the invariant
                culture.
            </summary>
            <param name="c">The Unicode character to convert.</param>
            <returns>
                The lowercase equivalent of the  parameter, or the unchanged value of , if  is already lowercase or not
                alphabetic.
            </returns>
        </member>
        <member name="M:Extensions.ToString(System.Char)">
            <summary>
                Converts the specified Unicode character to its equivalent string representation.
            </summary>
            <param name="c">The Unicode character to convert.</param>
            <returns>The string representation of the value of .</returns>
        </member>
        <member name="M:Extensions.ToUpper(System.Char,System.Globalization.CultureInfo)">
            <summary>
                Converts the value of a specified Unicode character to its uppercase equivalent using specified culture-
                specific formatting information.
            </summary>
            <param name="c">The Unicode character to convert.</param>
            <param name="culture">An object that supplies culture-specific casing rules.</param>
            <returns>
                The uppercase equivalent of , modified according to , or the unchanged value of  if  is already uppercase,
                has no uppercase equivalent, or is not alphabetic.
            </returns>
        </member>
        <member name="M:Extensions.ToUpper(System.Char)">
            <summary>
                Converts the value of a Unicode character to its uppercase equivalent.
            </summary>
            <param name="c">The Unicode character to convert.</param>
            <returns>
                The uppercase equivalent of , or the unchanged value of  if  is already uppercase, has no uppercase
                equivalent, or is not alphabetic.
            </returns>
        </member>
        <member name="M:Extensions.ToUpperInvariant(System.Char)">
            <summary>
                Converts the value of a Unicode character to its uppercase equivalent using the casing rules of the invariant
                culture.
            </summary>
            <param name="c">The Unicode character to convert.</param>
            <returns>
                The uppercase equivalent of the  parameter, or the unchanged value of , if  is already uppercase or not
                alphabetic.
            </returns>
        </member>
        <member name="M:Extensions.In(System.Char,System.Char[])">
            <summary>
                A T extension method to determines whether the object is equal to any of the provided values.
            </summary>
            <param name="this">The object to be compared.</param>
            <param name="values">The value list to compare with the object.</param>
            <returns>true if the values list contains the object, else false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.NotIn(System.Char,System.Char[])">
            <summary>
                A T extension method to determines whether the object is not equal to any of the provided values.
            </summary>
            <param name="this">The object to be compared.</param>
            <param name="values">The value list to compare with the object.</param>
            <returns>true if the values list doesn't contains the object, else false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.SetTime(System.DateTimeOffset,System.Int32)">
            <summary>
                Sets the time of the current date with minute precision.
            </summary>
            <param name="current">The current date.</param>
            <param name="hour">The hour.</param>
            <returns>A DateTimeOffset.</returns>
        </member>
        <member name="M:Extensions.SetTime(System.DateTimeOffset,System.Int32,System.Int32)">
            <summary>
                Sets the time of the current date with minute precision.
            </summary>
            <param name="current">The current date.</param>
            <param name="hour">The hour.</param>
            <param name="minute">The minute.</param>
            <returns>A DateTimeOffset.</returns>
        </member>
        <member name="M:Extensions.SetTime(System.DateTimeOffset,System.Int32,System.Int32,System.Int32)">
            <summary>
                Sets the time of the current date with second precision.
            </summary>
            <param name="current">The current date.</param>
            <param name="hour">The hour.</param>
            <param name="minute">The minute.</param>
            <param name="second">The second.</param>
            <returns>A DateTimeOffset.</returns>
        </member>
        <member name="M:Extensions.SetTime(System.DateTimeOffset,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Sets the time of the current date with millisecond precision.
            </summary>
            <param name="current">The current date.</param>
            <param name="hour">The hour.</param>
            <param name="minute">The minute.</param>
            <param name="second">The second.</param>
            <param name="millisecond">The millisecond.</param>
            <returns>A DateTimeOffset.</returns>
        </member>
        <member name="M:Extensions.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)">
            <summary>
                Converts a time to the time in a particular time zone.
            </summary>
            <param name="dateTimeOffset">The date and time to convert.</param>
            <param name="destinationTimeZone">The time zone to convert  to.</param>
            <returns>The date and time in the destination time zone.</returns>
        </member>
        <member name="M:Extensions.ConvertTimeBySystemTimeZoneId(System.DateTimeOffset,System.String)">
            <summary>
                Converts a time to the time in another time zone based on the time zone&#39;s identifier.
            </summary>
            <param name="dateTimeOffset">The date and time to convert.</param>
            <param name="destinationTimeZoneId">The identifier of the destination time zone.</param>
            <returns>The date and time in the destination time zone.</returns>
        </member>
        <member name="M:Extensions.Between(System.DateTimeOffset,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
                A T extension method that check if the value is between (exclusif) the minValue and maxValue.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns>true if the value is between the minValue and maxValue, otherwise false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.In(System.DateTimeOffset,System.DateTimeOffset[])">
            <summary>
                A T extension method to determines whether the object is equal to any of the provided values.
            </summary>
            <param name="this">The object to be compared.</param>
            <param name="values">The value list to compare with the object.</param>
            <returns>true if the values list contains the object, else false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.InRange(System.DateTimeOffset,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
                A T extension method that check if the value is between inclusively the minValue and maxValue.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns>true if the value is between inclusively the minValue and maxValue, otherwise false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.NotIn(System.DateTimeOffset,System.DateTimeOffset[])">
            <summary>
                A T extension method to determines whether the object is not equal to any of the provided values.
            </summary>
            <param name="this">The object to be compared.</param>
            <param name="values">The value list to compare with the object.</param>
            <returns>true if the values list doesn't contains the object, else false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.Age(System.DateTime)">
            <summary>
                A DateTime extension method that ages the given this.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>An int.</returns>
        </member>
        <member name="M:Extensions.Elapsed(System.DateTime)">
            <summary>
                A DateTime extension method that elapsed the given datetime.
            </summary>
            <param name="datetime">The datetime to act on.</param>
            <returns>A TimeSpan.</returns>
        </member>
        <member name="M:Extensions.EndOfDay(System.DateTime)">
            <summary>
                A DateTime extension method that return a DateTime with the time set to "23:59:59:999". The last moment of
                the day. Use "DateTime2" column type in sql to keep the precision.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>A DateTime of the day with the time set to "23:59:59:999".</returns>
        </member>
        <member name="M:Extensions.EndOfMonth(System.DateTime)">
            <summary>
                A DateTime extension method that return a DateTime of the last day of the month with the time set to
                "23:59:59:999". The last moment of the last day of the month.  Use "DateTime2" column type in sql to keep the
                precision.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>A DateTime of the last day of the month with the time set to "23:59:59:999".</returns>
        </member>
        <member name="M:Extensions.EndOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
                A System.DateTime extension method that ends of week.
            </summary>
            <param name="dt">Date/Time of the dt.</param>
            <param name="startDayOfWeek">(Optional) the start day of week.</param>
            <returns>A DateTime.</returns>
        </member>
        <member name="M:Extensions.EndOfYear(System.DateTime)">
            <summary>
                A DateTime extension method that return a DateTime of the last day of the year with the time set to
                "23:59:59:999". The last moment of the last day of the year.  Use "DateTime2" column type in sql to keep the
                precision.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>A DateTime of the last day of the year with the time set to "23:59:59:999".</returns>
        </member>
        <member name="M:Extensions.FirstDayOfWeek(System.DateTime)">
            <summary>
                A DateTime extension method that first day of week.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>A DateTime.</returns>
        </member>
        <member name="M:Extensions.IsAfternoon(System.DateTime)">
            <summary>
                A DateTime extension method that query if '@this' is afternoon.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if afternoon, false if not.</returns>
        </member>
        <member name="M:Extensions.IsDateEqual(System.DateTime,System.DateTime)">
            <summary>
                A DateTime extension method that query if 'date' is date equal.
            </summary>
            <param name="date">The date to act on.</param>
            <param name="dateToCompare">Date/Time of the date to compare.</param>
            <returns>true if date equal, false if not.</returns>
        </member>
        <member name="M:Extensions.IsFuture(System.DateTime)">
            <summary>
                A DateTime extension method that query if '@this' is in the future.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if the value is in the future, false if not.</returns>
        </member>
        <member name="M:Extensions.IsMorning(System.DateTime)">
            <summary>
                A DateTime extension method that query if '@this' is morning.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if morning, false if not.</returns>
        </member>
        <member name="M:Extensions.IsNow(System.DateTime)">
            <summary>
                A DateTime extension method that query if '@this' is now.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if now, false if not.</returns>
        </member>
        <member name="M:Extensions.IsPast(System.DateTime)">
            <summary>
                A DateTime extension method that query if '@this' is in the past.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if the value is in the past, false if not.</returns>
        </member>
        <member name="M:Extensions.IsTimeEqual(System.DateTime,System.DateTime)">
            <summary>
                A DateTime extension method that query if 'time' is time equal.
            </summary>
            <param name="time">The time to act on.</param>
            <param name="timeToCompare">Date/Time of the time to compare.</param>
            <returns>true if time equal, false if not.</returns>
        </member>
        <member name="M:Extensions.IsToday(System.DateTime)">
            <summary>
                A DateTime extension method that query if '@this' is today.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if today, false if not.</returns>
        </member>
        <member name="M:Extensions.IsWeekDay(System.DateTime)">
            <summary>
                A DateTime extension method that query if '@this' is a week day.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if '@this' is a week day, false if not.</returns>
        </member>
        <member name="M:Extensions.IsWeekendDay(System.DateTime)">
            <summary>
                A DateTime extension method that query if '@this' is a weekend day.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if '@this' is a weekend day, false if not.</returns>
        </member>
        <member name="M:Extensions.LastDayOfWeek(System.DateTime)">
            <summary>
                A DateTime extension method that last day of week.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>A DateTime.</returns>
        </member>
        <member name="M:Extensions.SetTime(System.DateTime,System.Int32)">
            <summary>
                Sets the time of the current date with minute precision.
            </summary>
            <param name="current">The current date.</param>
            <param name="hour">The hour.</param>
            <returns>A DateTime.</returns>
        </member>
        <member name="M:Extensions.SetTime(System.DateTime,System.Int32,System.Int32)">
            <summary>
                Sets the time of the current date with minute precision.
            </summary>
            <param name="current">The current date.</param>
            <param name="hour">The hour.</param>
            <param name="minute">The minute.</param>
            <returns>A DateTime.</returns>
        </member>
        <member name="M:Extensions.SetTime(System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
                Sets the time of the current date with second precision.
            </summary>
            <param name="current">The current date.</param>
            <param name="hour">The hour.</param>
            <param name="minute">The minute.</param>
            <param name="second">The second.</param>
            <returns>A DateTime.</returns>
        </member>
        <member name="M:Extensions.SetTime(System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Sets the time of the current date with millisecond precision.
            </summary>
            <param name="current">The current date.</param>
            <param name="hour">The hour.</param>
            <param name="minute">The minute.</param>
            <param name="second">The second.</param>
            <param name="millisecond">The millisecond.</param>
            <returns>A DateTime.</returns>
        </member>
        <member name="M:Extensions.StartOfDay(System.DateTime)">
            <summary>
                A DateTime extension method that return a DateTime with the time set to "00:00:00:000". The first moment of
                the day.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>A DateTime of the day with the time set to "00:00:00:000".</returns>
        </member>
        <member name="M:Extensions.StartOfMonth(System.DateTime)">
            <summary>
                A DateTime extension method that return a DateTime of the first day of the month with the time set to
                "00:00:00:000". The first moment of the first day of the month.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>A DateTime of the first day of the month with the time set to "00:00:00:000".</returns>
        </member>
        <member name="M:Extensions.StartOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
                A DateTime extension method that starts of week.
            </summary>
            <param name="dt">The dt to act on.</param>
            <param name="startDayOfWeek">(Optional) the start day of week.</param>
            <returns>A DateTime.</returns>
        </member>
        <member name="M:Extensions.StartOfYear(System.DateTime)">
            <summary>
                A DateTime extension method that return a DateTime of the first day of the year with the time set to
                "00:00:00:000". The first moment of the first day of the year.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>A DateTime of the first day of the year with the time set to "00:00:00:000".</returns>
        </member>
        <member name="M:Extensions.ToEpochTimeSpan(System.DateTime)">
            <summary>
                A DateTime extension method that converts the @this to an epoch time span.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a TimeSpan.</returns>
        </member>
        <member name="M:Extensions.Tomorrow(System.DateTime)">
            <summary>
                A DateTime extension method that tomorrows the given this.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>Tomorrow date at same time.</returns>
        </member>
        <member name="M:Extensions.Yesterday(System.DateTime)">
            <summary>
                A DateTime extension method that yesterdays the given this.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>Yesterday date at same time.</returns>
        </member>
        <member name="M:Extensions.ConvertTime(System.DateTime,System.TimeZoneInfo)">
            <summary>
                Converts a time to the time in a particular time zone.
            </summary>
            <param name="dateTime">The date and time to convert.</param>
            <param name="destinationTimeZone">The time zone to convert  to.</param>
            <returns>The date and time in the destination time zone.</returns>
        </member>
        <member name="M:Extensions.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)">
            <summary>
                Converts a time from one time zone to another.
            </summary>
            <param name="dateTime">The date and time to convert.</param>
            <param name="sourceTimeZone">The time zone of .</param>
            <param name="destinationTimeZone">The time zone to convert  to.</param>
            <returns>
                The date and time in the destination time zone that corresponds to the  parameter in the source time zone.
            </returns>
        </member>
        <member name="M:Extensions.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String)">
            <summary>
                Converts a time to the time in another time zone based on the time zone&#39;s identifier.
            </summary>
            <param name="dateTime">The date and time to convert.</param>
            <param name="destinationTimeZoneId">The identifier of the destination time zone.</param>
            <returns>The date and time in the destination time zone.</returns>
        </member>
        <member name="M:Extensions.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String,System.String)">
            <summary>
                Converts a time from one time zone to another based on time zone identifiers.
            </summary>
            <param name="dateTime">The date and time to convert.</param>
            <param name="sourceTimeZoneId">The identifier of the source time zone.</param>
            <param name="destinationTimeZoneId">The identifier of the destination time zone.</param>
            <returns>
                The date and time in the destination time zone that corresponds to the  parameter in the source time zone.
            </returns>
        </member>
        <member name="M:Extensions.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)">
            <summary>
                Converts a Coordinated Universal Time (UTC) to the time in a specified time zone.
            </summary>
            <param name="dateTime">The Coordinated Universal Time (UTC).</param>
            <param name="destinationTimeZone">The time zone to convert  to.</param>
            <returns>
                The date and time in the destination time zone. Its  property is  if  is ; otherwise, its  property is .
            </returns>
        </member>
        <member name="M:Extensions.ConvertTimeToUtc(System.DateTime)">
            <summary>
                Converts the current date and time to Coordinated Universal Time (UTC).
            </summary>
            <param name="dateTime">The date and time to convert.</param>
            <returns>
                The Coordinated Universal Time (UTC) that corresponds to the  parameter. The  value&#39;s  property is always
                set to .
            </returns>
        </member>
        <member name="M:Extensions.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)">
            <summary>
                Converts the time in a specified time zone to Coordinated Universal Time (UTC).
            </summary>
            <param name="dateTime">The date and time to convert.</param>
            <param name="sourceTimeZone">The time zone of .</param>
            <returns>
                The Coordinated Universal Time (UTC) that corresponds to the  parameter. The  object&#39;s  property is
                always set to .
            </returns>
        </member>
        <member name="M:Extensions.IsDaylightSavingTime(System.DateTime,System.Globalization.DaylightTime)">
            <summary>
                Returns a value indicating whether the specified date and time is within the specified daylight saving time
                period.
            </summary>
            <param name="time">A date and time.</param>
            <param name="daylightTimes">A daylight saving time period.</param>
            <returns>true if  is in ; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.ToFullDateTimeString(System.DateTime)">
            <summary>
                A DateTime extension method that converts this object to a full date time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToFullDateTimeString(System.DateTime,System.String)">
            <summary>
                A DateTime extension method that converts this object to a full date time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToFullDateTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                A DateTime extension method that converts this object to a full date time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToLongDateShortTimeString(System.DateTime)">
            <summary>
                A DateTime extension method that converts this object to a long date short time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToLongDateShortTimeString(System.DateTime,System.String)">
            <summary>
                A DateTime extension method that converts this object to a long date short time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToLongDateShortTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                A DateTime extension method that converts this object to a long date short time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToLongDateString(System.DateTime)">
            <summary>
                A DateTime extension method that converts this object to a long date string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToLongDateString(System.DateTime,System.String)">
            <summary>
                A DateTime extension method that converts this object to a long date string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToLongDateString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                A DateTime extension method that converts this object to a long date string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToLongDateTimeString(System.DateTime)">
            <summary>
                A DateTime extension method that converts this object to a long date time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToLongDateTimeString(System.DateTime,System.String)">
            <summary>
                A DateTime extension method that converts this object to a long date time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToLongDateTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                A DateTime extension method that converts this object to a long date time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToLongTimeString(System.DateTime)">
            <summary>
                A DateTime extension method that converts this object to a long time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToLongTimeString(System.DateTime,System.String)">
            <summary>
                A DateTime extension method that converts this object to a long time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToLongTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                A DateTime extension method that converts this object to a long time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToMonthDayString(System.DateTime)">
            <summary>
                A DateTime extension method that converts this object to a month day string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToMonthDayString(System.DateTime,System.String)">
            <summary>
                A DateTime extension method that converts this object to a month day string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToMonthDayString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                A DateTime extension method that converts this object to a month day string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToRFC1123String(System.DateTime)">
            <summary>
                A DateTime extension method that converts this object to a rfc 1123 string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToRFC1123String(System.DateTime,System.String)">
            <summary>
                A DateTime extension method that converts this object to a rfc 1123 string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToRFC1123String(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                A DateTime extension method that converts this object to a rfc 1123 string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToShortDateLongTimeString(System.DateTime)">
            <summary>
                A DateTime extension method that converts this object to a short date long time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToShortDateLongTimeString(System.DateTime,System.String)">
            <summary>
                A DateTime extension method that converts this object to a short date long time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToShortDateLongTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                A DateTime extension method that converts this object to a short date long time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToShortDateString(System.DateTime)">
            <summary>
                A DateTime extension method that converts this object to a short date string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToShortDateString(System.DateTime,System.String)">
            <summary>
                A DateTime extension method that converts this object to a short date string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToShortDateString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                A DateTime extension method that converts this object to a short date string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToShortDateTimeString(System.DateTime)">
            <summary>
                A DateTime extension method that converts this object to a short date time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToShortDateTimeString(System.DateTime,System.String)">
            <summary>
                A DateTime extension method that converts this object to a short date time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToShortDateTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                A DateTime extension method that converts this object to a short date time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToShortTimeString(System.DateTime)">
            <summary>
                A DateTime extension method that converts this object to a short time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToShortTimeString(System.DateTime,System.String)">
            <summary>
                A DateTime extension method that converts this object to a short time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToShortTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                A DateTime extension method that converts this object to a short time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToSortableDateTimeString(System.DateTime)">
            <summary>
                A DateTime extension method that converts this object to a sortable date time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToSortableDateTimeString(System.DateTime,System.String)">
            <summary>
                A DateTime extension method that converts this object to a sortable date time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToSortableDateTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                A DateTime extension method that converts this object to a sortable date time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToUniversalSortableDateTimeString(System.DateTime)">
            <summary>
                A DateTime extension method that converts this object to an universal sortable date time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToUniversalSortableDateTimeString(System.DateTime,System.String)">
            <summary>
                A DateTime extension method that converts this object to an universal sortable date time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToUniversalSortableDateTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                A DateTime extension method that converts this object to an universal sortable date time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToUniversalSortableLongDateTimeString(System.DateTime)">
            <summary>
                A DateTime extension method that converts this object to an universal sortable long date time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToUniversalSortableLongDateTimeString(System.DateTime,System.String)">
            <summary>
                A DateTime extension method that converts this object to an universal sortable long date time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToUniversalSortableLongDateTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                A DateTime extension method that converts this object to an universal sortable long date time string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToYearMonthString(System.DateTime)">
            <summary>
                A DateTime extension method that converts this object to a year month string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToYearMonthString(System.DateTime,System.String)">
            <summary>
                A DateTime extension method that converts this object to a year month string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToYearMonthString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
                A DateTime extension method that converts this object to a year month string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="culture">The culture.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.Between(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
                A T extension method that check if the value is between (exclusif) the minValue and maxValue.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns>true if the value is between the minValue and maxValue, otherwise false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.In(System.DateTime,System.DateTime[])">
            <summary>
                A T extension method to determines whether the object is equal to any of the provided values.
            </summary>
            <param name="this">The object to be compared.</param>
            <param name="values">The value list to compare with the object.</param>
            <returns>true if the values list contains the object, else false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.InRange(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
                A T extension method that check if the value is between inclusively the minValue and maxValue.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns>true if the value is between inclusively the minValue and maxValue, otherwise false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.NotIn(System.DateTime,System.DateTime[])">
            <summary>
                A T extension method to determines whether the object is not equal to any of the provided values.
            </summary>
            <param name="this">The object to be compared.</param>
            <param name="values">The value list to compare with the object.</param>
            <returns>true if the values list doesn't contains the object, else false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.ToMoney(System.Decimal)">
            <summary>
                A Decimal extension method that converts the @this to a money.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a Decimal.</returns>
        </member>
        <member name="M:Extensions.Divide(System.Decimal,System.Decimal)">
            <summary>
                Divides two specified  values.
            </summary>
            <param name="d1">The dividend.</param>
            <param name="d2">The divisor.</param>
            <returns>The result of dividing  by .</returns>
        </member>
        <member name="M:Extensions.GetBits(System.Decimal)">
            <summary>
                Converts the value of a specified instance of  to its equivalent binary representation.
            </summary>
            <param name="d">The value to convert.</param>
            <returns>A 32-bit signed integer array with four elements that contain the binary representation of .</returns>
        </member>
        <member name="M:Extensions.Multiply(System.Decimal,System.Decimal)">
            <summary>
                Multiplies two specified  values.
            </summary>
            <param name="d1">The multiplicand.</param>
            <param name="d2">The multiplier.</param>
            <returns>The result of multiplying  and .</returns>
        </member>
        <member name="M:Extensions.Negate(System.Decimal)">
            <summary>
                Returns the result of multiplying the specified  value by negative one.
            </summary>
            <param name="d">The value to negate.</param>
            <returns>A decimal number with the value of , but the opposite sign.-or- Zero, if  is zero.</returns>
        </member>
        <member name="M:Extensions.Remainder(System.Decimal,System.Decimal)">
            <summary>
                Computes the remainder after dividing two  values.
            </summary>
            <param name="d1">The dividend.</param>
            <param name="d2">The divisor.</param>
            <returns>The remainder after dividing  by .</returns>
        </member>
        <member name="M:Extensions.Subtract(System.Decimal,System.Decimal)">
            <summary>
                Subtracts one specified  value from another.
            </summary>
            <param name="d1">The minuend.</param>
            <param name="d2">The subtrahend.</param>
            <returns>The result of subtracting  from .</returns>
        </member>
        <member name="M:Extensions.ToByte(System.Decimal)">
            <summary>
                Converts the value of the specified  to the equivalent 8-bit unsigned integer.
            </summary>
            <param name="value">The decimal number to convert.</param>
            <returns>An 8-bit unsigned integer equivalent to .</returns>
        </member>
        <member name="M:Extensions.ToDouble(System.Decimal)">
            <summary>
                Converts the value of the specified  to the equivalent double-precision floating-point number.
            </summary>
            <param name="d">The decimal number to convert.</param>
            <returns>A double-precision floating-point number equivalent to .</returns>
        </member>
        <member name="M:Extensions.ToInt16(System.Decimal)">
            <summary>
                Converts the value of the specified  to the equivalent 16-bit signed integer.
            </summary>
            <param name="value">The decimal number to convert.</param>
            <returns>A 16-bit signed integer equivalent to .</returns>
        </member>
        <member name="M:Extensions.ToInt32(System.Decimal)">
            <summary>
                Converts the value of the specified  to the equivalent 32-bit signed integer.
            </summary>
            <param name="d">The decimal number to convert.</param>
            <returns>A 32-bit signed integer equivalent to the value of .</returns>
        </member>
        <member name="M:Extensions.ToInt64(System.Decimal)">
            <summary>
                Converts the value of the specified  to the equivalent 64-bit signed integer.
            </summary>
            <param name="d">The decimal number to convert.</param>
            <returns>A 64-bit signed integer equivalent to the value of .</returns>
        </member>
        <member name="M:Extensions.ToOACurrency(System.Decimal)">
            <summary>
                Converts the specified  value to the equivalent OLE Automation Currency value, which is contained in a 64-bit
                signed integer.
            </summary>
            <param name="value">The decimal number to convert.</param>
            <returns>A 64-bit signed integer that contains the OLE Automation equivalent of .</returns>
        </member>
        <member name="M:Extensions.ToSByte(System.Decimal)">
            <summary>
                Converts the value of the specified  to the equivalent 8-bit signed integer.
            </summary>
            <param name="value">The decimal number to convert.</param>
            <returns>An 8-bit signed integer equivalent to .</returns>
        </member>
        <member name="M:Extensions.ToSingle(System.Decimal)">
            <summary>
                Converts the value of the specified  to the equivalent single-precision floating-point number.
            </summary>
            <param name="d">The decimal number to convert.</param>
            <returns>A single-precision floating-point number equivalent to the value of .</returns>
        </member>
        <member name="M:Extensions.ToUInt16(System.Decimal)">
            <summary>
                Converts the value of the specified  to the equivalent 16-bit unsigned integer.
            </summary>
            <param name="value">The decimal number to convert.</param>
            <returns>A 16-bit unsigned integer equivalent to the value of .</returns>
        </member>
        <member name="M:Extensions.ToUInt32(System.Decimal)">
            <summary>
                Converts the value of the specified  to the equivalent 32-bit unsigned integer.
            </summary>
            <param name="d">The decimal number to convert.</param>
            <returns>A 32-bit unsigned integer equivalent to the value of .</returns>
        </member>
        <member name="M:Extensions.ToUInt64(System.Decimal)">
            <summary>
                Converts the value of the specified  to the equivalent 64-bit unsigned integer.
            </summary>
            <param name="d">The decimal number to convert.</param>
            <returns>A 64-bit unsigned integer equivalent to the value of .</returns>
        </member>
        <member name="M:Extensions.Abs(System.Decimal)">
            <summary>
                Returns the absolute value of a  number.
            </summary>
            <param name="value">A number that is greater than or equal to , but less than or equal to .</param>
            <returns>A decimal number, x, such that 0 ? x ?.</returns>
        </member>
        <member name="M:Extensions.Ceiling(System.Decimal)">
            <summary>
                Returns the smallest integral value that is greater than or equal to the specified decimal number.
            </summary>
            <param name="d">A decimal number.</param>
            <returns>
                The smallest integral value that is greater than or equal to . Note that this method returns a  instead of an
                integral type.
            </returns>
        </member>
        <member name="M:Extensions.Floor(System.Decimal)">
            <summary>
                Returns the largest integer less than or equal to the specified decimal number.
            </summary>
            <param name="d">A decimal number.</param>
            <returns>
                The largest integer less than or equal to .  Note that the method returns an integral value of type .
            </returns>
        </member>
        <member name="M:Extensions.Max(System.Decimal,System.Decimal)">
            <summary>
                Returns the larger of two decimal numbers.
            </summary>
            <param name="val1">The first of two decimal numbers to compare.</param>
            <param name="val2">The second of two decimal numbers to compare.</param>
            <returns>Parameter  or , whichever is larger.</returns>
        </member>
        <member name="M:Extensions.Min(System.Decimal,System.Decimal)">
            <summary>
                Returns the smaller of two decimal numbers.
            </summary>
            <param name="val1">The first of two decimal numbers to compare.</param>
            <param name="val2">The second of two decimal numbers to compare.</param>
            <returns>Parameter  or , whichever is smaller.</returns>
        </member>
        <member name="M:Extensions.Round(System.Decimal)">
            <summary>
                Rounds a decimal value to the nearest integral value.
            </summary>
            <param name="d">A decimal number to be rounded.</param>
            <returns>
                The integer nearest parameter . If the fractional component of  is halfway between two integers, one of which
                is even and the other odd, the even number is returned. Note that this method returns a  instead of an
                integral type.
            </returns>
        </member>
        <member name="M:Extensions.Round(System.Decimal,System.Int32)">
            <summary>
                Rounds a decimal value to a specified number of fractional digits.
            </summary>
            <param name="d">A decimal number to be rounded.</param>
            <param name="decimals">The number of decimal places in the return value.</param>
            <returns>The number nearest to  that contains a number of fractional digits equal to .</returns>
        </member>
        <member name="M:Extensions.Round(System.Decimal,System.MidpointRounding)">
            <summary>
                Rounds a decimal value to the nearest integer. A parameter specifies how to round the value if it is midway
                between two numbers.
            </summary>
            <param name="d">A decimal number to be rounded.</param>
            <param name="mode">Specification for how to round  if it is midway between two other numbers.</param>
            <returns>
                The integer nearest . If  is halfway between two numbers, one of which is even and the other odd, then
                determines which of the two is returned.
            </returns>
        </member>
        <member name="M:Extensions.Round(System.Decimal,System.Int32,System.MidpointRounding)">
            <summary>
                Rounds a decimal value to a specified number of fractional digits. A parameter specifies how to round the
                value if it is midway between two numbers.
            </summary>
            <param name="d">A decimal number to be rounded.</param>
            <param name="decimals">The number of decimal places in the return value.</param>
            <param name="mode">Specification for how to round  if it is midway between two other numbers.</param>
            <returns>
                The number nearest to  that contains a number of fractional digits equal to . If  has fewer fractional digits
                than ,  is returned unchanged.
            </returns>
        </member>
        <member name="M:Extensions.Sign(System.Decimal)">
            <summary>
                Returns a value indicating the sign of a decimal number.
            </summary>
            <param name="value">A signed decimal number.</param>
            <returns>
                A number that indicates the sign of , as shown in the following table.Return value Meaning -1  is less than
                zero. 0  is equal to zero. 1  is greater than zero.
            </returns>
        </member>
        <member name="M:Extensions.Truncate(System.Decimal)">
            <summary>
                Calculates the integral part of a specified decimal number.
            </summary>
            <param name="d">A number to truncate.</param>
            <returns>
                The integral part of ; that is, the number that remains after any fractional digits have been discarded.
            </returns>
        </member>
        <member name="M:Extensions.Between(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
                A T extension method that check if the value is between (exclusif) the minValue and maxValue.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns>true if the value is between the minValue and maxValue, otherwise false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.In(System.Decimal,System.Decimal[])">
            <summary>
                A T extension method to determines whether the object is equal to any of the provided values.
            </summary>
            <param name="this">The object to be compared.</param>
            <param name="values">The value list to compare with the object.</param>
            <returns>true if the values list contains the object, else false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.InRange(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
                A T extension method that check if the value is between inclusively the minValue and maxValue.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns>true if the value is between inclusively the minValue and maxValue, otherwise false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.NotIn(System.Decimal,System.Decimal[])">
            <summary>
                A T extension method to determines whether the object is not equal to any of the provided values.
            </summary>
            <param name="this">The object to be compared.</param>
            <param name="values">The value list to compare with the object.</param>
            <returns>true if the values list doesn't contains the object, else false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.Combine(System.Delegate,System.Delegate)">
            <summary>
                Concatenates the invocation lists of two delegates.
            </summary>
            <param name="a">The delegate whose invocation list comes first.</param>
            <param name="b">The delegate whose invocation list comes last.</param>
            ###
            <returns>
                A new delegate with an invocation list that concatenates the invocation lists of  and  in that order. Returns
                if  is null, returns  if  is a null reference, and returns a null reference if both  and  are null references.
            </returns>
        </member>
        <member name="M:Extensions.Remove(System.Delegate,System.Delegate)">
            <summary>
                Removes the last occurrence of the invocation list of a delegate from the invocation list of another delegate.
            </summary>
            <param name="source">The delegate from which to remove the invocation list of .</param>
            <param name="value">The delegate that supplies the invocation list to remove from the invocation list of .</param>
            ###
            <returns>
                A new delegate with an invocation list formed by taking the invocation list of  and removing the last
                occurrence of the invocation list of , if the invocation list of  is found within the invocation list of .
                Returns  if  is null or if the invocation list of  is not found within the invocation list of . Returns a
                null reference if the invocation list of  is equal to the invocation list of  or if  is a null reference.
            </returns>
        </member>
        <member name="M:Extensions.RemoveAll(System.Delegate,System.Delegate)">
            <summary>
                Removes all occurrences of the invocation list of a delegate from the invocation list of another delegate.
            </summary>
            <param name="source">The delegate from which to remove the invocation list of .</param>
            <param name="value">The delegate that supplies the invocation list to remove from the invocation list of .</param>
            ###
            <returns>
                A new delegate with an invocation list formed by taking the invocation list of  and removing all occurrences
                of the invocation list of , if the invocation list of  is found within the invocation list of . Returns  if
                is null or if the invocation list of  is not found within the invocation list of . Returns a null reference
                if the invocation list of  is equal to the invocation list of , if  contains only a series of invocation
                lists that are equal to the invocation list of , or if  is a null reference.
            </returns>
        </member>
        <member name="M:Extensions.ToMoney(System.Double)">
            <summary>
                A Double extension method that converts the @this to a money.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a Double.</returns>
        </member>
        <member name="M:Extensions.FromOADate(System.Double)">
            <summary>
                Returns a  equivalent to the specified OLE Automation Date.
            </summary>
            <param name="d">An OLE Automation Date value.</param>
            <returns>An object that represents the same date and time as .</returns>
        </member>
        <member name="M:Extensions.IsInfinity(System.Double)">
            <summary>
                Returns a value indicating whether the specified number evaluates to negative or positive infinity.
            </summary>
            <param name="d">A double-precision floating-point number.</param>
            <returns>true if  evaluates to  or ; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.IsNaN(System.Double)">
            <summary>
                Returns a value that indicates whether the specified value is not a number ().
            </summary>
            <param name="d">A double-precision floating-point number.</param>
            <returns>true if  evaluates to ; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.IsNegativeInfinity(System.Double)">
            <summary>
                Returns a value indicating whether the specified number evaluates to negative infinity.
            </summary>
            <param name="d">A double-precision floating-point number.</param>
            <returns>true if  evaluates to ; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.IsPositiveInfinity(System.Double)">
            <summary>
                Returns a value indicating whether the specified number evaluates to positive infinity.
            </summary>
            <param name="d">A double-precision floating-point number.</param>
            <returns>true if  evaluates to ; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.Abs(System.Double)">
            <summary>
                Returns the absolute value of a double-precision floating-point number.
            </summary>
            <param name="value">A number that is greater than or equal to , but less than or equal to .</param>
            <returns>A double-precision floating-point number, x, such that 0 ? x ?.</returns>
        </member>
        <member name="M:Extensions.Acos(System.Double)">
            <summary>
                Returns the angle whose cosine is the specified number.
            </summary>
            <param name="d">
                A number representing a cosine, where  must be greater than or equal to -1, but less than or
                equal to 1.
            </param>
            <returns>An angle, ?, measured in radians, such that 0 ????-or-  if  &lt; -1 or  &gt; 1 or  equals .</returns>
        </member>
        <member name="M:Extensions.Asin(System.Double)">
            <summary>
                Returns the angle whose sine is the specified number.
            </summary>
            <param name="d">
                A number representing a sine, where  must be greater than or equal to -1, but less than or equal
                to 1.
            </param>
            <returns>
                An angle, ?, measured in radians, such that -?/2 ????/2 -or-  if  &lt; -1 or  &gt; 1 or  equals .
            </returns>
        </member>
        <member name="M:Extensions.Atan(System.Double)">
            <summary>
                Returns the angle whose tangent is the specified number.
            </summary>
            <param name="d">A number representing a tangent.</param>
            <returns>
                An angle, ?, measured in radians, such that -?/2 ????/2.-or-  if  equals , -?/2 rounded to double precision (-
                1.5707963267949) if  equals , or ?/2 rounded to double precision (1.5707963267949) if  equals .
            </returns>
        </member>
        <member name="M:Extensions.Atan2(System.Double,System.Double)">
            <summary>
                Returns the angle whose tangent is the quotient of two specified numbers.
            </summary>
            <param name="y">The y coordinate of a point.</param>
            <param name="x">The x coordinate of a point.</param>
            <returns>
                An angle, ?, measured in radians, such that -?????, and tan(?) =  / , where (, ) is a point in the Cartesian
                plane. Observe the following: For (, ) in quadrant 1, 0 &lt; ? &lt; ?/2.For (, ) in quadrant 2, ?/2 &lt;
                ???.For (, ) in quadrant 3, -? &lt; ? &lt; -?/2.For (, ) in quadrant 4, -?/2 &lt; ? &lt; 0.For points on the
                boundaries of the quadrants, the return value is the following:If y is 0 and x is not negative, ? = 0.If y is
                0 and x is negative, ? = ?.If y is positive and x is 0, ? = ?/2.If y is negative and x is 0, ? = -?/2.If  or
                is , or if  and  are either  or , the method returns .
            </returns>
        </member>
        <member name="M:Extensions.Ceiling(System.Double)">
            <summary>
                Returns the smallest integral value that is greater than or equal to the specified double-precision floating-
                point number.
            </summary>
            <param name="a">A double-precision floating-point number.</param>
            <returns>
                The smallest integral value that is greater than or equal to . If  is equal to , , or , that value is
                returned. Note that this method returns a  instead of an integral type.
            </returns>
        </member>
        <member name="M:Extensions.Cos(System.Double)">
            <summary>
                Returns the cosine of the specified angle.
            </summary>
            <param name="d">An angle, measured in radians.</param>
            <returns>The cosine of . If  is equal to , , or , this method returns .</returns>
        </member>
        <member name="M:Extensions.Cosh(System.Double)">
            <summary>
                Returns the hyperbolic cosine of the specified angle.
            </summary>
            <param name="value">An angle, measured in radians.</param>
            <returns>The hyperbolic cosine of . If  is equal to  or ,  is returned. If  is equal to ,  is returned.</returns>
        </member>
        <member name="M:Extensions.Exp(System.Double)">
            <summary>
                Returns e raised to the specified power.
            </summary>
            <param name="d">A number specifying a power.</param>
            <returns>
                The number e raised to the power . If  equals  or , that value is returned. If  equals , 0 is returned.
            </returns>
        </member>
        <member name="M:Extensions.Floor(System.Double)">
            <summary>
                Returns the largest integer less than or equal to the specified double-precision floating-point number.
            </summary>
            <param name="d">A double-precision floating-point number.</param>
            <returns>The largest integer less than or equal to . If  is equal to , , or , that value is returned.</returns>
        </member>
        <member name="M:Extensions.IEEERemainder(System.Double,System.Double)">
            <summary>
                Returns the remainder resulting from the division of a specified number by another specified number.
            </summary>
            <param name="x">A dividend.</param>
            <param name="y">A divisor.</param>
            <returns>
                A number equal to  - ( Q), where Q is the quotient of  /  rounded to the nearest integer (if  /  falls
                halfway between two integers, the even integer is returned).If  - ( Q) is zero, the value +0 is returned if
                is positive, or -0 if  is negative.If  = 0,  is returned.
            </returns>
        </member>
        <member name="M:Extensions.Log(System.Double)">
            <summary>
                Returns the natural (base e) logarithm of a specified number.
            </summary>
            <param name="d">The number whose logarithm is to be found.</param>
            <returns>
                One of the values in the following table.  parameterReturn value Positive The natural logarithm of ; that is,
                ln , or log eZero Negative Equal to Equal to.
            </returns>
        </member>
        <member name="M:Extensions.Log(System.Double,System.Double)">
            <summary>
                Returns the logarithm of a specified number in a specified base.
            </summary>
            <param name="d">The number whose logarithm is to be found.</param>
            <param name="newBase">The base of the logarithm.</param>
            <returns>
                One of the values in the following table. (+Infinity denotes , -Infinity denotes , and NaN denotes .)Return
                value&gt; 0(0 &lt;&lt; 1) -or-(&gt; 1)lognewBase(a)&lt; 0(any value)NaN(any value)&lt; 0NaN != 1 = 0NaN != 1
                = +InfinityNaN = NaN(any value)NaN(any value) = NaNNaN(any value) = 1NaN = 00 &lt;&lt; 1 +Infinity = 0&gt; 1-
                Infinity =  +Infinity0 &lt;&lt; 1-Infinity =  +Infinity&gt; 1+Infinity = 1 = 00 = 1 = +Infinity0.
            </returns>
            ###
            <param name="a">The number whose logarithm is to be found.</param>
        </member>
        <member name="M:Extensions.Log10(System.Double)">
            <summary>
                Returns the base 10 logarithm of a specified number.
            </summary>
            <param name="d">A number whose logarithm is to be found.</param>
            <returns>
                One of the values in the following table.  parameter Return value Positive The base 10 log of ; that is, log
                10. Zero Negative Equal to Equal to.
            </returns>
        </member>
        <member name="M:Extensions.Max(System.Double,System.Double)">
            <summary>
                Returns the larger of two double-precision floating-point numbers.
            </summary>
            <param name="val1">The first of two double-precision floating-point numbers to compare.</param>
            <param name="val2">The second of two double-precision floating-point numbers to compare.</param>
            <returns>Parameter  or , whichever is larger. If , , or both  and  are equal to ,  is returned.</returns>
        </member>
        <member name="M:Extensions.Min(System.Double,System.Double)">
            <summary>
                Returns the smaller of two double-precision floating-point numbers.
            </summary>
            <param name="val1">The first of two double-precision floating-point numbers to compare.</param>
            <param name="val2">The second of two double-precision floating-point numbers to compare.</param>
            <returns>Parameter  or , whichever is smaller. If , , or both  and  are equal to ,  is returned.</returns>
        </member>
        <member name="M:Extensions.Pow(System.Double,System.Double)">
            <summary>
                Returns a specified number raised to the specified power.
            </summary>
            <param name="x">A double-precision floating-point number to be raised to a power.</param>
            <param name="y">A double-precision floating-point number that specifies a power.</param>
            <returns>The number  raised to the power .</returns>
        </member>
        <member name="M:Extensions.Round(System.Double)">
            <summary>
                Rounds a double-precision floating-point value to the nearest integral value.
            </summary>
            <param name="a">A double-precision floating-point number to be rounded.</param>
            <returns>
                The integer nearest . If the fractional component of  is halfway between two integers, one of which is even
                and the other odd, then the even number is returned. Note that this method returns a  instead of an integral
                type.
            </returns>
        </member>
        <member name="M:Extensions.Round(System.Double,System.Int32)">
            <summary>
                Rounds a double-precision floating-point value to a specified number of fractional digits.
            </summary>
            <param name="a">A double-precision floating-point number to be rounded.</param>
            <param name="digits">The number of fractional digits in the return value.</param>
            <returns>The number nearest to  that contains a number of fractional digits equal to .</returns>
            ###
            <param name="value">A double-precision floating-point number to be rounded.</param>
        </member>
        <member name="M:Extensions.Round(System.Double,System.MidpointRounding)">
            <summary>
                Rounds a double-precision floating-point value to the nearest integer. A parameter specifies how to round the
                value if it is midway between two numbers.
            </summary>
            <param name="a">A double-precision floating-point number to be rounded.</param>
            <param name="mode">Specification for how to round  if it is midway between two other numbers.</param>
            <returns>
                The integer nearest . If  is halfway between two integers, one of which is even and the other odd, then
                determines which of the two is returned.
            </returns>
            ###
            <param name="value">A double-precision floating-point number to be rounded.</param>
        </member>
        <member name="M:Extensions.Round(System.Double,System.Int32,System.MidpointRounding)">
            <summary>
                Rounds a double-precision floating-point value to a specified number of fractional digits. A parameter
                specifies how to round the value if it is midway between two numbers.
            </summary>
            <param name="a">A double-precision floating-point number to be rounded.</param>
            <param name="digits">The number of fractional digits in the return value.</param>
            <param name="mode">Specification for how to round  if it is midway between two other numbers.</param>
            <returns>
                The number nearest to  that has a number of fractional digits equal to . If  has fewer fractional digits than
                ,  is returned unchanged.
            </returns>
            ###
            <param name="value">A double-precision floating-point number to be rounded.</param>
        </member>
        <member name="M:Extensions.Sign(System.Double)">
            <summary>
                Returns a value indicating the sign of a double-precision floating-point number.
            </summary>
            <param name="value">A signed number.</param>
            <returns>
                A number that indicates the sign of , as shown in the following table.Return value Meaning -1  is less than
                zero. 0  is equal to zero. 1  is greater than zero.
            </returns>
        </member>
        <member name="M:Extensions.Sin(System.Double)">
            <summary>
                Returns the sine of the specified angle.
            </summary>
            <param name="a">An angle, measured in radians.</param>
            <returns>The sine of . If  is equal to , , or , this method returns .</returns>
        </member>
        <member name="M:Extensions.Sinh(System.Double)">
            <summary>
                Returns the hyperbolic sine of the specified angle.
            </summary>
            <param name="value">An angle, measured in radians.</param>
            <returns>The hyperbolic sine of . If  is equal to , , or , this method returns a  equal to .</returns>
        </member>
        <member name="M:Extensions.Sqrt(System.Double)">
            <summary>
                Returns the square root of a specified number.
            </summary>
            <param name="d">The number whose square root is to be found.</param>
            <returns>
                One of the values in the following table.  parameter Return value Zero or positive The positive square root
                of . Negative Equals Equals.
            </returns>
        </member>
        <member name="M:Extensions.Tan(System.Double)">
            <summary>
                Returns the tangent of the specified angle.
            </summary>
            <param name="a">An angle, measured in radians.</param>
            <returns>The tangent of . If  is equal to , , or , this method returns .</returns>
        </member>
        <member name="M:Extensions.Tanh(System.Double)">
            <summary>
                Returns the hyperbolic tangent of the specified angle.
            </summary>
            <param name="value">An angle, measured in radians.</param>
            <returns>
                The hyperbolic tangent of . If  is equal to , this method returns -1. If value is equal to , this method
                returns 1. If  is equal to , this method returns .
            </returns>
        </member>
        <member name="M:Extensions.Truncate(System.Double)">
            <summary>
                Calculates the integral part of a specified double-precision floating-point number.
            </summary>
            <param name="d">A number to truncate.</param>
            <returns>
                The integral part of ; that is, the number that remains after any fractional digits have been discarded, or
                one of the values listed in the following table. Return value.
            </returns>
        </member>
        <member name="M:Extensions.FromDays(System.Double)">
            <summary>
                Returns a  that represents a specified number of days, where the specification is accurate to the nearest
                millisecond.
            </summary>
            <param name="value">A number of days, accurate to the nearest millisecond.</param>
            <returns>An object that represents .</returns>
        </member>
        <member name="M:Extensions.FromHours(System.Double)">
            <summary>
                Returns a  that represents a specified number of hours, where the specification is accurate to the nearest
                millisecond.
            </summary>
            <param name="value">A number of hours accurate to the nearest millisecond.</param>
            <returns>An object that represents .</returns>
        </member>
        <member name="M:Extensions.FromMilliseconds(System.Double)">
            <summary>
                Returns a  that represents a specified number of milliseconds.
            </summary>
            <param name="value">A number of milliseconds.</param>
            <returns>An object that represents .</returns>
        </member>
        <member name="M:Extensions.FromMinutes(System.Double)">
            <summary>
                Returns a  that represents a specified number of minutes, where the specification is accurate to the nearest
                millisecond.
            </summary>
            <param name="value">A number of minutes, accurate to the nearest millisecond.</param>
            <returns>An object that represents .</returns>
        </member>
        <member name="M:Extensions.FromSeconds(System.Double)">
            <summary>
                Returns a  that represents a specified number of seconds, where the specification is accurate to the nearest
                millisecond.
            </summary>
            <param name="value">A number of seconds, accurate to the nearest millisecond.</param>
            <returns>An object that represents .</returns>
        </member>
        <member name="M:Extensions.Between(System.Double,System.Double,System.Double)">
            <summary>
                A T extension method that check if the value is between (exclusif) the minValue and maxValue.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns>true if the value is between the minValue and maxValue, otherwise false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.In(System.Double,System.Double[])">
            <summary>
                A T extension method to determines whether the object is equal to any of the provided values.
            </summary>
            <param name="this">The object to be compared.</param>
            <param name="values">The value list to compare with the object.</param>
            <returns>true if the values list contains the object, else false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.InRange(System.Double,System.Double,System.Double)">
            <summary>
                A T extension method that check if the value is between inclusively the minValue and maxValue.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns>true if the value is between inclusively the minValue and maxValue, otherwise false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.NotIn(System.Double,System.Double[])">
            <summary>
                A T extension method to determines whether the object is not equal to any of the provided values.
            </summary>
            <param name="this">The object to be compared.</param>
            <param name="values">The value list to compare with the object.</param>
            <returns>true if the values list doesn't contains the object, else false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.GetCustomAttributeDescription(System.Enum)">
            <summary>
                An object extension method that gets description attribute.
            </summary>
            <param name="value">The value to act on.</param>
            <returns>The description attribute.</returns>
        </member>
        <member name="M:Extensions.In(System.Enum,System.Enum[])">
            <summary>
                A T extension method to determines whether the object is equal to any of the provided values.
            </summary>
            <param name="this">The object to be compared.</param>
            <param name="values">The value list to compare with the object.</param>
            <returns>true if the values list contains the object, else false.</returns>
        </member>
        <member name="M:Extensions.NotIn(System.Enum,System.Enum[])">
            <summary>
                A T extension method to determines whether the object is not equal to any of the provided values.
            </summary>
            <param name="this">The object to be compared.</param>
            <param name="values">The value list to compare with the object.</param>
            <returns>true if the values list doesn't contains the object, else false.</returns>
        </member>
        <member name="M:Extensions.GetFolderPath(System.Environment.SpecialFolder)">
            <summary>An Environment.SpecialFolder extension method that gets folder path.</summary>
            <param name="this">this.</param>
            <returns>The folder path.</returns>
        </member>
        <member name="M:Extensions.GetFolderPath(System.Environment.SpecialFolder,System.Environment.SpecialFolderOption)">
            <summary>An Environment.SpecialFolder extension method that gets folder path.</summary>
            <param name="this">this.</param>
            <param name="option">The option.</param>
            <returns>The folder path.</returns>
        </member>
        <member name="M:Extensions.RaiseEvent(System.EventHandler,System.Object)">
            <summary>
                An EventHandler extension method that raises the event event.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="sender">Source of the event.</param>
        </member>
        <member name="M:Extensions.Raise(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
                An EventHandler extension method that raises.
            </summary>
            <param name="handler">The handler to act on.</param>
            <param name="sender">Source of the event.</param>
            <param name="e">Event information.</param>
        </member>
        <member name="M:Extensions.RaiseEvent``1(System.EventHandler{``0},System.Object)">
            <summary>
                An EventHandler&lt;TEventArgs&gt; extension method that raises the event event.
            </summary>
            <typeparam name="TEventArgs">Type of the event arguments.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="sender">Source of the event.</param>
        </member>
        <member name="M:Extensions.RaiseEvent``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
                An EventHandler&lt;TEventArgs&gt; extension method that raises the event event.
            </summary>
            <typeparam name="TEventArgs">Type of the event arguments.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="sender">Source of the event.</param>
            <param name="e">Event information to send to registered event handlers.</param>
        </member>
        <member name="M:Extensions.IsEmpty(System.Guid)">
            <summary>A GUID extension method that query if '@this' is empty.</summary>
            <param name="this">The @this to act on.</param>
            <returns>true if empty, false if not.</returns>
        </member>
        <member name="M:Extensions.IsNotEmpty(System.Guid)">
            <summary>A GUID extension method that queries if a not is empty.</summary>
            <param name="this">The @this to act on.</param>
            <returns>true if a not is empty, false if not.</returns>
        </member>
        <member name="M:Extensions.In(System.Guid,System.Guid[])">
            <summary>
                A T extension method to determines whether the object is equal to any of the provided values.
            </summary>
            <param name="this">The object to be compared.</param>
            <param name="values">The value list to compare with the object.</param>
            <returns>true if the values list contains the object, else false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.NotIn(System.Guid,System.Guid[])">
            <summary>
                A T extension method to determines whether the object is not equal to any of the provided values.
            </summary>
            <param name="this">The object to be compared.</param>
            <param name="values">The value list to compare with the object.</param>
            <returns>true if the values list doesn't contains the object, else false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.Days(System.Int16)">
            <summary>
                An Int16 extension method that days the given this.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>A TimeSpan.</returns>
        </member>
        <member name="M:Extensions.FactorOf(System.Int16,System.Int16)">
            <summary>
                An Int16 extension method that factor of.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="factorNumer">The factor numer.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Extensions.Hours(System.Int16)">
            <summary>
                An Int16 extension method that hours the given this.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>A TimeSpan.</returns>
        </member>
        <member name="M:Extensions.IsEven(System.Int16)">
            <summary>
                An Int16 extension method that query if '@this' is even.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if even, false if not.</returns>
        </member>
        <member name="M:Extensions.IsMultipleOf(System.Int16,System.Int16)">
            <summary>
                An Int16 extension method that query if '@this' is multiple of.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="factor">The factor.</param>
            <returns>true if multiple of, false if not.</returns>
        </member>
        <member name="M:Extensions.IsOdd(System.Int16)">
            <summary>
                An Int16 extension method that query if '@this' is odd.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if odd, false if not.</returns>
        </member>
        <member name="M:Extensions.IsPrime(System.Int16)">
            <summary>
                An Int16 extension method that query if '@this' is prime.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if prime, false if not.</returns>
        </member>
        <member name="M:Extensions.Milliseconds(System.Int16)">
            <summary>
                An Int16 extension method that milliseconds the given this.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>A TimeSpan.</returns>
        </member>
        <member name="M:Extensions.Minutes(System.Int16)">
            <summary>
                An Int16 extension method that minutes the given this.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>A TimeSpan.</returns>
        </member>
        <member name="M:Extensions.Seconds(System.Int16)">
            <summary>
                An Int16 extension method that seconds the given this.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>A TimeSpan.</returns>
        </member>
        <member name="M:Extensions.Weeks(System.Int16)">
            <summary>
                An Int16 extension method that weeks the given this.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>A TimeSpan.</returns>
        </member>
        <member name="M:Extensions.GetBytes(System.Int16)">
            <summary>
                Returns the specified 16-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:Extensions.Abs(System.Int16)">
            <summary>
                Returns the absolute value of a 16-bit signed integer.
            </summary>
            <param name="value">A number that is greater than , but less than or equal to .</param>
            <returns>A 16-bit signed integer, x, such that 0 ? x ?.</returns>
        </member>
        <member name="M:Extensions.Max(System.Int16,System.Int16)">
            <summary>
                Returns the larger of two 16-bit signed integers.
            </summary>
            <param name="val1">The first of two 16-bit signed integers to compare.</param>
            <param name="val2">The second of two 16-bit signed integers to compare.</param>
            <returns>Parameter  or , whichever is larger.</returns>
        </member>
        <member name="M:Extensions.Min(System.Int16,System.Int16)">
            <summary>
                Returns the smaller of two 16-bit signed integers.
            </summary>
            <param name="val1">The first of two 16-bit signed integers to compare.</param>
            <param name="val2">The second of two 16-bit signed integers to compare.</param>
            <returns>Parameter  or , whichever is smaller.</returns>
        </member>
        <member name="M:Extensions.Sign(System.Int16)">
            <summary>
                Returns a value indicating the sign of a 16-bit signed integer.
            </summary>
            <param name="value">A signed number.</param>
            <returns>
                A number that indicates the sign of , as shown in the following table.Return value Meaning -1  is less than
                zero. 0  is equal to zero. 1  is greater than zero.
            </returns>
        </member>
        <member name="M:Extensions.HostToNetworkOrder(System.Int16)">
            <summary>
                Converts a short value from host byte order to network byte order.
            </summary>
            <param name="host">The number to convert, expressed in host byte order.</param>
            <returns>A short value, expressed in network byte order.</returns>
        </member>
        <member name="M:Extensions.NetworkToHostOrder(System.Int16)">
            <summary>
                Converts a short value from network byte order to host byte order.
            </summary>
            <param name="network">The number to convert, expressed in network byte order.</param>
            <returns>A short value, expressed in host byte order.</returns>
        </member>
        <member name="M:Extensions.Between(System.Int16,System.Int16,System.Int16)">
            <summary>
                A T extension method that check if the value is between (exclusif) the minValue and maxValue.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns>true if the value is between the minValue and maxValue, otherwise false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.In(System.Int16,System.Int16[])">
            <summary>
                A T extension method to determines whether the object is equal to any of the provided values.
            </summary>
            <param name="this">The object to be compared.</param>
            <param name="values">The value list to compare with the object.</param>
            <returns>true if the values list contains the object, else false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.InRange(System.Int16,System.Int16,System.Int16)">
            <summary>
                A T extension method that check if the value is between inclusively the minValue and maxValue.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns>true if the value is between inclusively the minValue and maxValue, otherwise false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.NotIn(System.Int16,System.Int16[])">
            <summary>
                A T extension method to determines whether the object is not equal to any of the provided values.
            </summary>
            <param name="this">The object to be compared.</param>
            <param name="values">The value list to compare with the object.</param>
            <returns>true if the values list doesn't contains the object, else false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.Days(System.Int32)">
            <summary>
                An Int32 extension method that days the given this.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>A TimeSpan.</returns>
        </member>
        <member name="M:Extensions.FactorOf(System.Int32,System.Int32)">
            <summary>
                An Int32 extension method that factor of.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="factorNumer">The factor numer.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Extensions.Hours(System.Int32)">
            <summary>
                An Int32 extension method that hours the given this.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>A TimeSpan.</returns>
        </member>
        <member name="M:Extensions.IsEven(System.Int32)">
            <summary>
                An Int32 extension method that query if '@this' is even.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if even, false if not.</returns>
        </member>
        <member name="M:Extensions.IsMultipleOf(System.Int32,System.Int32)">
            <summary>
                An Int32 extension method that query if '@this' is multiple of.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="factor">The factor.</param>
            <returns>true if multiple of, false if not.</returns>
        </member>
        <member name="M:Extensions.IsOdd(System.Int32)">
            <summary>
                An Int32 extension method that query if '@this' is odd.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if odd, false if not.</returns>
        </member>
        <member name="M:Extensions.IsPrime(System.Int32)">
            <summary>
                An Int32 extension method that query if '@this' is prime.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if prime, false if not.</returns>
        </member>
        <member name="M:Extensions.Milliseconds(System.Int32)">
            <summary>
                An Int32 extension method that milliseconds the given this.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>A TimeSpan.</returns>
        </member>
        <member name="M:Extensions.Minutes(System.Int32)">
            <summary>
                An Int32 extension method that minutes the given this.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>A TimeSpan.</returns>
        </member>
        <member name="M:Extensions.Seconds(System.Int32)">
            <summary>
                An Int32 extension method that seconds the given this.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>A TimeSpan.</returns>
        </member>
        <member name="M:Extensions.Weeks(System.Int32)">
            <summary>
                An Int32 extension method that weeks the given this.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>A TimeSpan.</returns>
        </member>
        <member name="M:Extensions.GetBytes(System.Int32)">
            <summary>
                Returns the specified 32-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:Extensions.ConvertFromUtf32(System.Int32)">
            <summary>
                Converts the specified Unicode code point into a UTF-16 encoded string.
            </summary>
            <param name="utf32">A 21-bit Unicode code point.</param>
            <returns>
                A string consisting of one  object or a surrogate pair of  objects equivalent to the code point specified by
                the  parameter.
            </returns>
        </member>
        <member name="M:Extensions.DaysInMonth(System.Int32,System.Int32)">
            <summary>
                Returns the number of days in the specified month and year.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month (a number ranging from 1 to 12).</param>
            <returns>
                The number of days in  for the specified .For example, if  equals 2 for February, the return value is 28 or
                29 depending upon whether  is a leap year.
            </returns>
        </member>
        <member name="M:Extensions.IsLeapYear(System.Int32)">
            <summary>
                Returns an indication whether the specified year is a leap year.
            </summary>
            <param name="year">A 4-digit year.</param>
            <returns>true if  is a leap year; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.FromOle(System.Int32)">
            <summary>
                Translates an OLE color value to a GDI+  structure.
            </summary>
            <param name="oleColor">The OLE color to translate.</param>
            <returns>The  structure that represents the translated OLE color.</returns>
        </member>
        <member name="M:Extensions.FromWin32(System.Int32)">
            <summary>
                Translates a Windows color value to a GDI+  structure.
            </summary>
            <param name="win32Color">The Windows color to translate.</param>
            <returns>The  structure that represents the translated Windows color.</returns>
        </member>
        <member name="M:Extensions.FromArgb(System.Int32)">
            <summary>
                Creates a  structure from a 32-bit ARGB value.
            </summary>
            <param name="argb">A value specifying the 32-bit ARGB value.</param>
            <returns>The  structure that this method creates.</returns>
        </member>
        <member name="M:Extensions.FromArgb(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Creates a  structure from the four ARGB component (alpha, red, green, and blue) values. Although this method
                allows a 32-bit value to be passed for each component, the value of each component is limited to 8 bits.
            </summary>
            <param name="argb">A value specifying the 32-bit ARGB value.</param>
            <param name="red">The red component. Valid values are 0 through 255.</param>
            <param name="green">The green component. Valid values are 0 through 255.</param>
            <param name="blue">The blue component. Valid values are 0 through 255.</param>
            <returns>The  that this method creates.</returns>
            ###
            <param name="alpha">The alpha component. Valid values are 0 through 255.</param>
        </member>
        <member name="M:Extensions.FromArgb(System.Int32,System.Drawing.Color)">
            <summary>
                Creates a  structure from the specified  structure, but with the new specified alpha value. Although this
                method allows a 32-bit value to be passed for the alpha value, the value is limited to 8 bits.
            </summary>
            <param name="argb">A value specifying the 32-bit ARGB value.</param>
            <param name="baseColor">The  from which to create the new .</param>
            <returns>The  that this method creates.</returns>
            ###
            <param name="alpha">The alpha value for the new . Valid values are 0 through 255.</param>
        </member>
        <member name="M:Extensions.FromArgb(System.Int32,System.Int32,System.Int32)">
            <summary>
                Creates a  structure from the specified 8-bit color values (red, green, and blue). The alpha value is
                implicitly 255 (fully opaque). Although this method allows a 32-bit value to be passed for each color
                component, the value of each component is limited to 8 bits.
            </summary>
            <param name="argb">A value specifying the 32-bit ARGB value.</param>
            <param name="green">The green component value for the new . Valid values are 0 through 255.</param>
            <param name="blue">The blue component value for the new . Valid values are 0 through 255.</param>
            <returns>The  that this method creates.</returns>
            ###
            <param name="red">The red component value for the new . Valid values are 0 through 255.</param>
        </member>
        <member name="M:Extensions.Abs(System.Int32)">
            <summary>
                Returns the absolute value of a 32-bit signed integer.
            </summary>
            <param name="value">A number that is greater than , but less than or equal to .</param>
            <returns>A 32-bit signed integer, x, such that 0 ? x ?.</returns>
        </member>
        <member name="M:Extensions.BigMul(System.Int32,System.Int32)">
            <summary>
                Produces the full product of two 32-bit numbers.
            </summary>
            <param name="a">The first number to multiply.</param>
            <param name="b">The second number to multiply.</param>
            <returns>The number containing the product of the specified numbers.</returns>
        </member>
        <member name="M:Extensions.DivRem(System.Int32,System.Int32,System.Int32@)">
            <summary>
                An Int32 extension method that div rem.
            </summary>
            <param name="a">a to act on.</param>
            <param name="b">The Int32 to process.</param>
            <param name="result">[out] The result.</param>
            <returns>An Int32.</returns>
        </member>
        <member name="M:Extensions.Max(System.Int32,System.Int32)">
            <summary>
                Returns the larger of two 32-bit signed integers.
            </summary>
            <param name="val1">The first of two 32-bit signed integers to compare.</param>
            <param name="val2">The second of two 32-bit signed integers to compare.</param>
            <returns>Parameter  or , whichever is larger.</returns>
        </member>
        <member name="M:Extensions.Min(System.Int32,System.Int32)">
            <summary>
                Returns the smaller of two 32-bit signed integers.
            </summary>
            <param name="val1">The first of two 32-bit signed integers to compare.</param>
            <param name="val2">The second of two 32-bit signed integers to compare.</param>
            <returns>Parameter  or , whichever is smaller.</returns>
        </member>
        <member name="M:Extensions.Sign(System.Int32)">
            <summary>
                Returns a value indicating the sign of a 32-bit signed integer.
            </summary>
            <param name="value">A signed number.</param>
            <returns>
                A number that indicates the sign of , as shown in the following table.Return value Meaning -1  is less than
                zero. 0  is equal to zero. 1  is greater than zero.
            </returns>
        </member>
        <member name="M:Extensions.HostToNetworkOrder(System.Int32)">
            <summary>
                Converts an integer value from host byte order to network byte order.
            </summary>
            <param name="host">The number to convert, expressed in host byte order.</param>
            <returns>An integer value, expressed in network byte order.</returns>
        </member>
        <member name="M:Extensions.NetworkToHostOrder(System.Int32)">
            <summary>
                Converts an integer value from network byte order to host byte order.
            </summary>
            <param name="network">The number to convert, expressed in network byte order.</param>
            <returns>An integer value, expressed in host byte order.</returns>
        </member>
        <member name="M:Extensions.Between(System.Int32,System.Int32,System.Int32)">
            <summary>
                A T extension method that check if the value is between (exclusif) the minValue and maxValue.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns>true if the value is between the minValue and maxValue, otherwise false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.In(System.Int32,System.Int32[])">
            <summary>
                A T extension method to determines whether the object is equal to any of the provided values.
            </summary>
            <param name="this">The object to be compared.</param>
            <param name="values">The value list to compare with the object.</param>
            <returns>true if the values list contains the object, else false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.InRange(System.Int32,System.Int32,System.Int32)">
            <summary>
                A T extension method that check if the value is between inclusively the minValue and maxValue.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns>true if the value is between inclusively the minValue and maxValue, otherwise false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.NotIn(System.Int32,System.Int32[])">
            <summary>
                A T extension method to determines whether the object is not equal to any of the provided values.
            </summary>
            <param name="this">The object to be compared.</param>
            <param name="values">The value list to compare with the object.</param>
            <returns>true if the values list doesn't contains the object, else false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.Days(System.Int64)">
            <summary>
                An Int64 extension method that days the given this.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>A TimeSpan.</returns>
        </member>
        <member name="M:Extensions.FactorOf(System.Int64,System.Int64)">
            <summary>
                An Int64 extension method that factor of.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="factorNumer">The factor numer.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Extensions.Hours(System.Int64)">
            <summary>
                An Int64 extension method that hours the given this.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>A TimeSpan.</returns>
        </member>
        <member name="M:Extensions.IsEven(System.Int64)">
            <summary>
                An Int64 extension method that query if '@this' is even.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if even, false if not.</returns>
        </member>
        <member name="M:Extensions.IsMultipleOf(System.Int64,System.Int64)">
            <summary>
                An Int64 extension method that query if '@this' is multiple of.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="factor">The factor.</param>
            <returns>true if multiple of, false if not.</returns>
        </member>
        <member name="M:Extensions.IsOdd(System.Int64)">
            <summary>
                An Int64 extension method that query if '@this' is odd.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if odd, false if not.</returns>
        </member>
        <member name="M:Extensions.IsPrime(System.Int64)">
            <summary>
                An Int64 extension method that query if '@this' is prime.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if prime, false if not.</returns>
        </member>
        <member name="M:Extensions.Milliseconds(System.Int64)">
            <summary>
                An Int64 extension method that milliseconds the given this.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>A TimeSpan.</returns>
        </member>
        <member name="M:Extensions.Minutes(System.Int64)">
            <summary>
                An Int64 extension method that minutes the given this.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>A TimeSpan.</returns>
        </member>
        <member name="M:Extensions.Seconds(System.Int64)">
            <summary>
                An Int64 extension method that seconds the given this.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>A TimeSpan.</returns>
        </member>
        <member name="M:Extensions.Weeks(System.Int64)">
            <summary>
                An Int64 extension method that weeks the given this.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>A TimeSpan.</returns>
        </member>
        <member name="M:Extensions.GetBytes(System.Int64)">
            <summary>
                Returns the specified 64-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:Extensions.Int64BitsToDouble(System.Int64)">
            <summary>
                Converts the specified 64-bit signed integer to a double-precision floating point number.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>A double-precision floating point number whose value is equivalent to .</returns>
        </member>
        <member name="M:Extensions.FromBinary(System.Int64)">
            <summary>
                Deserializes a 64-bit binary value and recreates an original serialized  object.
            </summary>
            <param name="dateData">
                A 64-bit signed integer that encodes the  property in a 2-bit field and the  property in
                a 62-bit field.
            </param>
            <returns>An object that is equivalent to the  object that was serialized by the  method.</returns>
        </member>
        <member name="M:Extensions.FromFileTime(System.Int64)">
            <summary>
                Converts the specified Windows file time to an equivalent local time.
            </summary>
            <param name="fileTime">A Windows file time expressed in ticks.</param>
            <returns>
                An object that represents the local time equivalent of the date and time represented by the  parameter.
            </returns>
        </member>
        <member name="M:Extensions.FromFileTimeUtc(System.Int64)">
            <summary>
                Converts the specified Windows file time to an equivalent UTC time.
            </summary>
            <param name="fileTime">A Windows file time expressed in ticks.</param>
            <returns>
                An object that represents the UTC time equivalent of the date and time represented by the  parameter.
            </returns>
        </member>
        <member name="M:Extensions.FromOACurrency(System.Int64)">
            <summary>
                Converts the specified 64-bit signed integer, which contains an OLE Automation Currency value, to the
                equivalent  value.
            </summary>
            <param name="cy">An OLE Automation Currency value.</param>
            <returns>A  that contains the equivalent of .</returns>
        </member>
        <member name="M:Extensions.Abs(System.Int64)">
            <summary>
                Returns the absolute value of a 64-bit signed integer.
            </summary>
            <param name="value">A number that is greater than , but less than or equal to .</param>
            <returns>A 64-bit signed integer, x, such that 0 ? x ?.</returns>
        </member>
        <member name="M:Extensions.DivRem(System.Int64,System.Int64,System.Int64@)">
            <summary>
                An Int64 extension method that div rem.
            </summary>
            <param name="a">a to act on.</param>
            <param name="b">The Int64 to process.</param>
            <param name="result">[out] The result.</param>
            <returns>An Int64.</returns>
        </member>
        <member name="M:Extensions.Max(System.Int64,System.Int64)">
            <summary>
                Returns the larger of two 64-bit signed integers.
            </summary>
            <param name="val1">The first of two 64-bit signed integers to compare.</param>
            <param name="val2">The second of two 64-bit signed integers to compare.</param>
            <returns>Parameter  or , whichever is larger.</returns>
        </member>
        <member name="M:Extensions.Min(System.Int64,System.Int64)">
            <summary>
                Returns the smaller of two 64-bit signed integers.
            </summary>
            <param name="val1">The first of two 64-bit signed integers to compare.</param>
            <param name="val2">The second of two 64-bit signed integers to compare.</param>
            <returns>Parameter  or , whichever is smaller.</returns>
        </member>
        <member name="M:Extensions.Sign(System.Int64)">
            <summary>
                Returns a value indicating the sign of a 64-bit signed integer.
            </summary>
            <param name="value">A signed number.</param>
            <returns>
                A number that indicates the sign of , as shown in the following table.Return value Meaning -1  is less than
                zero. 0  is equal to zero. 1  is greater than zero.
            </returns>
        </member>
        <member name="M:Extensions.HostToNetworkOrder(System.Int64)">
            <summary>
                Converts a long value from host byte order to network byte order.
            </summary>
            <param name="host">The number to convert, expressed in host byte order.</param>
            <returns>A long value, expressed in network byte order.</returns>
        </member>
        <member name="M:Extensions.NetworkToHostOrder(System.Int64)">
            <summary>
                Converts a long value from network byte order to host byte order.
            </summary>
            <param name="network">The number to convert, expressed in network byte order.</param>
            <returns>A long value, expressed in host byte order.</returns>
        </member>
        <member name="M:Extensions.FromTicks(System.Int64)">
            <summary>
                Returns a  that represents a specified time, where the specification is in units of ticks.
            </summary>
            <param name="value">A number of ticks that represent a time.</param>
            <returns>An object that represents .</returns>
        </member>
        <member name="M:Extensions.Between(System.Int64,System.Int64,System.Int64)">
            <summary>
                A T extension method that check if the value is between (exclusif) the minValue and maxValue.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns>true if the value is between the minValue and maxValue, otherwise false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.In(System.Int64,System.Int64[])">
            <summary>
                A T extension method to determines whether the object is equal to any of the provided values.
            </summary>
            <param name="this">The object to be compared.</param>
            <param name="values">The value list to compare with the object.</param>
            <returns>true if the values list contains the object, else false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.InRange(System.Int64,System.Int64,System.Int64)">
            <summary>
                A T extension method that check if the value is between inclusively the minValue and maxValue.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns>true if the value is between inclusively the minValue and maxValue, otherwise false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.NotIn(System.Int64,System.Int64[])">
            <summary>
                A T extension method to determines whether the object is not equal to any of the provided values.
            </summary>
            <param name="this">The object to be compared.</param>
            <param name="values">The value list to compare with the object.</param>
            <returns>true if the values list doesn't contains the object, else false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.GetTypeArray(System.Object[])">
            <summary>
                Gets the types of the objects in the specified array.
            </summary>
            <param name="args">An array of objects whose types to determine.</param>
            <returns>An array of  objects representing the types of the corresponding elements in .</returns>
        </member>
        <member name="M:Extensions.As``1(System.Object)">
            <summary>
                An object extension method that cast anonymous type to the specified type.
            </summary>
            <typeparam name="T">Generic type parameter. The specified type.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>The object as the specified type.</returns>
        </member>
        <member name="M:Extensions.AsOrDefault``1(System.Object)">
            <summary>
                An object extension method that converts the @this to an or default.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:Extensions.AsOrDefault``1(System.Object,``0)">
            <summary>
                An object extension method that converts the @this to an or default.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:Extensions.AsOrDefault``1(System.Object,System.Func{``0})">
            <summary>
                An object extension method that converts the @this to an or default.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>A T.</returns>
            <example>
                <code>
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
                  using Z.ExtensionMethods.Object;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_Object_AsOrDefault
                      {
                          [TestMethod]
                          public void AsOrDefault()
                          {
                              // Type
                              object intValue = 1;
                              object invalidValue = &quot;Fizz&quot;;
            
                              // Exemples
                              var result1 = intValue.AsOrDefault&lt;int&gt;(); // return 1;
                              var result2 = invalidValue.AsOrDefault&lt;int&gt;(); // return 0;
                              int result3 = invalidValue.AsOrDefault(3); // return 3;
                              int result4 = invalidValue.AsOrDefault(() =&gt; 4); // return 4;
            
                              // Unit Test
                              Assert.AreEqual(1, result1);
                              Assert.AreEqual(0, result2);
                              Assert.AreEqual(3, result3);
                              Assert.AreEqual(4, result4);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
                  using Z.ExtensionMethods.Object;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_Object_AsOrDefault
                      {
                          [TestMethod]
                          public void AsOrDefault()
                          {
                              // Type
                              object intValue = 1;
                              object invalidValue = &quot;Fizz&quot;;
            
                              // Exemples
                              var result1 = intValue.AsOrDefault&lt;int&gt;(); // return 1;
                              var result2 = invalidValue.AsOrDefault&lt;int&gt;(); // return 0;
                              int result3 = invalidValue.AsOrDefault(3); // return 3;
                              int result4 = invalidValue.AsOrDefault(() =&gt; 4); // return 4;
            
                              // Unit Test
                              Assert.AreEqual(1, result1);
                              Assert.AreEqual(0, result2);
                              Assert.AreEqual(3, result3);
                              Assert.AreEqual(4, result4);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                      using Microsoft.VisualStudio.TestTools.UnitTesting;
                      using Z.ExtensionMethods.Object;
                      
                      namespace ExtensionMethods.Examples
                      {
                          [TestClass]
                          public class System_Object_AsOrDefault
                          {
                              [TestMethod]
                              public void AsOrDefault()
                              {
                                  // Type
                                  object intValue = 1;
                                  object invalidValue = &quot;Fizz&quot;;
                      
                                  // Exemples
                                  var result1 = intValue.AsOrDefault&lt;int&gt;(); // return 1;
                                  var result2 = invalidValue.AsOrDefault&lt;int&gt;(); // return 0;
                                  int result3 = invalidValue.AsOrDefault(3); // return 3;
                                  int result4 = invalidValue.AsOrDefault(() =&gt; 4); // return 4;
                      
                                  // Unit Test
                                  Assert.AreEqual(1, result1);
                                  Assert.AreEqual(0, result2);
                                  Assert.AreEqual(3, result3);
                                  Assert.AreEqual(4, result4);
                              }
                          }
                      }
                </code>
            </example>
        </member>
        <member name="M:Extensions.AsOrDefault``1(System.Object,System.Func{System.Object,``0})">
            <summary>
                An object extension method that converts the @this to an or default.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>A T.</returns>
            <example>
                <code>
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
                  using Z.ExtensionMethods.Object;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_Object_AsOrDefault
                      {
                          [TestMethod]
                          public void AsOrDefault()
                          {
                              // Type
                              object intValue = 1;
                              object invalidValue = &quot;Fizz&quot;;
            
                              // Exemples
                              var result1 = intValue.AsOrDefault&lt;int&gt;(); // return 1;
                              var result2 = invalidValue.AsOrDefault&lt;int&gt;(); // return 0;
                              int result3 = invalidValue.AsOrDefault(3); // return 3;
                              int result4 = invalidValue.AsOrDefault(() =&gt; 4); // return 4;
            
                              // Unit Test
                              Assert.AreEqual(1, result1);
                              Assert.AreEqual(0, result2);
                              Assert.AreEqual(3, result3);
                              Assert.AreEqual(4, result4);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
                  using Z.ExtensionMethods.Object;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_Object_AsOrDefault
                      {
                          [TestMethod]
                          public void AsOrDefault()
                          {
                              // Type
                              object intValue = 1;
                              object invalidValue = &quot;Fizz&quot;;
            
                              // Exemples
                              var result1 = intValue.AsOrDefault&lt;int&gt;(); // return 1;
                              var result2 = invalidValue.AsOrDefault&lt;int&gt;(); // return 0;
                              int result3 = invalidValue.AsOrDefault(3); // return 3;
                              int result4 = invalidValue.AsOrDefault(() =&gt; 4); // return 4;
            
                              // Unit Test
                              Assert.AreEqual(1, result1);
                              Assert.AreEqual(0, result2);
                              Assert.AreEqual(3, result3);
                              Assert.AreEqual(4, result4);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                      using Microsoft.VisualStudio.TestTools.UnitTesting;
                      using Z.ExtensionMethods.Object;
                      
                      namespace ExtensionMethods.Examples
                      {
                          [TestClass]
                          public class System_Object_AsOrDefault
                          {
                              [TestMethod]
                              public void AsOrDefault()
                              {
                                  // Type
                                  object intValue = 1;
                                  object invalidValue = &quot;Fizz&quot;;
                      
                                  // Exemples
                                  var result1 = intValue.AsOrDefault&lt;int&gt;(); // return 1;
                                  var result2 = invalidValue.AsOrDefault&lt;int&gt;(); // return 0;
                                  int result3 = invalidValue.AsOrDefault(3); // return 3;
                                  int result4 = invalidValue.AsOrDefault(() =&gt; 4); // return 4;
                      
                                  // Unit Test
                                  Assert.AreEqual(1, result1);
                                  Assert.AreEqual(0, result2);
                                  Assert.AreEqual(3, result3);
                                  Assert.AreEqual(4, result4);
                              }
                          }
                      }
                </code>
            </example>
        </member>
        <member name="M:Extensions.IsAssignableFrom``1(System.Object)">
            <summary>
                An object extension method that query if '@this' is assignable from.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>true if assignable from, false if not.</returns>
        </member>
        <member name="M:Extensions.IsAssignableFrom(System.Object,System.Type)">
            <summary>
                An object extension method that query if '@this' is assignable from.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="targetType">Type of the target.</param>
            <returns>true if assignable from, false if not.</returns>
        </member>
        <member name="M:Extensions.Chain``1(``0,System.Action{``0})">
            <summary>
                A T extension method that chains actions.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="action">The action.</param>
            <returns>The @this acted on.</returns>
        </member>
        <member name="M:Extensions.DeepClone``1(``0)">
            <summary>
                A T extension method that makes a deep copy of '@this' object.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>the copied object.</returns>
        </member>
        <member name="M:Extensions.ShallowCopy``1(``0)">
            <summary>
                A T extension method that shallow copy.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:Extensions.IsValidBoolean(System.Object)">
            <summary>
                An object extension method that query if '@this' is valid bool.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if valid bool, false if not.</returns>
        </member>
        <member name="M:Extensions.IsValidByte(System.Object)">
            <summary>
                An object extension method that query if '@this' is valid byte.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if valid byte, false if not.</returns>
        </member>
        <member name="M:Extensions.IsValidChar(System.Object)">
            <summary>
                An object extension method that query if '@this' is valid char.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if valid char, false if not.</returns>
        </member>
        <member name="M:Extensions.IsValidDateTime(System.Object)">
            <summary>
                An object extension method that query if '@this' is valid System.DateTime.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if valid System.DateTime, false if not.</returns>
        </member>
        <member name="M:Extensions.IsValidDateTimeOffSet(System.Object)">
            <summary>
                An object extension method that query if '@this' is valid System.DateTimeOffset.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if valid System.DateTimeOffset, false if not.</returns>
        </member>
        <member name="M:Extensions.IsValidDecimal(System.Object)">
            <summary>
                An object extension method that query if '@this' is valid decimal.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if valid decimal, false if not.</returns>
        </member>
        <member name="M:Extensions.IsValidDouble(System.Object)">
            <summary>
                An object extension method that query if '@this' is valid double.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if valid double, false if not.</returns>
        </member>
        <member name="M:Extensions.IsValidFloat(System.Object)">
            <summary>
                An object extension method that query if '@this' is valid float.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if valid float, false if not.</returns>
        </member>
        <member name="M:Extensions.IsValidGuid(System.Object)">
            <summary>
                An object extension method that query if '@this' is valid System.Guid.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if valid System.Guid, false if not.</returns>
        </member>
        <member name="M:Extensions.IsValidInt16(System.Object)">
            <summary>
                An object extension method that query if '@this' is valid short.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if valid short, false if not.</returns>
        </member>
        <member name="M:Extensions.IsValidInt32(System.Object)">
            <summary>
                An object extension method that query if '@this' is valid int.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if valid int, false if not.</returns>
        </member>
        <member name="M:Extensions.IsValidInt64(System.Object)">
            <summary>
                An object extension method that query if '@this' is valid long.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if valid long, false if not.</returns>
        </member>
        <member name="M:Extensions.IsValidLong(System.Object)">
            <summary>
                An object extension method that query if '@this' is valid long.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if valid long, false if not.</returns>
        </member>
        <member name="M:Extensions.IsValidSByte(System.Object)">
            <summary>
                An object extension method that query if '@this' is valid sbyte.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if valid sbyte, false if not.</returns>
        </member>
        <member name="M:Extensions.IsValidShort(System.Object)">
            <summary>
                An object extension method that query if '@this' is valid short.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if valid short, false if not.</returns>
        </member>
        <member name="M:Extensions.IsValidSingle(System.Object)">
            <summary>
                An object extension method that query if '@this' is valid float.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if valid float, false if not.</returns>
        </member>
        <member name="M:Extensions.IsValidString(System.Object)">
            <summary>
                An object extension method that query if '@this' is valid string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if valid string, false if not.</returns>
        </member>
        <member name="M:Extensions.IsValidUInt16(System.Object)">
            <summary>
                An object extension method that query if '@this' is valid ushort.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if valid ushort, false if not.</returns>
        </member>
        <member name="M:Extensions.IsValidUInt32(System.Object)">
            <summary>
                An object extension method that query if '@this' is valid uint.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if valid uint, false if not.</returns>
        </member>
        <member name="M:Extensions.IsValidUInt64(System.Object)">
            <summary>
                An object extension method that query if '@this' is valid ulong.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if valid ulong, false if not.</returns>
        </member>
        <member name="M:Extensions.IsValidULong(System.Object)">
            <summary>
                An object extension method that query if '@this' is valid ulong.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if valid ulong, false if not.</returns>
        </member>
        <member name="M:Extensions.IsValidUShort(System.Object)">
            <summary>
                An object extension method that query if '@this' is valid ushort.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if valid ushort, false if not.</returns>
        </member>
        <member name="M:Extensions.ChangeType(System.Object,System.TypeCode)">
            <summary>
                Returns an object of the specified type whose value is equivalent to the specified object.
            </summary>
            <param name="value">An object that implements the  interface.</param>
            <param name="typeCode">The type of object to return.</param>
            <returns>
                An object whose underlying type is  and whose value is equivalent to .-or-A null reference (Nothing in Visual
                Basic), if  is null and  is , , or .
            </returns>
        </member>
        <member name="M:Extensions.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
            <summary>
                Returns an object of the specified type whose value is equivalent to the specified object. A parameter
                supplies culture-specific formatting information.
            </summary>
            <param name="value">An object that implements the  interface.</param>
            <param name="typeCode">The type of object to return.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <returns>
                An object whose underlying type is  and whose value is equivalent to .-or- A null reference (Nothing in
                Visual Basic), if  is null and  is , , or .
            </returns>
        </member>
        <member name="M:Extensions.ChangeType(System.Object,System.Type)">
            <summary>
                Returns an object of the specified type and whose value is equivalent to the specified object.
            </summary>
            <param name="value">An object that implements the  interface.</param>
            <param name="conversionType">The type of object to return.</param>
            <returns>
                An object whose type is  and whose value is equivalent to .-or-A null reference (Nothing in Visual Basic), if
                is null and  is not a value type.
            </returns>
        </member>
        <member name="M:Extensions.ChangeType(System.Object,System.Type,System.IFormatProvider)">
            <summary>
                Returns an object of the specified type whose value is equivalent to the specified object. A parameter
                supplies culture-specific formatting information.
            </summary>
            <param name="value">An object that implements the  interface.</param>
            <param name="conversionType">The type of object to return.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <returns>
                An object whose type is  and whose value is equivalent to .-or- , if the  of  and  are equal.-or- A null
                reference (Nothing in Visual Basic), if  is null and  is not a value type.
            </returns>
        </member>
        <member name="M:Extensions.ChangeType``1(System.Object)">
            <summary>
                Returns an object of the specified type and whose value is equivalent to the specified object.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="value">An object that implements the  interface.</param>
            <returns>
                An object whose type is  and whose value is equivalent to .-or-A null reference (Nothing in Visual Basic), if
                is null and  is not a value type.
            </returns>
        </member>
        <member name="M:Extensions.ChangeType``1(System.Object,System.IFormatProvider)">
            <summary>
                Returns an object of the specified type whose value is equivalent to the specified object. A parameter
                supplies culture-specific formatting information.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="value">An object that implements the  interface.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <returns>
                An object whose type is  and whose value is equivalent to .-or- , if the  of  and  are equal.-or- A null
                reference (Nothing in Visual Basic), if  is null and  is not a value type.
            </returns>
        </member>
        <member name="M:Extensions.GetTypeCode(System.Object)">
            <summary>
                Returns the  for the specified object.
            </summary>
            <param name="value">An object that implements the  interface.</param>
            <returns>The  for , or  if  is null.</returns>
        </member>
        <member name="M:Extensions.To``1(System.Object)">
            <summary>
                A System.Object extension method that toes the given this.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">this.</param>
            <returns>A T.</returns>
            <example>
                <code>
                  using System;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_Object_To
                      {
                          [TestMethod]
                          public void To()
                          {
                              string nullValue = null;
                              string value = &quot;1&quot;;
                              object dbNullValue = DBNull.Value;
            
                              // Exemples
                              var result1 = value.To&lt;int&gt;(); // return 1;
                              var result2 = value.To&lt;int?&gt;(); // return 1;
                              var result3 = nullValue.To&lt;int?&gt;(); // return null;
                              var result4 = dbNullValue.To&lt;int?&gt;(); // return null;
            
                              // Unit Test
                              Assert.AreEqual(1, result1);
                              Assert.AreEqual(1, result2.Value);
                              Assert.IsFalse(result3.HasValue);
                              Assert.IsFalse(result4.HasValue);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                  using System;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
                  using Z.ExtensionMethods.Object;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_Object_To
                      {
                          [TestMethod]
                          public void To()
                          {
                              string nullValue = null;
                              string value = &quot;1&quot;;
                              object dbNullValue = DBNull.Value;
            
                              // Exemples
                              var result1 = value.To&lt;int&gt;(); // return 1;
                              var result2 = value.To&lt;int?&gt;(); // return 1;
                              var result3 = nullValue.To&lt;int?&gt;(); // return null;
                              var result4 = dbNullValue.To&lt;int?&gt;(); // return null;
            
                              // Unit Test
                              Assert.AreEqual(1, result1);
                              Assert.AreEqual(1, result2.Value);
                              Assert.IsFalse(result3.HasValue);
                              Assert.IsFalse(result4.HasValue);
                          }
                      }
                  }
            </code>
            </example>
        </member>
        <member name="M:Extensions.To(System.Object,System.Type)">
            <summary>
                A System.Object extension method that toes the given this.
            </summary>
            <param name="this">this.</param>
            <param name="type">The type.</param>
            <returns>An object.</returns>
            <example>
                <code>
                  using System;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_Object_To
                      {
                          [TestMethod]
                          public void To()
                          {
                              string nullValue = null;
                              string value = &quot;1&quot;;
                              object dbNullValue = DBNull.Value;
            
                              // Exemples
                              var result1 = value.To&lt;int&gt;(); // return 1;
                              var result2 = value.To&lt;int?&gt;(); // return 1;
                              var result3 = nullValue.To&lt;int?&gt;(); // return null;
                              var result4 = dbNullValue.To&lt;int?&gt;(); // return null;
            
                              // Unit Test
                              Assert.AreEqual(1, result1);
                              Assert.AreEqual(1, result2.Value);
                              Assert.IsFalse(result3.HasValue);
                              Assert.IsFalse(result4.HasValue);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                  using System;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
                  using Z.ExtensionMethods.Object;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_Object_To
                      {
                          [TestMethod]
                          public void To()
                          {
                              string nullValue = null;
                              string value = &quot;1&quot;;
                              object dbNullValue = DBNull.Value;
            
                              // Exemples
                              var result1 = value.To&lt;int&gt;(); // return 1;
                              var result2 = value.To&lt;int?&gt;(); // return 1;
                              var result3 = nullValue.To&lt;int?&gt;(); // return null;
                              var result4 = dbNullValue.To&lt;int?&gt;(); // return null;
            
                              // Unit Test
                              Assert.AreEqual(1, result1);
                              Assert.AreEqual(1, result2.Value);
                              Assert.IsFalse(result3.HasValue);
                              Assert.IsFalse(result4.HasValue);
                          }
                      }
                  }
            </code>
            </example>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.ToOrDefault``1(System.Object,System.Func{System.Object,``0})">
            <summary>
                A System.Object extension method that converts this object to an or default.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">this.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to a T.</returns>
            <example>
                <code>
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
                  using Z.ExtensionMethods.Object;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_Object_ToOrDefault
                      {
                          [TestMethod]
                          public void ToOrDefault()
                          {
                              // Type
                              object intValue = &quot;1&quot;;
                              object invalidValue = &quot;Fizz&quot;;
            
                              // Exemples
                              var result1 = intValue.ToOrDefault&lt;int&gt;(); // return 1;
                              var result2 = invalidValue.ToOrDefault&lt;int&gt;(); // return 0;
                              int result3 = invalidValue.ToOrDefault(3); // return 3;
                              int result4 = invalidValue.ToOrDefault(() =&gt; 4); // return 4;
            
                              // Unit Test
                              Assert.AreEqual(1, result1);
                              Assert.AreEqual(0, result2);
                              Assert.AreEqual(3, result3);
                              Assert.AreEqual(4, result4);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
                  using Z.ExtensionMethods.Object;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_Object_ToOrDefault
                      {
                          [TestMethod]
                          public void ToOrDefault()
                          {
                              // Type
                              object intValue = &quot;1&quot;;
                              object invalidValue = &quot;Fizz&quot;;
            
                              // Exemples
                              var result1 = intValue.ToOrDefault&lt;int&gt;(); // return 1;
                              var result2 = invalidValue.ToOrDefault&lt;int&gt;(); // return 0;
                              int result3 = invalidValue.ToOrDefault(3); // return 3;
                              int result4 = invalidValue.ToOrDefault(() =&gt; 4); // return 4;
            
                              // Unit Test
                              Assert.AreEqual(1, result1);
                              Assert.AreEqual(0, result2);
                              Assert.AreEqual(3, result3);
                              Assert.AreEqual(4, result4);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                      using Microsoft.VisualStudio.TestTools.UnitTesting;
                      using Z.ExtensionMethods.Object;
                      
                      namespace ExtensionMethods.Examples
                      {
                          [TestClass]
                          public class System_Object_ToOrDefault
                          {
                              [TestMethod]
                              public void ToOrDefault()
                              {
                                  // Type
                                  object intValue = &quot;1&quot;;
                                  object invalidValue = &quot;Fizz&quot;;
                      
                                  // Exemples
                                  var result1 = intValue.ToOrDefault&lt;int&gt;(); // return 1;
                                  var result2 = invalidValue.ToOrDefault&lt;int&gt;(); // return 0;
                                  int result3 = invalidValue.ToOrDefault(3); // return 3;
                                  int result4 = invalidValue.ToOrDefault(() =&gt; 4); // return 4;
                      
                                  // Unit Test
                                  Assert.AreEqual(1, result1);
                                  Assert.AreEqual(0, result2);
                                  Assert.AreEqual(3, result3);
                                  Assert.AreEqual(4, result4);
                              }
                          }
                      }
                </code>
            </example>
        </member>
        <member name="M:Extensions.ToOrDefault``1(System.Object,System.Func{``0})">
            <summary>
                A System.Object extension method that converts this object to an or default.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">this.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to a T.</returns>
            <example>
                <code>
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
                  using Z.ExtensionMethods.Object;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_Object_ToOrDefault
                      {
                          [TestMethod]
                          public void ToOrDefault()
                          {
                              // Type
                              object intValue = &quot;1&quot;;
                              object invalidValue = &quot;Fizz&quot;;
            
                              // Exemples
                              var result1 = intValue.ToOrDefault&lt;int&gt;(); // return 1;
                              var result2 = invalidValue.ToOrDefault&lt;int&gt;(); // return 0;
                              int result3 = invalidValue.ToOrDefault(3); // return 3;
                              int result4 = invalidValue.ToOrDefault(() =&gt; 4); // return 4;
            
                              // Unit Test
                              Assert.AreEqual(1, result1);
                              Assert.AreEqual(0, result2);
                              Assert.AreEqual(3, result3);
                              Assert.AreEqual(4, result4);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
                  using Z.ExtensionMethods.Object;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_Object_ToOrDefault
                      {
                          [TestMethod]
                          public void ToOrDefault()
                          {
                              // Type
                              object intValue = &quot;1&quot;;
                              object invalidValue = &quot;Fizz&quot;;
            
                              // Exemples
                              var result1 = intValue.ToOrDefault&lt;int&gt;(); // return 1;
                              var result2 = invalidValue.ToOrDefault&lt;int&gt;(); // return 0;
                              int result3 = invalidValue.ToOrDefault(3); // return 3;
                              int result4 = invalidValue.ToOrDefault(() =&gt; 4); // return 4;
            
                              // Unit Test
                              Assert.AreEqual(1, result1);
                              Assert.AreEqual(0, result2);
                              Assert.AreEqual(3, result3);
                              Assert.AreEqual(4, result4);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                      using Microsoft.VisualStudio.TestTools.UnitTesting;
                      using Z.ExtensionMethods.Object;
                      
                      namespace ExtensionMethods.Examples
                      {
                          [TestClass]
                          public class System_Object_ToOrDefault
                          {
                              [TestMethod]
                              public void ToOrDefault()
                              {
                                  // Type
                                  object intValue = &quot;1&quot;;
                                  object invalidValue = &quot;Fizz&quot;;
                      
                                  // Exemples
                                  var result1 = intValue.ToOrDefault&lt;int&gt;(); // return 1;
                                  var result2 = invalidValue.ToOrDefault&lt;int&gt;(); // return 0;
                                  int result3 = invalidValue.ToOrDefault(3); // return 3;
                                  int result4 = invalidValue.ToOrDefault(() =&gt; 4); // return 4;
                      
                                  // Unit Test
                                  Assert.AreEqual(1, result1);
                                  Assert.AreEqual(0, result2);
                                  Assert.AreEqual(3, result3);
                                  Assert.AreEqual(4, result4);
                              }
                          }
                      }
                </code>
            </example>
        </member>
        <member name="M:Extensions.ToOrDefault``1(System.Object)">
            <summary>
                A System.Object extension method that converts this object to an or default.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">this.</param>
            <returns>The given data converted to a T.</returns>
        </member>
        <member name="M:Extensions.ToOrDefault``1(System.Object,``0)">
            <summary>
                A System.Object extension method that converts this object to an or default.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">this.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to a T.</returns>
        </member>
        <member name="M:Extensions.ToBoolean(System.Object)">
            <summary>
                An object extension method that converts the @this to a boolean.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a bool.</returns>
        </member>
        <member name="M:Extensions.ToBooleanOrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to a boolean or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a bool.</returns>
        </member>
        <member name="M:Extensions.ToBooleanOrDefault(System.Object,System.Boolean)">
            <summary>
                An object extension method that converts this object to a boolean or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">true to default value.</param>
            <returns>The given data converted to a bool.</returns>
        </member>
        <member name="M:Extensions.ToBooleanOrDefault(System.Object,System.Boolean,System.Boolean)">
            <summary>
            An object extension method that converts this object to a boolean or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">true to default value.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to a bool.</returns>
        </member>
        <member name="M:Extensions.ToBooleanOrDefault(System.Object,System.Func{System.Boolean})">
            <summary>
                An object extension method that converts this object to a boolean or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to a bool.</returns>
        </member>
        <member name="M:Extensions.ToBooleanOrDefault(System.Object,System.Func{System.Boolean},System.Boolean)">
            <summary>
            An object extension method that converts this object to a boolean or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to a bool.</returns>
        </member>
        <member name="M:Extensions.ToByte(System.Object)">
            <summary>
                An object extension method that converts the @this to a byte.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a byte.</returns>
        </member>
        <member name="M:Extensions.ToByteOrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to a byte or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a byte.</returns>
        </member>
        <member name="M:Extensions.ToByteOrDefault(System.Object,System.Byte)">
            <summary>
                An object extension method that converts this object to a byte or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to a byte.</returns>
        </member>
        <member name="M:Extensions.ToByteOrDefault(System.Object,System.Byte,System.Boolean)">
            <summary>An object extension method that converts this object to a byte or default.</summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to a byte.</returns>
        </member>
        <member name="M:Extensions.ToByteOrDefault(System.Object,System.Func{System.Byte})">
            <summary>
                An object extension method that converts this object to a byte or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to a byte.</returns>
        </member>
        <member name="M:Extensions.ToByteOrDefault(System.Object,System.Func{System.Byte},System.Boolean)">
            <summary>An object extension method that converts this object to a byte or default.</summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to a byte.</returns>
        </member>
        <member name="M:Extensions.ToChar(System.Object)">
            <summary>
                An object extension method that converts the @this to a character.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a char.</returns>
        </member>
        <member name="M:Extensions.ToCharOrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to a character or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a char.</returns>
        </member>
        <member name="M:Extensions.ToCharOrDefault(System.Object,System.Char)">
            <summary>
                An object extension method that converts this object to a character or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to a char.</returns>
        </member>
        <member name="M:Extensions.ToCharOrDefault(System.Object,System.Char,System.Boolean)">
            <summary>
            An object extension method that converts this object to a character or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to a char.</returns>
        </member>
        <member name="M:Extensions.ToCharOrDefault(System.Object,System.Func{System.Char})">
            <summary>
                An object extension method that converts this object to a character or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to a char.</returns>
        </member>
        <member name="M:Extensions.ToCharOrDefault(System.Object,System.Func{System.Char},System.Boolean)">
            <summary>
            An object extension method that converts this object to a character or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to a char.</returns>
        </member>
        <member name="M:Extensions.ToDateTime(System.Object)">
            <summary>
                An object extension method that converts the @this to a date time.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a DateTime.</returns>
        </member>
        <member name="M:Extensions.ToDateTimeOffSet(System.Object)">
            <summary>
                An object extension method that converts the @this to a date time off set.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a DateTimeOffset.</returns>
        </member>
        <member name="M:Extensions.ToDateTimeOffSetOrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to a date time off set or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a DateTimeOffset.</returns>
        </member>
        <member name="M:Extensions.ToDateTimeOffSetOrDefault(System.Object,System.DateTimeOffset)">
            <summary>
                An object extension method that converts this object to a date time off set or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to a DateTimeOffset.</returns>
        </member>
        <member name="M:Extensions.ToDateTimeOffSetOrDefault(System.Object,System.DateTimeOffset,System.Boolean)">
            <summary>
            An object extension method that converts this object to a date time off set or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to a DateTimeOffset.</returns>
        </member>
        <member name="M:Extensions.ToDateTimeOffSetOrDefault(System.Object,System.Func{System.DateTimeOffset})">
            <summary>
                An object extension method that converts this object to a date time off set or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to a DateTimeOffset.</returns>
        </member>
        <member name="M:Extensions.ToDateTimeOffSetOrDefault(System.Object,System.Func{System.DateTimeOffset},System.Boolean)">
            <summary>
            An object extension method that converts this object to a date time off set or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to a DateTimeOffset.</returns>
        </member>
        <member name="M:Extensions.ToDateTimeOrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to a date time or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a DateTime.</returns>
        </member>
        <member name="M:Extensions.ToDateTimeOrDefault(System.Object,System.DateTime)">
            <summary>
                An object extension method that converts this object to a date time or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to a DateTime.</returns>
        </member>
        <member name="M:Extensions.ToDateTimeOrDefault(System.Object,System.DateTime,System.Boolean)">
            <summary>
            An object extension method that converts this object to a date time or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to a DateTime.</returns>
        </member>
        <member name="M:Extensions.ToDateTimeOrDefault(System.Object,System.Func{System.DateTime})">
            <summary>
                An object extension method that converts this object to a date time or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to a DateTime.</returns>
        </member>
        <member name="M:Extensions.ToDateTimeOrDefault(System.Object,System.Func{System.DateTime},System.Boolean)">
            <summary>
            An object extension method that converts this object to a date time or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to a DateTime.</returns>
        </member>
        <member name="M:Extensions.ToDecimal(System.Object)">
            <summary>
                An object extension method that converts the @this to a decimal.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a decimal.</returns>
        </member>
        <member name="M:Extensions.ToDecimalOrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to a decimal or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a decimal.</returns>
        </member>
        <member name="M:Extensions.ToDecimalOrDefault(System.Object,System.Decimal)">
            <summary>
                An object extension method that converts this object to a decimal or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to a decimal.</returns>
        </member>
        <member name="M:Extensions.ToDecimalOrDefault(System.Object,System.Decimal,System.Boolean)">
            <summary>
            An object extension method that converts this object to a decimal or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to a decimal.</returns>
        </member>
        <member name="M:Extensions.ToDecimalOrDefault(System.Object,System.Func{System.Decimal})">
            <summary>
                An object extension method that converts this object to a decimal or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to a decimal.</returns>
        </member>
        <member name="M:Extensions.ToDecimalOrDefault(System.Object,System.Func{System.Decimal},System.Boolean)">
            <summary>
            An object extension method that converts this object to a decimal or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to a decimal.</returns>
        </member>
        <member name="M:Extensions.ToDouble(System.Object)">
            <summary>
                An object extension method that converts the @this to a double.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a double.</returns>
        </member>
        <member name="M:Extensions.ToDoubleOrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to a double or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a double.</returns>
        </member>
        <member name="M:Extensions.ToDoubleOrDefault(System.Object,System.Double)">
            <summary>
                An object extension method that converts this object to a double or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to a double.</returns>
        </member>
        <member name="M:Extensions.ToDoubleOrDefault(System.Object,System.Double,System.Boolean)">
            <summary>
            An object extension method that converts this object to a double or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to a double.</returns>
        </member>
        <member name="M:Extensions.ToDoubleOrDefault(System.Object,System.Func{System.Double})">
            <summary>
                An object extension method that converts this object to a double or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to a double.</returns>
        </member>
        <member name="M:Extensions.ToDoubleOrDefault(System.Object,System.Func{System.Double},System.Boolean)">
            <summary>
            An object extension method that converts this object to a double or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to a double.</returns>
        </member>
        <member name="M:Extensions.ToFloat(System.Object)">
            <summary>
                An object extension method that converts the @this to a float.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a float.</returns>
        </member>
        <member name="M:Extensions.ToFloatOrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to a float or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a float.</returns>
        </member>
        <member name="M:Extensions.ToFloatOrDefault(System.Object,System.Single)">
            <summary>
                An object extension method that converts this object to a float or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to a float.</returns>
        </member>
        <member name="M:Extensions.ToFloatOrDefault(System.Object,System.Single,System.Boolean)">
            <summary>
            An object extension method that converts this object to a float or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to a float.</returns>
        </member>
        <member name="M:Extensions.ToFloatOrDefault(System.Object,System.Func{System.Single})">
            <summary>
                An object extension method that converts this object to a float or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to a float.</returns>
        </member>
        <member name="M:Extensions.ToFloatOrDefault(System.Object,System.Func{System.Single},System.Boolean)">
            <summary>
            An object extension method that converts this object to a float or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to a float.</returns>
        </member>
        <member name="M:Extensions.ToGuid(System.Object)">
            <summary>
                An object extension method that converts the @this to a unique identifier.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a GUID.</returns>
        </member>
        <member name="M:Extensions.ToGuidOrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to a unique identifier or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a GUID.</returns>
        </member>
        <member name="M:Extensions.ToGuidOrDefault(System.Object,System.Guid)">
            <summary>
                An object extension method that converts this object to a unique identifier or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to a GUID.</returns>
        </member>
        <member name="M:Extensions.ToGuidOrDefault(System.Object,System.Guid,System.Boolean)">
            <summary>
            An object extension method that converts this object to a unique identifier or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to a GUID.</returns>
        </member>
        <member name="M:Extensions.ToGuidOrDefault(System.Object,System.Func{System.Guid})">
            <summary>
                An object extension method that converts this object to a unique identifier or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to a GUID.</returns>
        </member>
        <member name="M:Extensions.ToGuidOrDefault(System.Object,System.Func{System.Guid},System.Boolean)">
            <summary>
            An object extension method that converts this object to a unique identifier or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to a GUID.</returns>
        </member>
        <member name="M:Extensions.ToInt16(System.Object)">
            <summary>
                An object extension method that converts the @this to an int 16.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a short.</returns>
        </member>
        <member name="M:Extensions.ToInt16OrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to an int 16 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a short.</returns>
        </member>
        <member name="M:Extensions.ToInt16OrDefault(System.Object,System.Int16)">
            <summary>
                An object extension method that converts this object to an int 16 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to a short.</returns>
        </member>
        <member name="M:Extensions.ToInt16OrDefault(System.Object,System.Int16,System.Boolean)">
            <summary>
            An object extension method that converts this object to an int 16 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to a short.</returns>
        </member>
        <member name="M:Extensions.ToInt16OrDefault(System.Object,System.Func{System.Int16})">
            <summary>
                An object extension method that converts this object to an int 16 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to a short.</returns>
        </member>
        <member name="M:Extensions.ToInt16OrDefault(System.Object,System.Func{System.Int16},System.Boolean)">
            <summary>
            An object extension method that converts this object to an int 16 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to a short.</returns>
        </member>
        <member name="M:Extensions.ToInt32(System.Object)">
            <summary>
                An object extension method that converts the @this to an int 32.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as an int.</returns>
        </member>
        <member name="M:Extensions.ToInt32OrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to an int 32 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to an int.</returns>
        </member>
        <member name="M:Extensions.ToInt32OrDefault(System.Object,System.Int32)">
            <summary>
                An object extension method that converts this object to an int 32 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to an int.</returns>
        </member>
        <member name="M:Extensions.ToInt32OrDefault(System.Object,System.Int32,System.Boolean)">
            <summary>
            An object extension method that converts this object to an int 32 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to an int.</returns>
        </member>
        <member name="M:Extensions.ToInt32OrDefault(System.Object,System.Func{System.Int32})">
            <summary>
                An object extension method that converts this object to an int 32 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to an int.</returns>
        </member>
        <member name="M:Extensions.ToInt32OrDefault(System.Object,System.Func{System.Int32},System.Boolean)">
            <summary>
            An object extension method that converts this object to an int 32 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to an int.</returns>
        </member>
        <member name="M:Extensions.ToInt64(System.Object)">
            <summary>
                An object extension method that converts the @this to an int 64.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a long.</returns>
        </member>
        <member name="M:Extensions.ToInt64OrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to an int 64 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a long.</returns>
        </member>
        <member name="M:Extensions.ToInt64OrDefault(System.Object,System.Int64)">
            <summary>
                An object extension method that converts this object to an int 64 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to a long.</returns>
        </member>
        <member name="M:Extensions.ToInt64OrDefault(System.Object,System.Int64,System.Boolean)">
            <summary>
            An object extension method that converts this object to an int 64 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to a long.</returns>
        </member>
        <member name="M:Extensions.ToInt64OrDefault(System.Object,System.Func{System.Int64})">
            <summary>
                An object extension method that converts this object to an int 64 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to a long.</returns>
        </member>
        <member name="M:Extensions.ToInt64OrDefault(System.Object,System.Func{System.Int64},System.Boolean)">
            <summary>
            An object extension method that converts this object to an int 64 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to a long.</returns>
        </member>
        <member name="M:Extensions.ToLong(System.Object)">
            <summary>
                An object extension method that converts the @this to a long.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a long.</returns>
        </member>
        <member name="M:Extensions.ToLongOrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to a long or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a long.</returns>
        </member>
        <member name="M:Extensions.ToLongOrDefault(System.Object,System.Int64)">
            <summary>
                An object extension method that converts this object to a long or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to a long.</returns>
        </member>
        <member name="M:Extensions.ToLongOrDefault(System.Object,System.Int64,System.Boolean)">
            <summary>An object extension method that converts this object to a long or default.</summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to a long.</returns>
        </member>
        <member name="M:Extensions.ToLongOrDefault(System.Object,System.Func{System.Int64})">
            <summary>
                An object extension method that converts this object to a long or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to a long.</returns>
        </member>
        <member name="M:Extensions.ToLongOrDefault(System.Object,System.Func{System.Int64},System.Boolean)">
            <summary>An object extension method that converts this object to a long or default.</summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to a long.</returns>
        </member>
        <member name="M:Extensions.ToNullableBoolean(System.Object)">
            <summary>
                An object extension method that converts the @this to a nullable boolean.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a bool?</returns>
        </member>
        <member name="M:Extensions.ToNullableBooleanOrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to a nullable boolean or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a bool?</returns>
        </member>
        <member name="M:Extensions.ToNullableBooleanOrDefault(System.Object,System.Nullable{System.Boolean})">
            <summary>
                An object extension method that converts this object to a nullable boolean or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to a bool?</returns>
        </member>
        <member name="M:Extensions.ToNullableBooleanOrDefault(System.Object,System.Func{System.Nullable{System.Boolean}})">
            <summary>
                An object extension method that converts this object to a nullable boolean or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to a bool?</returns>
        </member>
        <member name="M:Extensions.ToNullableByte(System.Object)">
            <summary>
                An object extension method that converts the @this to a nullable byte.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a byte?</returns>
        </member>
        <member name="M:Extensions.ToNullableByteOrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to a nullable byte or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a byte?</returns>
        </member>
        <member name="M:Extensions.ToNullableByteOrDefault(System.Object,System.Nullable{System.Byte})">
            <summary>
                An object extension method that converts this object to a nullable byte or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to a byte?</returns>
        </member>
        <member name="M:Extensions.ToNullableByteOrDefault(System.Object,System.Func{System.Nullable{System.Byte}})">
            <summary>
                An object extension method that converts this object to a nullable byte or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to a byte?</returns>
        </member>
        <member name="M:Extensions.ToNullableChar(System.Object)">
            <summary>
                An object extension method that converts the @this to a nullable character.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a char?</returns>
        </member>
        <member name="M:Extensions.ToNullableCharOrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to a nullable character or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a char?</returns>
        </member>
        <member name="M:Extensions.ToNullableCharOrDefault(System.Object,System.Nullable{System.Char})">
            <summary>
                An object extension method that converts this object to a nullable character or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to a char?</returns>
        </member>
        <member name="M:Extensions.ToNullableCharOrDefault(System.Object,System.Func{System.Nullable{System.Char}})">
            <summary>
                An object extension method that converts this object to a nullable character or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to a char?</returns>
        </member>
        <member name="M:Extensions.ToNullableDateTime(System.Object)">
            <summary>
                An object extension method that converts the @this to a nullable date time.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a DateTime?</returns>
        </member>
        <member name="M:Extensions.ToNullableDateTimeOffSet(System.Object)">
            <summary>
                An object extension method that converts the @this to a nullable date time off set.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a DateTimeOffset?</returns>
        </member>
        <member name="M:Extensions.ToNullableDateTimeOffSetOrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to a nullable date time off set or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a DateTimeOffset?</returns>
        </member>
        <member name="M:Extensions.ToNullableDateTimeOffSetOrDefault(System.Object,System.Nullable{System.DateTimeOffset})">
            <summary>
                An object extension method that converts this object to a nullable date time off set or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to a DateTimeOffset?</returns>
        </member>
        <member name="M:Extensions.ToNullableDateTimeOffSetOrDefault(System.Object,System.Func{System.Nullable{System.DateTimeOffset}})">
            <summary>
                An object extension method that converts this object to a nullable date time off set or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to a DateTimeOffset?</returns>
        </member>
        <member name="M:Extensions.ToNullableDateTimeOrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to a nullable date time or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a DateTime?</returns>
        </member>
        <member name="M:Extensions.ToNullableDateTimeOrDefault(System.Object,System.Nullable{System.DateTime})">
            <summary>
                An object extension method that converts this object to a nullable date time or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to a DateTime?</returns>
        </member>
        <member name="M:Extensions.ToNullableDateTimeOrDefault(System.Object,System.Func{System.Nullable{System.DateTime}})">
            <summary>
                An object extension method that converts this object to a nullable date time or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to a DateTime?</returns>
        </member>
        <member name="M:Extensions.ToNullableDecimal(System.Object)">
            <summary>
                An object extension method that converts the @this to a nullable decimal.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a decimal?</returns>
        </member>
        <member name="M:Extensions.ToNullableDecimalOrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to a nullable decimal or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a decimal?</returns>
        </member>
        <member name="M:Extensions.ToNullableDecimalOrDefault(System.Object,System.Nullable{System.Decimal})">
            <summary>
                An object extension method that converts this object to a nullable decimal or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to a decimal?</returns>
        </member>
        <member name="M:Extensions.ToNullableDecimalOrDefault(System.Object,System.Func{System.Nullable{System.Decimal}})">
            <summary>
                An object extension method that converts this object to a nullable decimal or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to a decimal?</returns>
        </member>
        <member name="M:Extensions.ToNullableDouble(System.Object)">
            <summary>
                An object extension method that converts the @this to a nullable double.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a double?</returns>
        </member>
        <member name="M:Extensions.ToNullableDoubleOrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to a nullable double or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a double?</returns>
        </member>
        <member name="M:Extensions.ToNullableDoubleOrDefault(System.Object,System.Nullable{System.Double})">
            <summary>
                An object extension method that converts this object to a nullable double or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to a double?</returns>
        </member>
        <member name="M:Extensions.ToNullableDoubleOrDefault(System.Object,System.Func{System.Nullable{System.Double}})">
            <summary>
                An object extension method that converts this object to a nullable double or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to a double?</returns>
        </member>
        <member name="M:Extensions.ToNullableFloat(System.Object)">
            <summary>
                An object extension method that converts the @this to a nullable float.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a float?</returns>
        </member>
        <member name="M:Extensions.ToNullableFloatOrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to a nullable float or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a float?</returns>
        </member>
        <member name="M:Extensions.ToNullableFloatOrDefault(System.Object,System.Nullable{System.Single})">
            <summary>
                An object extension method that converts this object to a nullable float or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to a float?</returns>
        </member>
        <member name="M:Extensions.ToNullableFloatOrDefault(System.Object,System.Func{System.Nullable{System.Single}})">
            <summary>
                An object extension method that converts this object to a nullable float or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to a float?</returns>
        </member>
        <member name="M:Extensions.ToNullableGuid(System.Object)">
            <summary>
                An object extension method that converts the @this to a nullable unique identifier.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a Guid?</returns>
        </member>
        <member name="M:Extensions.ToNullableGuidOrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to a nullable unique identifier or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a Guid?</returns>
        </member>
        <member name="M:Extensions.ToNullableGuidOrDefault(System.Object,System.Nullable{System.Guid})">
            <summary>
                An object extension method that converts this object to a nullable unique identifier or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to a Guid?</returns>
        </member>
        <member name="M:Extensions.ToNullableGuidOrDefault(System.Object,System.Func{System.Nullable{System.Guid}})">
            <summary>
                An object extension method that converts this object to a nullable unique identifier or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to a Guid?</returns>
        </member>
        <member name="M:Extensions.ToNullableInt16(System.Object)">
            <summary>
                An object extension method that converts the @this to a nullable int 16.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a short?</returns>
        </member>
        <member name="M:Extensions.ToNullableInt16OrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to a nullable int 16 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a short?</returns>
        </member>
        <member name="M:Extensions.ToNullableInt16OrDefault(System.Object,System.Nullable{System.Int16})">
            <summary>
                An object extension method that converts this object to a nullable int 16 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to a short?</returns>
        </member>
        <member name="M:Extensions.ToNullableInt16OrDefault(System.Object,System.Func{System.Nullable{System.Int16}})">
            <summary>
                An object extension method that converts this object to a nullable int 16 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to a short?</returns>
        </member>
        <member name="M:Extensions.ToNullableInt32(System.Object)">
            <summary>
                An object extension method that converts the @this to a nullable int 32.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as an int?</returns>
        </member>
        <member name="M:Extensions.ToNullableInt32OrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to a nullable int 32 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to an int?</returns>
        </member>
        <member name="M:Extensions.ToNullableInt32OrDefault(System.Object,System.Nullable{System.Int32})">
            <summary>
                An object extension method that converts this object to a nullable int 32 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to an int?</returns>
        </member>
        <member name="M:Extensions.ToNullableInt32OrDefault(System.Object,System.Func{System.Nullable{System.Int32}})">
            <summary>
                An object extension method that converts this object to a nullable int 32 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to an int?</returns>
        </member>
        <member name="M:Extensions.ToNullableInt64(System.Object)">
            <summary>
                An object extension method that converts the @this to a nullable int 64.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a long?</returns>
        </member>
        <member name="M:Extensions.ToNullableInt64OrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to a nullable int 64 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a long?</returns>
        </member>
        <member name="M:Extensions.ToNullableInt64OrDefault(System.Object,System.Nullable{System.Int64})">
            <summary>
                An object extension method that converts this object to a nullable int 64 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to a long?</returns>
        </member>
        <member name="M:Extensions.ToNullableInt64OrDefault(System.Object,System.Func{System.Nullable{System.Int64}})">
            <summary>
                An object extension method that converts this object to a nullable int 64 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to a long?</returns>
        </member>
        <member name="M:Extensions.ToNullableLong(System.Object)">
            <summary>
                An object extension method that converts the @this to a nullable long.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a long?</returns>
        </member>
        <member name="M:Extensions.ToNullableLongOrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to a nullable long or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a long?</returns>
        </member>
        <member name="M:Extensions.ToNullableLongOrDefault(System.Object,System.Nullable{System.Int64})">
            <summary>
                An object extension method that converts this object to a nullable long or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to a long?</returns>
        </member>
        <member name="M:Extensions.ToNullableLongOrDefault(System.Object,System.Func{System.Nullable{System.Int64}})">
            <summary>
                An object extension method that converts this object to a nullable long or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to a long?</returns>
        </member>
        <member name="M:Extensions.ToNullableSByte(System.Object)">
            <summary>
                An object extension method that converts the @this to a nullable s byte.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a sbyte?</returns>
        </member>
        <member name="M:Extensions.ToNullableSByteOrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to a nullable s byte or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a sbyte?</returns>
        </member>
        <member name="M:Extensions.ToNullableSByteOrDefault(System.Object,System.Nullable{System.SByte})">
            <summary>
                An object extension method that converts this object to a nullable s byte or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to a sbyte?</returns>
        </member>
        <member name="M:Extensions.ToNullableSByteOrDefault(System.Object,System.Func{System.Nullable{System.SByte}})">
            <summary>
                An object extension method that converts this object to a nullable s byte or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to a sbyte?</returns>
        </member>
        <member name="M:Extensions.ToNullableShort(System.Object)">
            <summary>
                An object extension method that converts the @this to a nullable short.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a short?</returns>
        </member>
        <member name="M:Extensions.ToNullableShortOrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to a nullable short or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a short?</returns>
        </member>
        <member name="M:Extensions.ToNullableShortOrDefault(System.Object,System.Nullable{System.Int16})">
            <summary>
                An object extension method that converts this object to a nullable short or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to a short?</returns>
        </member>
        <member name="M:Extensions.ToNullableShortOrDefault(System.Object,System.Func{System.Nullable{System.Int16}})">
            <summary>
                An object extension method that converts this object to a nullable short or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to a short?</returns>
        </member>
        <member name="M:Extensions.ToNullableSingle(System.Object)">
            <summary>
                An object extension method that converts the @this to a nullable single.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a float?</returns>
        </member>
        <member name="M:Extensions.ToNullableSingleOrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to a nullable single or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a float?</returns>
        </member>
        <member name="M:Extensions.ToNullableSingleOrDefault(System.Object,System.Nullable{System.Single})">
            <summary>
                An object extension method that converts this object to a nullable single or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to a float?</returns>
        </member>
        <member name="M:Extensions.ToNullableSingleOrDefault(System.Object,System.Func{System.Nullable{System.Single}})">
            <summary>
                An object extension method that converts this object to a nullable single or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to a float?</returns>
        </member>
        <member name="M:Extensions.ToNullableUInt16(System.Object)">
            <summary>
                An object extension method that converts the @this to a nullable u int 16.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as an ushort?</returns>
        </member>
        <member name="M:Extensions.ToNullableUInt16OrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to a nullable u int 16 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to an ushort?</returns>
        </member>
        <member name="M:Extensions.ToNullableUInt16OrDefault(System.Object,System.Nullable{System.UInt16})">
            <summary>
                An object extension method that converts this object to a nullable u int 16 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to an ushort?</returns>
        </member>
        <member name="M:Extensions.ToNullableUInt16OrDefault(System.Object,System.Func{System.Nullable{System.UInt16}})">
            <summary>
                An object extension method that converts this object to a nullable u int 16 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to an ushort?</returns>
        </member>
        <member name="M:Extensions.ToNullableUInt32(System.Object)">
            <summary>
                An object extension method that converts the @this to a nullable u int 32.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as an uint?</returns>
        </member>
        <member name="M:Extensions.ToNullableUInt32OrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to a nullable u int 32 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to an uint?</returns>
        </member>
        <member name="M:Extensions.ToNullableUInt32OrDefault(System.Object,System.Nullable{System.UInt32})">
            <summary>
                An object extension method that converts this object to a nullable u int 32 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to an uint?</returns>
        </member>
        <member name="M:Extensions.ToNullableUInt32OrDefault(System.Object,System.Func{System.Nullable{System.UInt32}})">
            <summary>
                An object extension method that converts this object to a nullable u int 32 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to an uint?</returns>
        </member>
        <member name="M:Extensions.ToNullableUInt64(System.Object)">
            <summary>
                An object extension method that converts the @this to a nullable u int 64.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as an ulong?</returns>
        </member>
        <member name="M:Extensions.ToNullableUInt64OrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to a nullable u int 64 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to an ulong?</returns>
        </member>
        <member name="M:Extensions.ToNullableUInt64OrDefault(System.Object,System.Nullable{System.UInt64})">
            <summary>
                An object extension method that converts this object to a nullable u int 64 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to an ulong?</returns>
        </member>
        <member name="M:Extensions.ToNullableUInt64OrDefault(System.Object,System.Func{System.Nullable{System.UInt64}})">
            <summary>
                An object extension method that converts this object to a nullable u int 64 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to an ulong?</returns>
        </member>
        <member name="M:Extensions.ToNullableULong(System.Object)">
            <summary>
                An object extension method that converts the @this to a nullable u long.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as an ulong?</returns>
        </member>
        <member name="M:Extensions.ToNullableULongOrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to a nullable u long or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to an ulong?</returns>
        </member>
        <member name="M:Extensions.ToNullableULongOrDefault(System.Object,System.Nullable{System.UInt64})">
            <summary>
                An object extension method that converts this object to a nullable u long or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to an ulong?</returns>
        </member>
        <member name="M:Extensions.ToNullableULongOrDefault(System.Object,System.Func{System.Nullable{System.UInt64}})">
            <summary>
                An object extension method that converts this object to a nullable u long or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to an ulong?</returns>
        </member>
        <member name="M:Extensions.ToNullableUShort(System.Object)">
            <summary>
                An object extension method that converts the @this to a nullable u short.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as an ushort?</returns>
        </member>
        <member name="M:Extensions.ToNullableUShortOrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to a nullable u short or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to an ushort?</returns>
        </member>
        <member name="M:Extensions.ToNullableUShortOrDefault(System.Object,System.Nullable{System.UInt16})">
            <summary>
                An object extension method that converts this object to a nullable u short or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to an ushort?</returns>
        </member>
        <member name="M:Extensions.ToNullableUShortOrDefault(System.Object,System.Func{System.Nullable{System.UInt16}})">
            <summary>
                An object extension method that converts this object to a nullable u short or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to an ushort?</returns>
        </member>
        <member name="M:Extensions.ToSByte(System.Object)">
            <summary>
                An object extension method that converts the @this to the s byte.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a sbyte.</returns>
        </member>
        <member name="M:Extensions.ToSByteOrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to the s byte or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a sbyte.</returns>
        </member>
        <member name="M:Extensions.ToSByteOrDefault(System.Object,System.SByte)">
            <summary>
                An object extension method that converts this object to the s byte or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to a sbyte.</returns>
        </member>
        <member name="M:Extensions.ToSByteOrDefault(System.Object,System.SByte,System.Boolean)">
            <summary>
            An object extension method that converts this object to the s byte or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to a sbyte.</returns>
        </member>
        <member name="M:Extensions.ToSByteOrDefault(System.Object,System.Func{System.SByte})">
            <summary>
                An object extension method that converts this object to the s byte or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to a sbyte.</returns>
        </member>
        <member name="M:Extensions.ToSByteOrDefault(System.Object,System.Func{System.SByte},System.Boolean)">
            <summary>
            An object extension method that converts this object to the s byte or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to a sbyte.</returns>
        </member>
        <member name="M:Extensions.ToShort(System.Object)">
            <summary>
                An object extension method that converts the @this to a short.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a short.</returns>
        </member>
        <member name="M:Extensions.ToShortOrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to a short or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a short.</returns>
        </member>
        <member name="M:Extensions.ToShortOrDefault(System.Object,System.Int16)">
            <summary>
                An object extension method that converts this object to a short or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to a short.</returns>
        </member>
        <member name="M:Extensions.ToShortOrDefault(System.Object,System.Int16,System.Boolean)">
            <summary>
            An object extension method that converts this object to a short or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to a short.</returns>
        </member>
        <member name="M:Extensions.ToShortOrDefault(System.Object,System.Func{System.Int16})">
            <summary>
                An object extension method that converts this object to a short or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to a short.</returns>
        </member>
        <member name="M:Extensions.ToShortOrDefault(System.Object,System.Func{System.Int16},System.Boolean)">
            <summary>
            An object extension method that converts this object to a short or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to a short.</returns>
        </member>
        <member name="M:Extensions.ToSingle(System.Object)">
            <summary>
                An object extension method that converts the @this to a single.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a float.</returns>
        </member>
        <member name="M:Extensions.ToSingleOrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to a single or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a float.</returns>
        </member>
        <member name="M:Extensions.ToSingleOrDefault(System.Object,System.Single)">
            <summary>
                An object extension method that converts this object to a single or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to a float.</returns>
        </member>
        <member name="M:Extensions.ToSingleOrDefault(System.Object,System.Single,System.Boolean)">
            <summary>
            An object extension method that converts this object to a single or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to a float.</returns>
        </member>
        <member name="M:Extensions.ToSingleOrDefault(System.Object,System.Func{System.Single})">
            <summary>
                An object extension method that converts this object to a single or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to a float.</returns>
        </member>
        <member name="M:Extensions.ToSingleOrDefault(System.Object,System.Func{System.Single},System.Boolean)">
            <summary>
            An object extension method that converts this object to a single or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to a float.</returns>
        </member>
        <member name="M:Extensions.ToString(System.Object)">
            <summary>
                An object extension method that convert this object into a string representation.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>A string that represents this object.</returns>
        </member>
        <member name="M:Extensions.ToStringOrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to a string or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToStringOrDefault(System.Object,System.String)">
            <summary>
                An object extension method that converts this object to a string or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToStringOrDefault(System.Object,System.String,System.Boolean)">
            <summary>
            An object extension method that converts this object to a string or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToStringOrDefault(System.Object,System.Func{System.String})">
            <summary>
                An object extension method that converts this object to a string or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToStringOrDefault(System.Object,System.Func{System.String},System.Boolean)">
            <summary>
            An object extension method that converts this object to a string or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to a string.</returns>
        </member>
        <member name="M:Extensions.ToUInt16(System.Object)">
            <summary>
                An object extension method that converts the @this to an u int 16.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as an ushort.</returns>
        </member>
        <member name="M:Extensions.ToUInt16OrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to an u int 16 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to an ushort.</returns>
        </member>
        <member name="M:Extensions.ToUInt16OrDefault(System.Object,System.UInt16)">
            <summary>
                An object extension method that converts this object to an u int 16 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to an ushort.</returns>
        </member>
        <member name="M:Extensions.ToUInt16OrDefault(System.Object,System.UInt16,System.Boolean)">
            <summary>
            An object extension method that converts this object to an u int 16 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to an ushort.</returns>
        </member>
        <member name="M:Extensions.ToUInt16OrDefault(System.Object,System.Func{System.UInt16})">
            <summary>
                An object extension method that converts this object to an u int 16 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to an ushort.</returns>
        </member>
        <member name="M:Extensions.ToUInt16OrDefault(System.Object,System.Func{System.UInt16},System.Boolean)">
            <summary>
            An object extension method that converts this object to an u int 16 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to an ushort.</returns>
        </member>
        <member name="M:Extensions.ToUInt32(System.Object)">
            <summary>
                An object extension method that converts the @this to an u int 32.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as an uint.</returns>
        </member>
        <member name="M:Extensions.ToUInt32OrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to an u int 32 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to an uint.</returns>
        </member>
        <member name="M:Extensions.ToUInt32OrDefault(System.Object,System.UInt32)">
            <summary>
                An object extension method that converts this object to an u int 32 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to an uint.</returns>
        </member>
        <member name="M:Extensions.ToUInt32OrDefault(System.Object,System.UInt32,System.Boolean)">
            <summary>
            An object extension method that converts this object to an u int 32 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to an uint.</returns>
        </member>
        <member name="M:Extensions.ToUInt32OrDefault(System.Object,System.Func{System.UInt32})">
            <summary>
                An object extension method that converts this object to an u int 32 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to an uint.</returns>
        </member>
        <member name="M:Extensions.ToUInt32OrDefault(System.Object,System.Func{System.UInt32},System.Boolean)">
            <summary>
            An object extension method that converts this object to an u int 32 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to an uint.</returns>
        </member>
        <member name="M:Extensions.ToUInt64(System.Object)">
            <summary>
                An object extension method that converts the @this to an u int 64.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as an ulong.</returns>
        </member>
        <member name="M:Extensions.ToUInt64OrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to an u int 64 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to an ulong.</returns>
        </member>
        <member name="M:Extensions.ToUInt64OrDefault(System.Object,System.UInt64)">
            <summary>
                An object extension method that converts this object to an u int 64 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to an ulong.</returns>
        </member>
        <member name="M:Extensions.ToUInt64OrDefault(System.Object,System.UInt64,System.Boolean)">
            <summary>
            An object extension method that converts this object to an u int 64 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to an ulong.</returns>
        </member>
        <member name="M:Extensions.ToUInt64OrDefault(System.Object,System.Func{System.UInt64})">
            <summary>
                An object extension method that converts this object to an u int 64 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to an ulong.</returns>
        </member>
        <member name="M:Extensions.ToUInt64OrDefault(System.Object,System.Func{System.UInt64},System.Boolean)">
            <summary>
            An object extension method that converts this object to an u int 64 or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to an ulong.</returns>
        </member>
        <member name="M:Extensions.ToULong(System.Object)">
            <summary>
                An object extension method that converts the @this to an u long.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as an ulong.</returns>
        </member>
        <member name="M:Extensions.ToULongOrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to an u long or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to an ulong.</returns>
        </member>
        <member name="M:Extensions.ToULongOrDefault(System.Object,System.UInt64)">
            <summary>
                An object extension method that converts this object to an u long or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to an ulong.</returns>
        </member>
        <member name="M:Extensions.ToULongOrDefault(System.Object,System.UInt64,System.Boolean)">
            <summary>
            An object extension method that converts this object to an u long or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to an ulong.</returns>
        </member>
        <member name="M:Extensions.ToULongOrDefault(System.Object,System.Func{System.UInt64})">
            <summary>
                An object extension method that converts this object to an u long or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to an ulong.</returns>
        </member>
        <member name="M:Extensions.ToULongOrDefault(System.Object,System.Func{System.UInt64},System.Boolean)">
            <summary>
            An object extension method that converts this object to an u long or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to an ulong.</returns>
        </member>
        <member name="M:Extensions.ToUShort(System.Object)">
            <summary>
                An object extension method that converts the @this to an u short.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as an ushort.</returns>
        </member>
        <member name="M:Extensions.ToUShortOrDefault(System.Object)">
            <summary>
                An object extension method that converts this object to an u short or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The given data converted to an ushort.</returns>
        </member>
        <member name="M:Extensions.ToUShortOrDefault(System.Object,System.UInt16)">
            <summary>
                An object extension method that converts this object to an u short or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given data converted to an ushort.</returns>
        </member>
        <member name="M:Extensions.ToUShortOrDefault(System.Object,System.UInt16,System.Boolean)">
            <summary>
            An object extension method that converts this object to an u short or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to an ushort.</returns>
        </member>
        <member name="M:Extensions.ToUShortOrDefault(System.Object,System.Func{System.UInt16})">
            <summary>
                An object extension method that converts this object to an u short or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The given data converted to an ushort.</returns>
        </member>
        <member name="M:Extensions.ToUShortOrDefault(System.Object,System.Func{System.UInt16},System.Boolean)">
            <summary>
            An object extension method that converts this object to an u short or default.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <param name="useDefaultIfNull">true to use default if null.</param>
            <returns>The given data converted to an ushort.</returns>
        </member>
        <member name="M:Extensions.Coalesce``1(``0,``0[])">
            <summary>
                A T extension method that that return the first not null value (including the @this).
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="values">A variable-length parameters list containing values.</param>
            <returns>The first not null value.</returns>
        </member>
        <member name="M:Extensions.CoalesceOrDefault``1(``0,``0[])">
            <summary>
                A T extension method that that return the first not null value (including the @this) or a default value.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="values">A variable-length parameters list containing values.</param>
            <returns>The first not null value or a default value.</returns>
        </member>
        <member name="M:Extensions.CoalesceOrDefault``1(``0,System.Func{``0},``0[])">
            <summary>
                A T extension method that that return the first not null value (including the @this) or a default value.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <param name="values">A variable-length parameters list containing values.</param>
            <returns>The first not null value or a default value.</returns>
            <example>
                <code>
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_Object_CoalesceOrDefault
                      {
                          [TestMethod]
                          public void CoalesceOrDefault()
                          {
                              // Varable
                              object nullObject = null;
            
                              // Type
                              object @thisNull = null;
                              object @thisNotNull = &quot;Fizz&quot;;
            
                              // Exemples
                              object result1 = @thisNull.CoalesceOrDefault(nullObject, nullObject, &quot;Buzz&quot;); // return &quot;Buzz&quot;;
                              object result2 = @thisNull.CoalesceOrDefault(() =&gt; &quot;Buzz&quot;, null, null); // return &quot;Buzz&quot;;
                              object result3 = @thisNull.CoalesceOrDefault((x) =&gt; &quot;Buzz&quot;, null, null); // return &quot;Buzz&quot;;
                              object result4 = @thisNotNull.CoalesceOrDefault(nullObject, nullObject, &quot;Buzz&quot;); // return &quot;Fizz&quot;;
            
                              // Unit Test
                              Assert.AreEqual(&quot;Buzz&quot;, result1);
                              Assert.AreEqual(&quot;Buzz&quot;, result2);
                              Assert.AreEqual(&quot;Buzz&quot;, result3);
                              Assert.AreEqual(&quot;Fizz&quot;, result4);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
                  using Z.ExtensionMethods.Object;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_Object_CoalesceOrDefault
                      {
                          [TestMethod]
                          public void CoalesceOrDefault()
                          {
                              // Varable
                              object nullObject = null;
            
                              // Type
                              object @thisNull = null;
                              object @thisNotNull = &quot;Fizz&quot;;
            
                              // Exemples
                              object result1 = @thisNull.CoalesceOrDefault(nullObject, nullObject, &quot;Buzz&quot;); // return &quot;Buzz&quot;;
                              object result2 = @thisNull.CoalesceOrDefault(() =&gt; &quot;Buzz&quot;, null, null); // return &quot;Buzz&quot;;
                              object result3 = @thisNull.CoalesceOrDefault(x =&gt; &quot;Buzz&quot;, null, null); // return &quot;Buzz&quot;;
                              object result4 = @thisNotNull.CoalesceOrDefault(nullObject, nullObject, &quot;Buzz&quot;); // return &quot;Fizz&quot;;
            
                              // Unit Test
                              Assert.AreEqual(&quot;Buzz&quot;, result1);
                              Assert.AreEqual(&quot;Buzz&quot;, result2);
                              Assert.AreEqual(&quot;Buzz&quot;, result3);
                              Assert.AreEqual(&quot;Fizz&quot;, result4);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                      using Microsoft.VisualStudio.TestTools.UnitTesting;
                      using Z.ExtensionMethods.Object;
                      
                      namespace ExtensionMethods.Examples
                      {
                          [TestClass]
                          public class System_Object_CoalesceOrDefault
                          {
                              [TestMethod]
                              public void CoalesceOrDefault()
                              {
                                  // Varable
                                  object nullObject = null;
                      
                                  // Type
                                  object @thisNull = null;
                                  object @thisNotNull = &quot;Fizz&quot;;
                      
                                  // Exemples
                                  object result1 = @thisNull.CoalesceOrDefault(nullObject, nullObject, &quot;Buzz&quot;); // return &quot;Buzz&quot;;
                                  object result2 = @thisNull.CoalesceOrDefault(() =&gt; &quot;Buzz&quot;, null, null); // return &quot;Buzz&quot;;
                                  object result3 = @thisNull.CoalesceOrDefault(x =&gt; &quot;Buzz&quot;, null, null); // return &quot;Buzz&quot;;
                                  object result4 = @thisNotNull.CoalesceOrDefault(nullObject, nullObject, &quot;Buzz&quot;); // return &quot;Fizz&quot;;
                      
                                  // Unit Test
                                  Assert.AreEqual(&quot;Buzz&quot;, result1);
                                  Assert.AreEqual(&quot;Buzz&quot;, result2);
                                  Assert.AreEqual(&quot;Buzz&quot;, result3);
                                  Assert.AreEqual(&quot;Fizz&quot;, result4);
                              }
                          }
                      }
                </code>
            </example>
        </member>
        <member name="M:Extensions.CoalesceOrDefault``1(``0,System.Func{``0,``0},``0[])">
            <summary>
                A T extension method that that return the first not null value (including the @this) or a default value.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <param name="values">A variable-length parameters list containing values.</param>
            <returns>The first not null value or a default value.</returns>
            <example>
                <code>
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_Object_CoalesceOrDefault
                      {
                          [TestMethod]
                          public void CoalesceOrDefault()
                          {
                              // Varable
                              object nullObject = null;
            
                              // Type
                              object @thisNull = null;
                              object @thisNotNull = &quot;Fizz&quot;;
            
                              // Exemples
                              object result1 = @thisNull.CoalesceOrDefault(nullObject, nullObject, &quot;Buzz&quot;); // return &quot;Buzz&quot;;
                              object result2 = @thisNull.CoalesceOrDefault(() =&gt; &quot;Buzz&quot;, null, null); // return &quot;Buzz&quot;;
                              object result3 = @thisNull.CoalesceOrDefault((x) =&gt; &quot;Buzz&quot;, null, null); // return &quot;Buzz&quot;;
                              object result4 = @thisNotNull.CoalesceOrDefault(nullObject, nullObject, &quot;Buzz&quot;); // return &quot;Fizz&quot;;
            
                              // Unit Test
                              Assert.AreEqual(&quot;Buzz&quot;, result1);
                              Assert.AreEqual(&quot;Buzz&quot;, result2);
                              Assert.AreEqual(&quot;Buzz&quot;, result3);
                              Assert.AreEqual(&quot;Fizz&quot;, result4);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
                  using Z.ExtensionMethods.Object;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_Object_CoalesceOrDefault
                      {
                          [TestMethod]
                          public void CoalesceOrDefault()
                          {
                              // Varable
                              object nullObject = null;
            
                              // Type
                              object @thisNull = null;
                              object @thisNotNull = &quot;Fizz&quot;;
            
                              // Exemples
                              object result1 = @thisNull.CoalesceOrDefault(nullObject, nullObject, &quot;Buzz&quot;); // return &quot;Buzz&quot;;
                              object result2 = @thisNull.CoalesceOrDefault(() =&gt; &quot;Buzz&quot;, null, null); // return &quot;Buzz&quot;;
                              object result3 = @thisNull.CoalesceOrDefault(x =&gt; &quot;Buzz&quot;, null, null); // return &quot;Buzz&quot;;
                              object result4 = @thisNotNull.CoalesceOrDefault(nullObject, nullObject, &quot;Buzz&quot;); // return &quot;Fizz&quot;;
            
                              // Unit Test
                              Assert.AreEqual(&quot;Buzz&quot;, result1);
                              Assert.AreEqual(&quot;Buzz&quot;, result2);
                              Assert.AreEqual(&quot;Buzz&quot;, result3);
                              Assert.AreEqual(&quot;Fizz&quot;, result4);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                      using Microsoft.VisualStudio.TestTools.UnitTesting;
                      using Z.ExtensionMethods.Object;
                      
                      namespace ExtensionMethods.Examples
                      {
                          [TestClass]
                          public class System_Object_CoalesceOrDefault
                          {
                              [TestMethod]
                              public void CoalesceOrDefault()
                              {
                                  // Varable
                                  object nullObject = null;
                      
                                  // Type
                                  object @thisNull = null;
                                  object @thisNotNull = &quot;Fizz&quot;;
                      
                                  // Exemples
                                  object result1 = @thisNull.CoalesceOrDefault(nullObject, nullObject, &quot;Buzz&quot;); // return &quot;Buzz&quot;;
                                  object result2 = @thisNull.CoalesceOrDefault(() =&gt; &quot;Buzz&quot;, null, null); // return &quot;Buzz&quot;;
                                  object result3 = @thisNull.CoalesceOrDefault(x =&gt; &quot;Buzz&quot;, null, null); // return &quot;Buzz&quot;;
                                  object result4 = @thisNotNull.CoalesceOrDefault(nullObject, nullObject, &quot;Buzz&quot;); // return &quot;Fizz&quot;;
                      
                                  // Unit Test
                                  Assert.AreEqual(&quot;Buzz&quot;, result1);
                                  Assert.AreEqual(&quot;Buzz&quot;, result2);
                                  Assert.AreEqual(&quot;Buzz&quot;, result3);
                                  Assert.AreEqual(&quot;Fizz&quot;, result4);
                              }
                          }
                      }
                </code>
            </example>
        </member>
        <member name="M:Extensions.GetValueOrDefault``2(``0,System.Func{``0,``1})">
            <summary>
                A T extension method that gets value or default.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="func">The function.</param>
            <returns>The value or default.</returns>
        </member>
        <member name="M:Extensions.GetValueOrDefault``2(``0,System.Func{``0,``1},``1)">
            <summary>
                A T extension method that gets value or default.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="func">The function.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The value or default.</returns>
        </member>
        <member name="M:Extensions.GetValueOrDefault``2(``0,System.Func{``0,``1},System.Func{``1})">
            <summary>
                A T extension method that gets value or default.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="func">The function.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The value or default.</returns>
            <example>
                <code>
                  using System.Xml;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_Object_GetValueOrDefault
                      {
                          [TestMethod]
                          public void GetValueOrDefault()
                          {
                              // Type
                              var @this = new XmlDocument();
            
                              // Exemples
                              string result1 = @this.GetValueOrDefault(x =&gt; x.FirstChild.InnerXml, &quot;FizzBuzz&quot;); // return &quot;FizzBuzz&quot;;
                              string result2 = @this.GetValueOrDefault(x =&gt; x.FirstChild.InnerXml, () =&gt; &quot;FizzBuzz&quot;); // return &quot;FizzBuzz&quot;
            
                              // Unit Test
                              Assert.AreEqual(&quot;FizzBuzz&quot;, result1);
                              Assert.AreEqual(&quot;FizzBuzz&quot;, result2);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                  using System.Xml;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
                  using Z.ExtensionMethods.Object;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_Object_GetValueOrDefault
                      {
                          [TestMethod]
                          public void GetValueOrDefault()
                          {
                              // Type
                              var @this = new XmlDocument();
            
                              // Exemples
                              string result1 = @this.GetValueOrDefault(x =&gt; x.FirstChild.InnerXml, &quot;FizzBuzz&quot;); // return &quot;FizzBuzz&quot;;
                              string result2 = @this.GetValueOrDefault(x =&gt; x.FirstChild.InnerXml, () =&gt; &quot;FizzBuzz&quot;); // return &quot;FizzBuzz&quot;
            
                              // Unit Test
                              Assert.AreEqual(&quot;FizzBuzz&quot;, result1);
                              Assert.AreEqual(&quot;FizzBuzz&quot;, result2);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                      using System.Xml;
                      using Microsoft.VisualStudio.TestTools.UnitTesting;
                      using Z.ExtensionMethods.Object;
                      
                      namespace ExtensionMethods.Examples
                      {
                          [TestClass]
                          public class System_Object_GetValueOrDefault
                          {
                              [TestMethod]
                              public void GetValueOrDefault()
                              {
                                  // Type
                                  var @this = new XmlDocument();
                      
                                  // Exemples
                                  string result1 = @this.GetValueOrDefault(x =&gt; x.FirstChild.InnerXml, &quot;FizzBuzz&quot;); // return &quot;FizzBuzz&quot;;
                                  string result2 = @this.GetValueOrDefault(x =&gt; x.FirstChild.InnerXml, () =&gt; &quot;FizzBuzz&quot;); // return &quot;FizzBuzz&quot;
                      
                                  // Unit Test
                                  Assert.AreEqual(&quot;FizzBuzz&quot;, result1);
                                  Assert.AreEqual(&quot;FizzBuzz&quot;, result2);
                              }
                          }
                      }
                </code>
            </example>
        </member>
        <member name="M:Extensions.GetValueOrDefault``2(``0,System.Func{``0,``1},System.Func{``0,``1})">
            <summary>
                A T extension method that gets value or default.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="func">The function.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The value or default.</returns>
            <example>
                <code>
                  using System.Xml;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_Object_GetValueOrDefault
                      {
                          [TestMethod]
                          public void GetValueOrDefault()
                          {
                              // Type
                              var @this = new XmlDocument();
            
                              // Exemples
                              string result1 = @this.GetValueOrDefault(x =&gt; x.FirstChild.InnerXml, &quot;FizzBuzz&quot;); // return &quot;FizzBuzz&quot;;
                              string result2 = @this.GetValueOrDefault(x =&gt; x.FirstChild.InnerXml, () =&gt; &quot;FizzBuzz&quot;); // return &quot;FizzBuzz&quot;
            
                              // Unit Test
                              Assert.AreEqual(&quot;FizzBuzz&quot;, result1);
                              Assert.AreEqual(&quot;FizzBuzz&quot;, result2);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                  using System.Xml;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
                  using Z.ExtensionMethods.Object;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_Object_GetValueOrDefault
                      {
                          [TestMethod]
                          public void GetValueOrDefault()
                          {
                              // Type
                              var @this = new XmlDocument();
            
                              // Exemples
                              string result1 = @this.GetValueOrDefault(x =&gt; x.FirstChild.InnerXml, &quot;FizzBuzz&quot;); // return &quot;FizzBuzz&quot;;
                              string result2 = @this.GetValueOrDefault(x =&gt; x.FirstChild.InnerXml, () =&gt; &quot;FizzBuzz&quot;); // return &quot;FizzBuzz&quot;
            
                              // Unit Test
                              Assert.AreEqual(&quot;FizzBuzz&quot;, result1);
                              Assert.AreEqual(&quot;FizzBuzz&quot;, result2);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                      using System.Xml;
                      using Microsoft.VisualStudio.TestTools.UnitTesting;
                      using Z.ExtensionMethods.Object;
                      
                      namespace ExtensionMethods.Examples
                      {
                          [TestClass]
                          public class System_Object_GetValueOrDefault
                          {
                              [TestMethod]
                              public void GetValueOrDefault()
                              {
                                  // Type
                                  var @this = new XmlDocument();
                      
                                  // Exemples
                                  string result1 = @this.GetValueOrDefault(x =&gt; x.FirstChild.InnerXml, &quot;FizzBuzz&quot;); // return &quot;FizzBuzz&quot;;
                                  string result2 = @this.GetValueOrDefault(x =&gt; x.FirstChild.InnerXml, () =&gt; &quot;FizzBuzz&quot;); // return &quot;FizzBuzz&quot;
                      
                                  // Unit Test
                                  Assert.AreEqual(&quot;FizzBuzz&quot;, result1);
                                  Assert.AreEqual(&quot;FizzBuzz&quot;, result2);
                              }
                          }
                      }
                </code>
            </example>
        </member>
        <member name="M:Extensions.IfNotNull``1(``0,System.Action{``0})">
            <summary>A T extension method that execute an action when the value is not null.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Extensions.IfNotNull``2(``0,System.Func{``0,``1})">
            <summary>
                A T extension method that the function result if not null otherwise default value.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="func">The function.</param>
            <returns>The function result if @this is not null otherwise default value.</returns>
        </member>
        <member name="M:Extensions.IfNotNull``2(``0,System.Func{``0,``1},``1)">
            <summary>
                A T extension method that the function result if not null otherwise default value.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="func">The function.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The function result if @this is not null otherwise default value.</returns>
        </member>
        <member name="M:Extensions.IfNotNull``2(``0,System.Func{``0,``1},System.Func{``1})">
            <summary>
                A T extension method that the function result if not null otherwise default value.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="func">The function.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The function result if @this is not null otherwise default value.</returns>
        </member>
        <member name="M:Extensions.NullIf``1(``0,System.Func{``0,System.Boolean})">
            <summary>
                A T extension method that null if.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="predicate">The predicate.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:Extensions.NullIfEquals``1(``0,``0)">
            <summary>
                A T extension method that null if equals.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="value">The value.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:Extensions.NullIfEqualsAny``1(``0,``0[])">
            <summary>
                A T extension method that null if equals any.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="values">A variable-length parameters list containing values.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:Extensions.ToStringSafe(System.Object)">
            <summary>
                An object extension method that converts the @this to string or return an empty string if the value is null.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a string or empty if the value is null.</returns>
        </member>
        <member name="M:Extensions.Try``2(``0,System.Func{``0,``1})">
            <summary>A TType extension method that tries.</summary>
            <typeparam name="TType">Type of the type.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="tryFunction">The try function.</param>
            <returns>A TResult.</returns>
        </member>
        <member name="M:Extensions.Try``2(``0,System.Func{``0,``1},``1)">
            <summary>A TType extension method that tries.</summary>
            <typeparam name="TType">Type of the type.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="tryFunction">The try function.</param>
            <param name="catchValue">The catch value.</param>
            <returns>A TResult.</returns>
        </member>
        <member name="M:Extensions.Try``2(``0,System.Func{``0,``1},System.Func{``0,``1})">
            <summary>A TType extension method that tries.</summary>
            <typeparam name="TType">Type of the type.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="tryFunction">The try function.</param>
            <param name="catchValueFactory">The catch value factory.</param>
            <returns>A TResult.</returns>
        </member>
        <member name="M:Extensions.Try``2(``0,System.Func{``0,``1},``1@)">
            <summary>A TType extension method that tries.</summary>
            <typeparam name="TType">Type of the type.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="tryFunction">The try function.</param>
            <param name="result">[out] The result.</param>
            <returns>A TResult.</returns>
        </member>
        <member name="M:Extensions.Try``2(``0,System.Func{``0,``1},``1,``1@)">
            <summary>A TType extension method that tries.</summary>
            <typeparam name="TType">Type of the type.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="tryFunction">The try function.</param>
            <param name="catchValue">The catch value.</param>
            <param name="result">[out] The result.</param>
            <returns>A TResult.</returns>
        </member>
        <member name="M:Extensions.Try``2(``0,System.Func{``0,``1},System.Func{``0,``1},``1@)">
            <summary>A TType extension method that tries.</summary>
            <typeparam name="TType">Type of the type.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="tryFunction">The try function.</param>
            <param name="catchValueFactory">The catch value factory.</param>
            <param name="result">[out] The result.</param>
            <returns>A TResult.</returns>
        </member>
        <member name="M:Extensions.Try``1(``0,System.Action{``0})">
            <summary>A TType extension method that attempts to action from the given data.</summary>
            <typeparam name="TType">Type of the type.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="tryAction">The try action.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Extensions.Try``1(``0,System.Action{``0},System.Action{``0})">
            <summary>A TType extension method that attempts to action from the given data.</summary>
            <typeparam name="TType">Type of the type.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="tryAction">The try action.</param>
            <param name="catchAction">The catch action.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Extensions.Between``1(``0,``0,``0)">
            <summary>
                A T extension method that check if the value is between (exclusif) the minValue and maxValue.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns>true if the value is between the minValue and maxValue, otherwise false.</returns>
        </member>
        <member name="M:Extensions.In``1(``0,``0[])">
            <summary>
                A T extension method to determines whether the object is equal to any of the provided values.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The object to be compared.</param>
            <param name="values">The value list to compare with the object.</param>
            <returns>true if the values list contains the object, else false.</returns>
        </member>
        <member name="M:Extensions.InRange``1(``0,``0,``0)">
            <summary>
                A T extension method that check if the value is between inclusively the minValue and maxValue.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns>true if the value is between inclusively the minValue and maxValue, otherwise false.</returns>
        </member>
        <member name="M:Extensions.IsDBNull``1(``0)">
            <summary>
                Returns an indication whether the specified object is of type .
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="value">An object.</param>
            <returns>true if  is of type ; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.IsDefault``1(``0)">
            <summary>
                A T extension method that query if 'source' is the default value.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="source">The source to act on.</param>
            <returns>true if default, false if not.</returns>
        </member>
        <member name="M:Extensions.IsNotNull``1(``0)">
            <summary>
                A T extension method that query if '@this' is not null.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>true if not null, false if not.</returns>
        </member>
        <member name="M:Extensions.IsNull``1(``0)">
            <summary>
                A T extension method that query if '@this' is null.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>true if null, false if not.</returns>
        </member>
        <member name="M:Extensions.NotIn``1(``0,``0[])">
            <summary>
                A T extension method to determines whether the object is not equal to any of the provided values.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The object to be compared.</param>
            <param name="values">The value list to compare with the object.</param>
            <returns>true if the values list doesn't contains the object, else false.</returns>
        </member>
        <member name="M:Extensions.ReferenceEquals(System.Object,System.Object)">
            <summary>
                Determines whether the specified  instances are the same instance.
            </summary>
            <param name="objA">The first object to compare.</param>
            <param name="objB">The second object  to compare.</param>
            <returns>true if  is the same instance as  or if both are null; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.CoinToss(System.Random)">
            <summary>
                A Random extension method that flip a coin toss.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true 50% of time, otherwise false.</returns>
        </member>
        <member name="M:Extensions.OneOf``1(System.Random,``0[])">
            <summary>
                A Random extension method that return a random value from the specified values.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="values">A variable-length parameters list containing arguments.</param>
            <returns>One of the specified value.</returns>
        </member>
        <member name="M:Extensions.Abs(System.SByte)">
            <summary>
                Returns the absolute value of an 8-bit signed integer.
            </summary>
            <param name="value">A number that is greater than , but less than or equal to .</param>
            <returns>An 8-bit signed integer, x, such that 0 ? x ?.</returns>
        </member>
        <member name="M:Extensions.Max(System.SByte,System.SByte)">
            <summary>
                Returns the larger of two 8-bit signed integers.
            </summary>
            <param name="val1">The first of two 8-bit signed integers to compare.</param>
            <param name="val2">The second of two 8-bit signed integers to compare.</param>
            <returns>Parameter  or , whichever is larger.</returns>
        </member>
        <member name="M:Extensions.Min(System.SByte,System.SByte)">
            <summary>
                Returns the smaller of two 8-bit signed integers.
            </summary>
            <param name="val1">The first of two 8-bit signed integers to compare.</param>
            <param name="val2">The second of two 8-bit signed integers to compare.</param>
            <returns>Parameter  or , whichever is smaller.</returns>
        </member>
        <member name="M:Extensions.Sign(System.SByte)">
            <summary>
                Returns a value indicating the sign of an 8-bit signed integer.
            </summary>
            <param name="value">A signed number.</param>
            <returns>
                A number that indicates the sign of , as shown in the following table.Return value Meaning -1  is less than
                zero. 0  is equal to zero. 1  is greater than zero.
            </returns>
        </member>
        <member name="M:Extensions.In(System.SByte,System.SByte[])">
            <summary>
                A T extension method to determines whether the object is equal to any of the provided values.
            </summary>
            <param name="this">The object to be compared.</param>
            <param name="values">The value list to compare with the object.</param>
            <returns>true if the values list contains the object, else false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.NotIn(System.SByte,System.SByte[])">
            <summary>
                A T extension method to determines whether the object is not equal to any of the provided values.
            </summary>
            <param name="this">The object to be compared.</param>
            <param name="values">The value list to compare with the object.</param>
            <returns>true if the values list doesn't contains the object, else false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.Abs(System.Single)">
            <summary>
                Returns the absolute value of a single-precision floating-point number.
            </summary>
            <param name="value">A number that is greater than or equal to , but less than or equal to .</param>
            <returns>A single-precision floating-point number, x, such that 0 ? x ?.</returns>
        </member>
        <member name="M:Extensions.Max(System.Single,System.Single)">
            <summary>
                Returns the larger of two single-precision floating-point numbers.
            </summary>
            <param name="val1">The first of two single-precision floating-point numbers to compare.</param>
            <param name="val2">The second of two single-precision floating-point numbers to compare.</param>
            <returns>Parameter  or , whichever is larger. If , or , or both  and  are equal to ,  is returned.</returns>
        </member>
        <member name="M:Extensions.Min(System.Single,System.Single)">
            <summary>
                Returns the smaller of two single-precision floating-point numbers.
            </summary>
            <param name="val1">The first of two single-precision floating-point numbers to compare.</param>
            <param name="val2">The second of two single-precision floating-point numbers to compare.</param>
            <returns>Parameter  or , whichever is smaller. If , , or both  and  are equal to ,  is returned.</returns>
        </member>
        <member name="M:Extensions.Sign(System.Single)">
            <summary>
                Returns a value indicating the sign of a single-precision floating-point number.
            </summary>
            <param name="value">A signed number.</param>
            <returns>
                A number that indicates the sign of , as shown in the following table.Return value Meaning -1  is less than
                zero. 0  is equal to zero. 1  is greater than zero.
            </returns>
        </member>
        <member name="M:Extensions.IsInfinity(System.Single)">
            <summary>
                Returns a value indicating whether the specified number evaluates to negative or positive infinity.
            </summary>
            <param name="f">A single-precision floating-point number.</param>
            <returns>true if  evaluates to  or ; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.IsNaN(System.Single)">
            <summary>
                Returns a value that indicates whether the specified value is not a number ().
            </summary>
            <param name="f">A single-precision floating-point number.</param>
            <returns>true if  evaluates to not a number (); otherwise, false.</returns>
        </member>
        <member name="M:Extensions.IsNegativeInfinity(System.Single)">
            <summary>
                Returns a value indicating whether the specified number evaluates to negative infinity.
            </summary>
            <param name="f">A single-precision floating-point number.</param>
            <returns>true if  evaluates to ; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.IsPositiveInfinity(System.Single)">
            <summary>
                Returns a value indicating whether the specified number evaluates to positive infinity.
            </summary>
            <param name="f">A single-precision floating-point number.</param>
            <returns>true if  evaluates to ; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.Between(System.Single,System.Single,System.Single)">
            <summary>
                A T extension method that check if the value is between (exclusif) the minValue and maxValue.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns>true if the value is between the minValue and maxValue, otherwise false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.In(System.Single,System.Single[])">
            <summary>
                A T extension method to determines whether the object is equal to any of the provided values.
            </summary>
            <param name="this">The object to be compared.</param>
            <param name="values">The value list to compare with the object.</param>
            <returns>true if the values list contains the object, else false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.InRange(System.Single,System.Single,System.Single)">
            <summary>
                A T extension method that check if the value is between inclusively the minValue and maxValue.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns>true if the value is between inclusively the minValue and maxValue, otherwise false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.NotIn(System.Single,System.Single[])">
            <summary>
                A T extension method to determines whether the object is not equal to any of the provided values.
            </summary>
            <param name="this">The object to be compared.</param>
            <param name="values">The value list to compare with the object.</param>
            <returns>true if the values list doesn't contains the object, else false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.Br2Nl(System.String)">
            <summary>
                A string extension method that line break 2 newline.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Extensions.Concatenate(System.Collections.Generic.IEnumerable{System.String})">
            <summary>An IEnumerable&lt;string&gt; extension method that concatenates the given this.</summary>
            <param name="this">The @this to act on.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Extensions.Concatenate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>An IEnumerable&lt;T&gt; extension method that concatenates.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="source">The source to act on.</param>
            <param name="func">The function.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Extensions.ConcatWith(System.String,System.String[])">
            <summary>
                A string extension method that concatenate with.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="values">A variable-length parameters list containing values.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Extensions.Contains(System.String,System.String)">
            <summary>
                A string extension method that query if this object contains the given value.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="value">The value.</param>
            <returns>true if the value is in the string, false if not.</returns>
        </member>
        <member name="M:Extensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
                A string extension method that query if this object contains the given value.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="value">The value.</param>
            <param name="comparisonType">Type of the comparison.</param>
            <returns>true if the value is in the string, false if not.</returns>
        </member>
        <member name="M:Extensions.ContainsAll(System.String,System.String[])">
            <summary>
                A string extension method that query if '@this' contains all values.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="values">A variable-length parameters list containing values.</param>
            <returns>true if it contains all values, otherwise false.</returns>
        </member>
        <member name="M:Extensions.ContainsAll(System.String,System.StringComparison,System.String[])">
            <summary>
                A string extension method that query if this object contains the given @this.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="comparisonType">Type of the comparison.</param>
            <param name="values">A variable-length parameters list containing values.</param>
            <returns>true if it contains all values, otherwise false.</returns>
        </member>
        <member name="M:Extensions.ContainsAny(System.String,System.String[])">
            <summary>
                A string extension method that query if '@this' contains any values.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="values">A variable-length parameters list containing values.</param>
            <returns>true if it contains any values, otherwise false.</returns>
        </member>
        <member name="M:Extensions.ContainsAny(System.String,System.StringComparison,System.String[])">
            <summary>
                A string extension method that query if '@this' contains any values.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="comparisonType">Type of the comparison.</param>
            <param name="values">A variable-length parameters list containing values.</param>
            <returns>true if it contains any values, otherwise false.</returns>
        </member>
        <member name="M:Extensions.DecodeBase64(System.String)">
            <summary>
                A string extension method that decode a Base64 String.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The Base64 String decoded.</returns>
        </member>
        <member name="M:Extensions.DecryptRSA(System.String,System.String)">
            <summary>
                A string extension method that decrypt a string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="key">The key.</param>
            <returns>The decrypted string.</returns>
        </member>
        <member name="M:Extensions.EncodeBase64(System.String)">
            <summary>
                A string extension method that encode the string to Base64.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The encoded string to Base64.</returns>
        </member>
        <member name="M:Extensions.EncryptRSA(System.String,System.String)">
            <summary>
                A string extension method that encrypts the string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="key">The key.</param>
            <returns>The encrypted string.</returns>
        </member>
        <member name="M:Extensions.EscapeXml(System.String)">
            <summary>
                A string extension method that escape XML.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Extensions.Extract(System.String,System.Func{System.Char,System.Boolean})">
            <summary>
                A string extension method that extracts this object.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="predicate">The predicate.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Extensions.ExtractLetter(System.String)">
            <summary>
                A string extension method that extracts the letter described by @this.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The extracted letter.</returns>
        </member>
        <member name="M:Extensions.ExtractNumber(System.String)">
            <summary>
                A string extension method that extracts the number described by @this.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The extracted number.</returns>
        </member>
        <member name="M:Extensions.FormatWith(System.String,System.Object)">
            <summary>
                Replaces the format item in a specified String with the text equivalent of the value of a corresponding
                Object instance in a specified array.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="arg0">The argument 0.</param>
            <returns>
                A copy of format in which the format items have been replaced by the String equivalent of the corresponding
                instances of Object in args.
            </returns>
        </member>
        <member name="M:Extensions.FormatWith(System.String,System.Object,System.Object)">
            <summary>
                Replaces the format item in a specified String with the text equivalent of the value of a corresponding
                Object instance in a specified array.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="arg0">The argument 0.</param>
            <param name="arg1">The first argument.</param>
            <returns>
                A copy of format in which the format items have been replaced by the String equivalent of the corresponding
                instances of Object in args.
            </returns>
        </member>
        <member name="M:Extensions.FormatWith(System.String,System.Object,System.Object,System.Object)">
            <summary>
                Replaces the format item in a specified String with the text equivalent of the value of a corresponding
                Object instance in a specified array.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="arg0">The argument 0.</param>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <returns>
                A copy of format in which the format items have been replaced by the String equivalent of the corresponding
                instances of Object in args.
            </returns>
        </member>
        <member name="M:Extensions.FormatWith(System.String,System.Object[])">
            <summary>
                Replaces the format item in a specified String with the text equivalent of the value of a corresponding
                Object instance in a specified array.
            </summary>
            <param name="this">A String containing zero or more format items.</param>
            <param name="values">An Object array containing zero or more objects to format.</param>
            <returns>
                A copy of format in which the format items have been replaced by the String equivalent of the corresponding
                instances of Object in args.
            </returns>
        </member>
        <member name="M:Extensions.GetAfter(System.String,System.String)">
            <summary>
                A string extension method that get the string after the specified string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="value">The value to search.</param>
            <returns>The string after the specified value.</returns>
        </member>
        <member name="M:Extensions.GetBefore(System.String,System.String)">
            <summary>
                A string extension method that get the string before the specified string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="value">The value to search.</param>
            <returns>The string before the specified value.</returns>
        </member>
        <member name="M:Extensions.GetBetween(System.String,System.String,System.String)">
            <summary>
                A string extension method that get the string between the two specified string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="before">The string before to search.</param>
            <param name="after">The string after to search.</param>
            <returns>The string between the two specified string.</returns>
        </member>
        <member name="M:Extensions.IfEmpty(System.String,System.String)">
            <summary>
                A string extension method that if empty.
            </summary>
            <param name="value">The value to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Extensions.IsAlpha(System.String)">
            <summary>
                A string extension method that query if '@this' is Alpha.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if Alpha, false if not.</returns>
        </member>
        <member name="M:Extensions.IsAlphaNumeric(System.String)">
            <summary>
                A string extension method that query if '@this' is Alphanumeric.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if Alphanumeric, false if not.</returns>
        </member>
        <member name="M:Extensions.IsAnagram(System.String,System.String)">
            <summary>
                A string extension method that query if '@this' is anagram of other String.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="otherString">The other string</param>
            <returns>true if the @this is anagram of the otherString, false if not.</returns>
        </member>
        <member name="M:Extensions.IsEmpty(System.String)">
            <summary>
                A string extension method that query if '@this' is empty.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if empty, false if not.</returns>
        </member>
        <member name="M:Extensions.IsLike(System.String,System.String)">
            <summary>
                A string extension method that query if '@this' satisfy the specified pattern.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="pattern">The pattern to use. Use '*' as wildcard string.</param>
            <returns>true if '@this' satisfy the specified pattern, false if not.</returns>
        </member>
        <member name="M:Extensions.IsNotEmpty(System.String)">
            <summary>
                A string extension method that queries if a not is empty.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if a not is empty, false if not.</returns>
        </member>
        <member name="M:Extensions.IsNotNullOrEmpty(System.String)">
            <summary>
                A string extension method that queries if '@this' is not (null or empty).
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if '@this' is not (null or empty), false if not.</returns>
        </member>
        <member name="M:Extensions.IsNotNullOrWhiteSpace(System.String)">
            <summary>
                Indicates whether a specified string is not null, not empty, or not consists only of white-space characters.
            </summary>
            <param name="value">The string to test.</param>
            <returns>true if the  parameter is null or , or if  consists exclusively of white-space characters.</returns>
        </member>
        <member name="M:Extensions.IsNullOrEmpty(System.String)">
            <summary>
                A string extension method that queries if '@this' is null or is empty.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if '@this' is null or is empty, false if not.</returns>
        </member>
        <member name="M:Extensions.IsNumeric(System.String)">
            <summary>
                A string extension method that query if '@this' is numeric.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if numeric, false if not.</returns>
        </member>
        <member name="M:Extensions.IsPalindrome(System.String)">
            <summary>A string extension method that query if '@this' is palindrome.</summary>
            <param name="this">The @this to act on.</param>
            <returns>true if palindrome, false if not.</returns>
        </member>
        <member name="M:Extensions.Left(System.String,System.Int32)">
            <summary>
                A string extension method that return the left part of the string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="length">The length.</param>
            <returns>The left part.</returns>
        </member>
        <member name="M:Extensions.LeftSafe(System.String,System.Int32)">
            <summary>
                A string extension method that left safe.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="length">The length.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Extensions.Nl2Br(System.String)">
            <summary>
                A string extension method that newline 2 line break.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Extensions.NullIfEmpty(System.String)">
            <summary>
                A string extension method that return null if the value is empty else the value.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>null if the value is empty, otherwise the value.</returns>
        </member>
        <member name="M:Extensions.PathCombine(System.String,System.String[])">
            <summary>
                Combines multiples string into a path.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="paths">A variable-length parameters list containing paths.</param>
            <returns>
                The combined paths. If one of the specified paths is a zero-length string, this method returns the other path.
            </returns>
        </member>
        <member name="M:Extensions.RemoveDiacritics(System.String)">
            <summary>
                A string extension method that removes the diacritics character from the strings.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The string without diacritics character.</returns>
        </member>
        <member name="M:Extensions.RemoveLetter(System.String)">
            <summary>
                A string extension method that removes the letter described by @this.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Extensions.RemoveNumber(System.String)">
            <summary>
                A string extension method that removes the number described by @this.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Extensions.RemoveWhere(System.String,System.Func{System.Char,System.Boolean})">
            <summary>
                A string extension method that removes the letter.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="predicate">The predicate.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Extensions.Repeat(System.String,System.Int32)">
            <summary>
                A string extension method that repeats the string a specified number of times.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="repeatCount">Number of repeats.</param>
            <returns>The repeated string.</returns>
        </member>
        <member name="M:Extensions.Replace(System.String,System.Int32,System.Int32,System.String)">
            <summary>A string extension method that replaces.</summary>
            <param name="this">The @this to act on.</param>
            <param name="startIndex">The start index.</param>
            <param name="length">The length.</param>
            <param name="value">The value.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Extensions.ReplaceByEmpty(System.String,System.String[])">
            <summary>
                A string extension method that replace all values specified by an empty string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="values">A variable-length parameters list containing values.</param>
            <returns>A string with all specified values replaced by an empty string.</returns>
        </member>
        <member name="M:Extensions.ReplaceFirst(System.String,System.String,System.String)">
            <summary>
                A string extension method that replace first occurence.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <returns>The string with the first occurence of old value replace by new value.</returns>
        </member>
        <member name="M:Extensions.ReplaceFirst(System.String,System.Int32,System.String,System.String)">
            <summary>
                A string extension method that replace first number of occurences.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="number">Number of.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <returns>The string with the numbers of occurences of old value replace by new value.</returns>
        </member>
        <member name="M:Extensions.ReplaceLast(System.String,System.String,System.String)">
            <summary>
                A string extension method that replace last occurence.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <returns>The string with the last occurence of old value replace by new value.</returns>
        </member>
        <member name="M:Extensions.ReplaceLast(System.String,System.Int32,System.String,System.String)">
            <summary>
                A string extension method that replace last numbers occurences.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="number">Number of.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <returns>The string with the last numbers occurences of old value replace by new value.</returns>
        </member>
        <member name="M:Extensions.ReplaceWhenEquals(System.String,System.String,System.String)">
            <summary>
                A string extension method that replace when equals.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <returns>The new value if the string equal old value; Otherwise old value.</returns>
        </member>
        <member name="M:Extensions.Reverse(System.String)">
            <summary>
                A string extension method that reverses the given string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The string reversed.</returns>
        </member>
        <member name="M:Extensions.Right(System.String,System.Int32)">
            <summary>
                A string extension method that return the right part of the string.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="length">The length.</param>
            <returns>The right part.</returns>
        </member>
        <member name="M:Extensions.RightSafe(System.String,System.Int32)">
            <summary>
                A string extension method that right safe.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="length">The length.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Extensions.SaveAs(System.String,System.String,System.Boolean)">
            <summary>
                A string extension method that save the string into a file.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="fileName">Filename of the file.</param>
            <param name="append">(Optional) if the text should be appended to file file if it's exists.</param>
        </member>
        <member name="M:Extensions.SaveAs(System.String,System.IO.FileInfo,System.Boolean)">
            <summary>
                A string extension method that save the string into a file.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="file">The FileInfo.</param>
            <param name="append">(Optional) if the text should be appended to file file if it's exists.</param>
        </member>
        <member name="M:Extensions.Split(System.String,System.String,System.StringSplitOptions)">
            <summary>
                Returns a String array containing the substrings in this string that are delimited by elements of a specified
                String array. A parameter specifies whether to return empty array elements.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="separator">A string that delimit the substrings in this string.</param>
            <param name="option">
                (Optional) Specify RemoveEmptyEntries to omit empty array elements from the array returned,
                or None to include empty array elements in the array returned.
            </param>
            <returns>
                An array whose elements contain the substrings in this string that are delimited by the separator.
            </returns>
        </member>
        <member name="M:Extensions.StripHtml(System.String)">
            <summary>A string extension method that strip HTML.</summary>
            <param name="this">The @this to act on.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Extensions.ToByteArray(System.String)">
            <summary>
                A string extension method that converts the @this to a byte array.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a byte[].</returns>
        </member>
        <member name="M:Extensions.ToDirectoryInfo(System.String)">
            <summary>
                A string extension method that converts the @this to a directory information.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a DirectoryInfo.</returns>
        </member>
        <member name="M:Extensions.ToEnum``1(System.String)">
            <summary>
                A string extension method that converts the @this to an enum.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>@this as a T.</returns>
        </member>
        <member name="M:Extensions.ToFileInfo(System.String)">
            <summary>
                A string extension method that converts the @this to a file information.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a FileInfo.</returns>
        </member>
        <member name="M:Extensions.ToMemoryStream(System.String)">
            <summary>
                A string extension method that converts the @this to a MemoryStream.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a MemoryStream.</returns>
        </member>
        <member name="M:Extensions.ToPlural(System.String)">
            <summary>
                A string extension method that converts the @this to a plural.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a string.</returns>
        </member>
        <member name="M:Extensions.ToPlural(System.String,System.Globalization.CultureInfo)">
            <summary>
                A string extension method that converts the @this to a plural.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cultureInfo">Information describing the culture.</param>
            <returns>@this as a string.</returns>
        </member>
        <member name="M:Extensions.ToSecureString(System.String)">
            <summary>
                A String extension method that converts the @this to a secure string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a SecureString.</returns>
        </member>
        <member name="M:Extensions.ToTitleCase(System.String)">
            <summary>
                A string extension method that converts the @this to a title case.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a string.</returns>
        </member>
        <member name="M:Extensions.ToTitleCase(System.String,System.Globalization.CultureInfo)">
            <summary>
                A string extension method that converts the @this to a title case.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cultureInfo">Information describing the culture.</param>
            <returns>@this as a string.</returns>
        </member>
        <member name="M:Extensions.ToValidDateTimeOrNull(System.String)">
            <summary>
            A string extension method that converts the @this to a valid date time or null.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a DateTime?</returns>
        </member>
        <member name="M:Extensions.ToXDocument(System.String)">
            <summary>
                A string extension method that converts the @this to a XDocument.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as an XDocument.</returns>
        </member>
        <member name="M:Extensions.ToXmlDocument(System.String)">
            <summary>
                A string extension method that converts the @this to an XmlDocument.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as an XmlDocument.</returns>
        </member>
        <member name="M:Extensions.Truncate(System.String,System.Int32)">
            <summary>
                A string extension method that truncates.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="maxLength">The maximum length.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Extensions.Truncate(System.String,System.Int32,System.String)">
            <summary>
                A string extension method that truncates.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="maxLength">The maximum length.</param>
            <param name="suffix">The suffix.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Extensions.ConvertToUtf32(System.String,System.Int32)">
            <summary>
                Converts the value of a UTF-16 encoded character or surrogate pair at a specified position in a string into a
                Unicode code point.
            </summary>
            <param name="s">A string that contains a character or surrogate pair.</param>
            <param name="index">The index position of the character or surrogate pair in .</param>
            <returns>
                The 21-bit Unicode code point represented by the character or surrogate pair at the position in the parameter
                specified by the  parameter.
            </returns>
        </member>
        <member name="M:Extensions.GetNumericValue(System.String,System.Int32)">
            <summary>
                Converts the numeric Unicode character at the specified position in a specified string to a double-precision
                floating point number.
            </summary>
            <param name="s">A .</param>
            <param name="index">The character position in .</param>
            <returns>
                The numeric value of the character at position  in  if that character represents a number; otherwise, -1.
            </returns>
        </member>
        <member name="M:Extensions.GetUnicodeCategory(System.String,System.Int32)">
            <summary>
                Categorizes the character at the specified position in a specified string into a group identified by one of
                the  values.
            </summary>
            <param name="s">A .</param>
            <param name="index">The character position in .</param>
            <returns>A  enumerated constant that identifies the group that contains the character at position  in .</returns>
        </member>
        <member name="M:Extensions.IsControl(System.String,System.Int32)">
            <summary>
                Indicates whether the character at the specified position in a specified string is categorized as a control
                character.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The position of the character to evaluate in .</param>
            <returns>true if the character at position  in  is a control character; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.IsDigit(System.String,System.Int32)">
            <summary>
                Indicates whether the character at the specified position in a specified string is categorized as a decimal
                digit.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The position of the character to evaluate in .</param>
            <returns>true if the character at position  in  is a decimal digit; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.IsHighSurrogate(System.String,System.Int32)">
            <summary>
                Indicates whether the  object at the specified position in a string is a high surrogate.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The position of the character to evaluate in .</param>
            <returns>
                true if the numeric value of the specified character in the  parameter ranges from U+D800 through U+DBFF;
                otherwise, false.
            </returns>
        </member>
        <member name="M:Extensions.IsLetter(System.String,System.Int32)">
            <summary>
                Indicates whether the character at the specified position in a specified string is categorized as a Unicode
                letter.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The position of the character to evaluate in .</param>
            <returns>true if the character at position  in  is a letter; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.IsLetterOrDigit(System.String,System.Int32)">
            <summary>
                Indicates whether the character at the specified position in a specified string is categorized as a letter or
                a decimal digit.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The position of the character to evaluate in .</param>
            <returns>true if the character at position  in  is a letter or a decimal digit; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.IsLower(System.String,System.Int32)">
            <summary>
                Indicates whether the character at the specified position in a specified string is categorized as a lowercase
                letter.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The position of the character to evaluate in .</param>
            <returns>true if the character at position  in  is a lowercase letter; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.IsLowSurrogate(System.String,System.Int32)">
            <summary>
                Indicates whether the  object at the specified position in a string is a low surrogate.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The position of the character to evaluate in .</param>
            <returns>
                true if the numeric value of the specified character in the  parameter ranges from U+DC00 through U+DFFF;
                otherwise, false.
            </returns>
        </member>
        <member name="M:Extensions.IsNumber(System.String,System.Int32)">
            <summary>
                Indicates whether the character at the specified position in a specified string is categorized as a number.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The position of the character to evaluate in .</param>
            <returns>true if the character at position  in  is a number; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.IsPunctuation(System.String,System.Int32)">
            <summary>
                Indicates whether the character at the specified position in a specified string is categorized as a
                punctuation mark.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The position of the character to evaluate in .</param>
            <returns>true if the character at position  in  is a punctuation mark; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.IsSeparator(System.String,System.Int32)">
            <summary>
                Indicates whether the character at the specified position in a specified string is categorized as a separator
                character.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The position of the character to evaluate in .</param>
            <returns>true if the character at position  in  is a separator character; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.IsSurrogate(System.String,System.Int32)">
            <summary>
                Indicates whether the character at the specified position in a specified string has a surrogate code unit.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The position of the character to evaluate in .</param>
            <returns>
                true if the character at position  in  is a either a high surrogate or a low surrogate; otherwise, false.
            </returns>
        </member>
        <member name="M:Extensions.IsSurrogatePair(System.String,System.Int32)">
            <summary>
                Indicates whether two adjacent  objects at a specified position in a string form a surrogate pair.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The starting position of the pair of characters to evaluate within .</param>
            <returns>
                true if the  parameter includes adjacent characters at positions  and  + 1, and the numeric value of the
                character at position  ranges from U+D800 through U+DBFF, and the numeric value of the character at position
                +1 ranges from U+DC00 through U+DFFF; otherwise, false.
            </returns>
        </member>
        <member name="M:Extensions.IsSymbol(System.String,System.Int32)">
            <summary>
                Indicates whether the character at the specified position in a specified string is categorized as a symbol
                character.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The position of the character to evaluate in .</param>
            <returns>true if the character at position  in  is a symbol character; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.IsUpper(System.String,System.Int32)">
            <summary>
                Indicates whether the character at the specified position in a specified string is categorized as an
                uppercase letter.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The position of the character to evaluate in .</param>
            <returns>true if the character at position  in  is an uppercase letter; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.IsWhiteSpace(System.String,System.Int32)">
            <summary>
                Indicates whether the character at the specified position in a specified string is categorized as white space.
            </summary>
            <param name="s">A string.</param>
            <param name="index">The position of the character to evaluate in .</param>
            <returns>true if the character at position  in  is white space; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.CompareOrdinal(System.String,System.String)">
            <summary>
                Compares two specified  objects by evaluating the numeric values of the corresponding  objects in each string.
            </summary>
            <param name="strA">The first string to compare.</param>
            <param name="strB">The second string to compare.</param>
            <returns>
                An integer that indicates the lexical relationship between the two comparands.ValueCondition Less than zero
                is less than . Zero  and  are equal. Greater than zero  is greater than .
            </returns>
        </member>
        <member name="M:Extensions.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
                Compares substrings of two specified  objects by evaluating the numeric values of the corresponding  objects
                in each substring.
            </summary>
            <param name="strA">The first string to use in the comparison.</param>
            <param name="indexA">The starting index of the substring in .</param>
            <param name="strB">The second string to use in the comparison.</param>
            <param name="indexB">The starting index of the substring in .</param>
            <param name="length">The maximum number of characters in the substrings to compare.</param>
            <returns>
                A 32-bit signed integer that indicates the lexical relationship between the two comparands.ValueCondition
                Less than zero The substring in  is less than the substring in . Zero The substrings are equal, or  is zero.
                Greater than zero The substring in  is greater than the substring in .
            </returns>
        </member>
        <member name="M:Extensions.Concat(System.String,System.String)">
            <summary>
                Concatenates two specified instances of .
            </summary>
            <param name="str0">The first string to concatenate.</param>
            <param name="str1">The second string to concatenate.</param>
            <returns>The concatenation of  and .</returns>
        </member>
        <member name="M:Extensions.Concat(System.String,System.String,System.String)">
            <summary>
                Concatenates three specified instances of .
            </summary>
            <param name="str0">The first string to concatenate.</param>
            <param name="str1">The second string to concatenate.</param>
            <param name="str2">The third string to concatenate.</param>
            <returns>The concatenation of , , and .</returns>
        </member>
        <member name="M:Extensions.Concat(System.String,System.String,System.String,System.String)">
            <summary>
                Concatenates four specified instances of .
            </summary>
            <param name="str0">The first string to concatenate.</param>
            <param name="str1">The second string to concatenate.</param>
            <param name="str2">The third string to concatenate.</param>
            <param name="str3">The fourth string to concatenate.</param>
            <returns>The concatenation of , , , and .</returns>
        </member>
        <member name="M:Extensions.Copy(System.String)">
            <summary>
                Creates a new instance of  with the same value as a specified .
            </summary>
            <param name="str">The string to copy.</param>
            <returns>A new string with the same value as .</returns>
        </member>
        <member name="M:Extensions.Format(System.String,System.Object)">
            <summary>
                Replaces one or more format items in a specified string with the string representation of a specified object.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The object to format.</param>
            <returns>A copy of  in which any format items are replaced by the string representation of .</returns>
        </member>
        <member name="M:Extensions.Format(System.String,System.Object,System.Object)">
            <summary>
                Replaces the format items in a specified string with the string representation of two specified objects.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
            <returns>A copy of  in which format items are replaced by the string representations of  and .</returns>
        </member>
        <member name="M:Extensions.Format(System.String,System.Object,System.Object,System.Object)">
            <summary>
                Replaces the format items in a specified string with the string representation of three specified objects.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
            <param name="arg2">The third object to format.</param>
            <returns>
                A copy of  in which the format items have been replaced by the string representations of , , and .
            </returns>
        </member>
        <member name="M:Extensions.Format(System.String,System.Object[])">
            <summary>
                Replaces the format item in a specified string with the string representation of a corresponding object in a
                specified array.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>
                A copy of  in which the format items have been replaced by the string representation of the corresponding
                objects in .
            </returns>
        </member>
        <member name="M:Extensions.Intern(System.String)">
            <summary>
                Retrieves the system&#39;s reference to the specified .
            </summary>
            <param name="str">A string to search for in the intern pool.</param>
            <returns>
                The system&#39;s reference to , if it is interned; otherwise, a new reference to a string with the value of .
            </returns>
        </member>
        <member name="M:Extensions.IsInterned(System.String)">
            <summary>
                Retrieves a reference to a specified .
            </summary>
            <param name="str">The string to search for in the intern pool.</param>
            <returns>A reference to  if it is in the common language runtime intern pool; otherwise, null.</returns>
        </member>
        <member name="M:Extensions.IsNullOrWhiteSpace(System.String)">
            <summary>
                Indicates whether a specified string is null, empty, or consists only of white-space characters.
            </summary>
            <param name="value">The string to test.</param>
            <returns>true if the  parameter is null or , or if  consists exclusively of white-space characters.</returns>
        </member>
        <member name="M:Extensions.Join(System.String,System.String[])">
            <summary>
                Concatenates all the elements of a string array, using the specified separator between each element.
            </summary>
            <param name="separator">
                The string to use as a separator.  is included in the returned string only if  has more
                than one element.
            </param>
            <param name="value">An array that contains the elements to concatenate.</param>
            <returns>
                A string that consists of the elements in  delimited by the  string. If  is an empty array, the method
                returns .
            </returns>
        </member>
        <member name="M:Extensions.Join(System.String,System.Object[])">
            <summary>
                Concatenates the elements of an object array, using the specified separator between each element.
            </summary>
            <param name="separator">
                The string to use as a separator.  is included in the returned string only if  has more
                than one element.
            </param>
            <param name="values">An array that contains the elements to concatenate.</param>
            <returns>
                A string that consists of the elements of  delimited by the  string. If  is an empty array, the method
                returns .
            </returns>
        </member>
        <member name="M:Extensions.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
                A String extension method that joins.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="separator">
                The string to use as a separator.  is included in the returned string only if  has more
                than one element.
            </param>
            <param name="values">An array that contains the elements to concatenate.</param>
            <returns>A String.</returns>
        </member>
        <member name="M:Extensions.Join(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Concatenates all the elements of a string array, using the specified separator between each element.
            </summary>
            <param name="separator">
                The string to use as a separator.  is included in the returned string only if  has more
                than one element.
            </param>
            <param name="values">An array that contains the elements to concatenate.</param>
            <returns>
                A string that consists of the elements in  delimited by the  string. If  is an empty array, the method
                returns .
            </returns>
        </member>
        <member name="M:Extensions.Join(System.String,System.String[],System.Int32,System.Int32)">
            <summary>
                Concatenates the specified elements of a string array, using the specified separator between each element.
            </summary>
            <param name="separator">
                The string to use as a separator.  is included in the returned string only if  has more
                than one element.
            </param>
            <param name="value">An array that contains the elements to concatenate.</param>
            <param name="startIndex">The first element in  to use.</param>
            <param name="count">The number of elements of  to use.</param>
            <returns>
                A string that consists of the strings in  delimited by the  string. -or- if  is zero,  has no elements, or
                and all the elements of  are .
            </returns>
        </member>
        <member name="M:Extensions.IsMatch(System.String,System.String)">
            <summary>
                Indicates whether the specified regular expression finds a match in the specified input string.
            </summary>
            <param name="input">The string to search for a match.</param>
            <param name="pattern">The regular expression pattern to match.</param>
            <returns>true if the regular expression finds a match; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
                Indicates whether the specified regular expression finds a match in the specified input string, using the
                specified matching options.
            </summary>
            <param name="input">The string to search for a match.</param>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">A bitwise combination of the enumeration values that provide options for matching.</param>
            <returns>true if the regular expression finds a match; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.Match(System.String,System.String)">
            <summary>
                Searches the specified input string for the first occurrence of the specified regular expression.
            </summary>
            <param name="input">The string to search for a match.</param>
            <param name="pattern">The regular expression pattern to match.</param>
            <returns>An object that contains information about the match.</returns>
        </member>
        <member name="M:Extensions.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
                Searches the input string for the first occurrence of the specified regular expression, using the specified
                matching options.
            </summary>
            <param name="input">The string to search for a match.</param>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">A bitwise combination of the enumeration values that provide options for matching.</param>
            <returns>An object that contains information about the match.</returns>
        </member>
        <member name="M:Extensions.Matches(System.String,System.String)">
            <summary>
                Searches the specified input string for all occurrences of a specified regular expression.
            </summary>
            <param name="input">The string to search for a match.</param>
            <param name="pattern">The regular expression pattern to match.</param>
            <returns>
                A collection of the  objects found by the search. If no matches are found, the method returns an empty
                collection object.
            </returns>
        </member>
        <member name="M:Extensions.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
                Searches the specified input string for all occurrences of a specified regular expression, using the
                specified matching options.
            </summary>
            <param name="input">The string to search for a match.</param>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">A bitwise combination of the enumeration values that specify options for matching.</param>
            <returns>
                A collection of the  objects found by the search. If no matches are found, the method returns an empty
                collection object.
            </returns>
        </member>
        <member name="M:Extensions.HtmlAttributeEncode(System.String)">
            <summary>
                Minimally converts a string to an HTML-encoded string.
            </summary>
            <param name="s">The string to encode.</param>
            <returns>An encoded string.</returns>
        </member>
        <member name="M:Extensions.HtmlAttributeEncode(System.String,System.IO.TextWriter)">
            <summary>
                Minimally converts a string into an HTML-encoded string and sends the encoded string to a  output stream.
            </summary>
            <param name="s">The string to encode.</param>
            <param name="output">A  output stream.</param>
        </member>
        <member name="M:Extensions.HtmlDecode(System.String)">
            <summary>
                Converts a string that has been HTML-encoded for HTTP transmission into a decoded string.
            </summary>
            <param name="s">The string to decode.</param>
            <returns>A decoded string.</returns>
        </member>
        <member name="M:Extensions.HtmlDecode(System.String,System.IO.TextWriter)">
            <summary>
                Converts a string that has been HTML-encoded into a decoded string, and sends the decoded string to a  output
                stream.
            </summary>
            <param name="s">The string to decode.</param>
            <param name="output">A  stream of output.</param>
        </member>
        <member name="M:Extensions.HtmlEncode(System.String)">
            <summary>
                Converts a string to an HTML-encoded string.
            </summary>
            <param name="s">The string to encode.</param>
            <returns>An encoded string.</returns>
        </member>
        <member name="M:Extensions.HtmlEncode(System.String,System.IO.TextWriter)">
            <summary>
                Converts a string into an HTML-encoded string, and returns the output as a  stream of output.
            </summary>
            <param name="s">The string to encode.</param>
            <param name="output">A  output stream.</param>
        </member>
        <member name="M:Extensions.JavaScriptStringEncode(System.String)">
            <summary>
                Encodes a string.
            </summary>
            <param name="value">A string to encode.</param>
            <returns>An encoded string.</returns>
        </member>
        <member name="M:Extensions.JavaScriptStringEncode(System.String,System.Boolean)">
            <summary>
                Encodes a string.
            </summary>
            <param name="value">A string to encode.</param>
            <param name="addDoubleQuotes">
                A value that indicates whether double quotation marks will be included around the
                encoded string.
            </param>
            <returns>An encoded string.</returns>
        </member>
        <member name="M:Extensions.ParseQueryString(System.String)">
            <summary>
                Parses a query string into a  using  encoding.
            </summary>
            <param name="query">The query string to parse.</param>
            <returns>A  of query parameters and values.</returns>
        </member>
        <member name="M:Extensions.ParseQueryString(System.String,System.Text.Encoding)">
            <summary>
                Parses a query string into a  using the specified .
            </summary>
            <param name="query">The query string to parse.</param>
            <param name="encoding">The  to use.</param>
            <returns>A  of query parameters and values.</returns>
        </member>
        <member name="M:Extensions.UrlDecode(System.String)">
            <summary>
                Converts a string that has been encoded for transmission in a URL into a decoded string.
            </summary>
            <param name="str">The string to decode.</param>
            <returns>A decoded string.</returns>
        </member>
        <member name="M:Extensions.UrlDecode(System.String,System.Text.Encoding)">
            <summary>
                Converts a URL-encoded string into a decoded string, using the specified encoding object.
            </summary>
            <param name="str">The string to decode.</param>
            <param name="e">The  that specifies the decoding scheme.</param>
            <returns>A decoded string.</returns>
        </member>
        <member name="M:Extensions.UrlDecodeToBytes(System.String)">
            <summary>
                Converts a URL-encoded string into a decoded array of bytes.
            </summary>
            <param name="str">The string to decode.</param>
            <returns>A decoded array of bytes.</returns>
        </member>
        <member name="M:Extensions.UrlDecodeToBytes(System.String,System.Text.Encoding)">
            <summary>
                Converts a URL-encoded string into a decoded array of bytes using the specified decoding object.
            </summary>
            <param name="str">The string to decode.</param>
            <param name="e">The  object that specifies the decoding scheme.</param>
            <returns>A decoded array of bytes.</returns>
        </member>
        <member name="M:Extensions.UrlEncode(System.String)">
            <summary>
                Encodes a URL string.
            </summary>
            <param name="str">The text to encode.</param>
            <returns>An encoded string.</returns>
        </member>
        <member name="M:Extensions.UrlEncode(System.String,System.Text.Encoding)">
            <summary>
                Encodes a URL string using the specified encoding object.
            </summary>
            <param name="str">The text to encode.</param>
            <param name="e">The  object that specifies the encoding scheme.</param>
            <returns>An encoded string.</returns>
        </member>
        <member name="M:Extensions.UrlEncodeToBytes(System.String)">
            <summary>
                Converts a string into a URL-encoded array of bytes.
            </summary>
            <param name="str">The string to encode.</param>
            <returns>An encoded array of bytes.</returns>
        </member>
        <member name="M:Extensions.UrlEncodeToBytes(System.String,System.Text.Encoding)">
            <summary>
                Converts a string into a URL-encoded array of bytes using the specified encoding object.
            </summary>
            <param name="str">The string to encode.</param>
            <param name="e">The  that specifies the encoding scheme.</param>
            <returns>An encoded array of bytes.</returns>
        </member>
        <member name="M:Extensions.UrlPathEncode(System.String)">
            <summary>
                Encodes the path portion of a URL string for reliable HTTP transmission from the Web server to a client.
            </summary>
            <param name="str">The text to encode.</param>
            <returns>The encoded text.</returns>
        </member>
        <member name="M:Extensions.IsValidEmail(System.String)">
            <summary>
                A string extension method that query if 'obj' is valid email.
            </summary>
            <param name="obj">The obj to act on.</param>
            <returns>true if valid email, false if not.</returns>
        </member>
        <member name="M:Extensions.IsValidIP(System.String)">
            <summary>
                A string extension method that query if 'obj' is valid IP.
            </summary>
            <param name="obj">The obj to act on.</param>
            <returns>true if valid ip, false if not.</returns>
        </member>
        <member name="M:Extensions.In(System.String,System.String[])">
            <summary>
                A T extension method to determines whether the object is equal to any of the provided values.
            </summary>
            <param name="this">The object to be compared.</param>
            <param name="values">The value list to compare with the object.</param>
            <returns>true if the values list contains the object, else false.</returns>
        </member>
        <member name="M:Extensions.IsNotNull(System.String)">
            <summary>
                A T extension method that query if '@this' is not null.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if not null, false if not.</returns>
        </member>
        <member name="M:Extensions.IsNull(System.String)">
            <summary>
                A T extension method that query if '@this' is null.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>true if null, false if not.</returns>
        </member>
        <member name="M:Extensions.NotIn(System.String,System.String[])">
            <summary>
                A T extension method to determines whether the object is not equal to any of the provided values.
            </summary>
            <param name="this">The object to be compared.</param>
            <param name="values">The value list to compare with the object.</param>
            <returns>true if the values list doesn't contains the object, else false.</returns>
        </member>
        <member name="M:Extensions.ExtractDecimal(System.String)">
            <summary>
                A string extension method that extracts the Decimal from the string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The extracted Decimal.</returns>
        </member>
        <member name="M:Extensions.ExtractDouble(System.String)">
            <summary>
                A string extension method that extracts the Double from the string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The extracted Double.</returns>
        </member>
        <member name="M:Extensions.ExtractInt16(System.String)">
            <summary>
                A string extension method that extracts the Int16 from the string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The extracted Int16.</returns>
        </member>
        <member name="M:Extensions.ExtractInt32(System.String)">
            <summary>
                A string extension method that extracts the Int32 from the string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The extracted Int32.</returns>
        </member>
        <member name="M:Extensions.ExtractInt64(System.String)">
            <summary>
                A string extension method that extracts the Int64 from the string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The extracted Int64.</returns>
        </member>
        <member name="M:Extensions.ExtractManyDecimal(System.String)">
            <summary>
                A string extension method that extracts all Decimal from the string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>All extracted Decimal.</returns>
        </member>
        <member name="M:Extensions.ExtractManyDouble(System.String)">
            <summary>
                A string extension method that extracts all Double from the string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>All extracted Double.</returns>
        </member>
        <member name="M:Extensions.ExtractManyInt16(System.String)">
            <summary>
                A string extension method that extracts all Int16 from the string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>All extracted Int16.</returns>
        </member>
        <member name="M:Extensions.ExtractManyInt32(System.String)">
            <summary>
                A string extension method that extracts all Int32 from the string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>All extracted Int32.</returns>
        </member>
        <member name="M:Extensions.ExtractManyInt64(System.String)">
            <summary>
                A string extension method that extracts all Int64 from the string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>All extracted Int64.</returns>
        </member>
        <member name="M:Extensions.ExtractManyUInt16(System.String)">
            <summary>
                A string extension method that extracts all UInt16 from the string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>All extracted UInt16.</returns>
        </member>
        <member name="M:Extensions.ExtractManyUInt32(System.String)">
            <summary>
                A string extension method that extracts all UInt32 from the string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>All extracted UInt32.</returns>
        </member>
        <member name="M:Extensions.ExtractManyUInt64(System.String)">
            <summary>
                A string extension method that extracts all UInt64 from the string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>All extracted UInt64.</returns>
        </member>
        <member name="M:Extensions.ExtractUInt16(System.String)">
            <summary>
                A string extension method that extracts the UInt16 from the string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The extracted UInt16.</returns>
        </member>
        <member name="M:Extensions.ExtractUInt32(System.String)">
            <summary>
                A string extension method that extracts the UInt32 from the string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The extracted UInt32.</returns>
        </member>
        <member name="M:Extensions.ExtractUInt64(System.String)">
            <summary>
                A string extension method that extracts the UInt64 from the string.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The extracted UInt64.</returns>
        </member>
        <member name="M:Extensions.ExtractChar(System.Text.StringBuilder)">
            <summary>A StringBuilder extension method that extracts the character described by @this.</summary>
            <param name="this">The @this to act on.</param>
            <returns>The extracted character.</returns>
        </member>
        <member name="M:Extensions.ExtractChar(System.Text.StringBuilder,System.Int32@)">
            <summary>A StringBuilder extension method that extracts the character described by @this.</summary>
            <param name="this">The @this to act on.</param>
            <param name="endIndex">[out] The end index.</param>
            <returns>The extracted character.</returns>
        </member>
        <member name="M:Extensions.ExtractChar(System.Text.StringBuilder,System.Int32)">
            <summary>A StringBuilder extension method that extracts the character described by @this.</summary>
            <param name="this">The @this to act on.</param>
            <param name="startIndex">The start index.</param>
            <returns>The extracted character.</returns>
        </member>
        <member name="M:Extensions.ExtractChar(System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>A StringBuilder extension method that extracts the character described by @this.</summary>
            <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            <param name="this">The @this to act on.</param>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">[out] The end index.</param>
            <returns>The extracted character.</returns>
        </member>
        <member name="M:Extensions.ExtractComment(System.Text.StringBuilder)">
            <summary>A StringBuilder extension method that extracts the comment described by @this.</summary>
            <param name="this">The @this to act on.</param>
            <returns>The extracted comment.</returns>
        </member>
        <member name="M:Extensions.ExtractComment(System.Text.StringBuilder,System.Int32@)">
            <summary>A StringBuilder extension method that extracts the comment described by @this.</summary>
            <param name="this">The @this to act on.</param>
            <param name="endIndex">[out] The end index.</param>
            <returns>The extracted comment.</returns>
        </member>
        <member name="M:Extensions.ExtractComment(System.Text.StringBuilder,System.Int32)">
            <summary>A StringBuilder extension method that extracts the comment described by @this.</summary>
            <param name="this">The @this to act on.</param>
            <param name="startIndex">The start index.</param>
            <returns>The extracted comment.</returns>
        </member>
        <member name="M:Extensions.ExtractComment(System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>A StringBuilder extension method that extracts the comment described by @this.</summary>
            <param name="this">The @this to act on.</param>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">[out] The end index.</param>
            <returns>The extracted comment.</returns>
        </member>
        <member name="M:Extensions.ExtractCommentMultiLine(System.Text.StringBuilder)">
            <summary>
                A StringBuilder extension method that extracts the comment multi line described by
                @this.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The extracted comment multi line.</returns>
        </member>
        <member name="M:Extensions.ExtractCommentMultiLine(System.Text.StringBuilder,System.Int32@)">
            <summary>
                A StringBuilder extension method that extracts the comment multi line described by
                @this.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="endIndex">[out] The end index.</param>
            <returns>The extracted comment multi line.</returns>
        </member>
        <member name="M:Extensions.ExtractCommentMultiLine(System.Text.StringBuilder,System.Int32)">
            <summary>
                A StringBuilder extension method that extracts the comment multi line described by
                @this.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="startIndex">The start index.</param>
            <returns>The extracted comment multi line.</returns>
        </member>
        <member name="M:Extensions.ExtractCommentMultiLine(System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>
                A StringBuilder extension method that extracts the comment multi line described by
                @this.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">[out] The end index.</param>
            <returns>The extracted comment multi line.</returns>
        </member>
        <member name="M:Extensions.ExtractCommentSingleLine(System.Text.StringBuilder)">
            <summary>
                A StringBuilder extension method that extracts the comment single line described by
                @this.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The extracted comment single line.</returns>
        </member>
        <member name="M:Extensions.ExtractCommentSingleLine(System.Text.StringBuilder,System.Int32@)">
            <summary>
                A StringBuilder extension method that extracts the comment single line described by
                @this.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="endIndex">[out] The end index.</param>
            <returns>The extracted comment single line.</returns>
        </member>
        <member name="M:Extensions.ExtractCommentSingleLine(System.Text.StringBuilder,System.Int32)">
            <summary>
                A StringBuilder extension method that extracts the comment single line described by
                @this.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="startIndex">The start index.</param>
            <returns>The extracted comment single line.</returns>
        </member>
        <member name="M:Extensions.ExtractCommentSingleLine(System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>
                A StringBuilder extension method that extracts the comment single line described by
                @this.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">[out] The end index.</param>
            <returns>The extracted comment single line.</returns>
        </member>
        <member name="M:Extensions.ExtractHexadecimal(System.Text.StringBuilder)">
            <summary>A StringBuilder extension method that extracts the hexadecimal described by @this.</summary>
            <param name="this">The @this to act on.</param>
            <returns>The extracted hexadecimal.</returns>
        </member>
        <member name="M:Extensions.ExtractHexadecimal(System.Text.StringBuilder,System.Int32@)">
            <summary>A StringBuilder extension method that extracts the hexadecimal described by @this.</summary>
            <param name="this">The @this to act on.</param>
            <param name="endIndex">[out] The end index.</param>
            <returns>The extracted hexadecimal.</returns>
        </member>
        <member name="M:Extensions.ExtractHexadecimal(System.Text.StringBuilder,System.Int32)">
            <summary>A StringBuilder extension method that extracts the hexadecimal described by @this.</summary>
            <param name="this">The @this to act on.</param>
            <param name="startIndex">The start index.</param>
            <returns>The extracted hexadecimal.</returns>
        </member>
        <member name="M:Extensions.ExtractHexadecimal(System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>A StringBuilder extension method that extracts the hexadecimal described by @this.</summary>
            <param name="this">The @this to act on.</param>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">[out] The end index.</param>
            <returns>The extracted hexadecimal.</returns>
        </member>
        <member name="M:Extensions.ExtractKeyword(System.Text.StringBuilder)">
            <summary>A StringBuilder extension method that extracts the keyword described by @this.</summary>
            <param name="this">The @this to act on.</param>
            <returns>The extracted keyword.</returns>
        </member>
        <member name="M:Extensions.ExtractKeyword(System.Text.StringBuilder,System.Int32@)">
            <summary>A StringBuilder extension method that extracts the keyword described by @this.</summary>
            <param name="this">The @this to act on.</param>
            <param name="endIndex">[out] The end index.</param>
            <returns>The extracted keyword.</returns>
        </member>
        <member name="M:Extensions.ExtractKeyword(System.Text.StringBuilder,System.Int32)">
            <summary>A StringBuilder extension method that extracts the keyword described by @this.</summary>
            <param name="this">The @this to act on.</param>
            <param name="startIndex">The start index.</param>
            <returns>The extracted keyword.</returns>
        </member>
        <member name="M:Extensions.ExtractKeyword(System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>A StringBuilder extension method that extracts the keyword described by @this.</summary>
            <param name="this">The @this to act on.</param>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">[out] The end index.</param>
            <returns>The extracted keyword.</returns>
        </member>
        <member name="M:Extensions.ExtractNumber(System.Text.StringBuilder)">
            <summary>A StringBuilder extension method that extracts the number described by @this.</summary>
            <param name="this">The @this to act on.</param>
            <returns>The extracted number.</returns>
        </member>
        <member name="M:Extensions.ExtractNumber(System.Text.StringBuilder,System.Int32@)">
            <summary>A StringBuilder extension method that extracts the number described by @this.</summary>
            <param name="this">The @this to act on.</param>
            <param name="endIndex">[out] The end index.</param>
            <returns>The extracted number.</returns>
        </member>
        <member name="M:Extensions.ExtractNumber(System.Text.StringBuilder,System.Int32)">
            <summary>A StringBuilder extension method that extracts the number described by @this.</summary>
            <param name="this">The @this to act on.</param>
            <param name="startIndex">The start index.</param>
            <returns>The extracted number.</returns>
        </member>
        <member name="M:Extensions.ExtractNumber(System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>A StringBuilder extension method that extracts the number described by @this.</summary>
            <param name="this">The @this to act on.</param>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">[out] The end index.</param>
            <returns>The extracted number.</returns>
        </member>
        <member name="M:Extensions.ExtractOperator(System.Text.StringBuilder)">
            <summary>A StringBuilder extension method that extracts the operator described by @this.</summary>
            <param name="this">The @this to act on.</param>
            <returns>The extracted operator.</returns>
        </member>
        <member name="M:Extensions.ExtractOperator(System.Text.StringBuilder,System.Int32@)">
            <summary>A StringBuilder extension method that extracts the operator described by @this.</summary>
            <param name="this">The @this to act on.</param>
            <param name="endIndex">[out] The end index.</param>
            <returns>The extracted operator.</returns>
        </member>
        <member name="M:Extensions.ExtractOperator(System.Text.StringBuilder,System.Int32)">
            <summary>A StringBuilder extension method that extracts the operator described by @this.</summary>
            <param name="this">The @this to act on.</param>
            <param name="startIndex">The start index.</param>
            <returns>The extracted operator.</returns>
        </member>
        <member name="M:Extensions.ExtractOperator(System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>A StringBuilder extension method that extracts the operator described by @this.</summary>
            <param name="this">The @this to act on.</param>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">[out] The end index.</param>
            <returns>The extracted operator.</returns>
        </member>
        <member name="M:Extensions.ExtractString(System.Text.StringBuilder)">
            <summary>A StringBuilder extension method that extracts the string described by @this.</summary>
            <param name="this">The @this to act on.</param>
            <returns>The extracted string.</returns>
        </member>
        <member name="M:Extensions.ExtractString(System.Text.StringBuilder,System.Int32@)">
            <summary>A StringBuilder extension method that extracts the string described by @this.</summary>
            <param name="this">The @this to act on.</param>
            <param name="endIndex">[out] The end index.</param>
            <returns>The extracted string.</returns>
        </member>
        <member name="M:Extensions.ExtractString(System.Text.StringBuilder,System.Int32)">
            <summary>A StringBuilder extension method that extracts the string described by @this.</summary>
            <param name="this">The @this to act on.</param>
            <param name="startIndex">The start index.</param>
            <returns>The extracted string.</returns>
        </member>
        <member name="M:Extensions.ExtractString(System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>A StringBuilder extension method that extracts the string described by @this.</summary>
            <param name="this">The @this to act on.</param>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">[out] The end index.</param>
            <returns>The extracted string.</returns>
        </member>
        <member name="M:Extensions.ExtractStringArobasDoubleQuote(System.Text.StringBuilder)">
            <summary>
                A StringBuilder extension method that extracts the string arobas double quote
                described by @this.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The extracted string arobas double quote.</returns>
        </member>
        <member name="M:Extensions.ExtractStringArobasDoubleQuote(System.Text.StringBuilder,System.Int32@)">
            <summary>
                A StringBuilder extension method that extracts the string arobas double quote
                described by @this.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="endIndex">[out] The end index.</param>
            <returns>The extracted string arobas double quote.</returns>
        </member>
        <member name="M:Extensions.ExtractStringArobasDoubleQuote(System.Text.StringBuilder,System.Int32)">
            <summary>
                A StringBuilder extension method that extracts the string arobas double quote
                described by @this.
            </summary>
            <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            <param name="this">The @this to act on.</param>
            <param name="startIndex">The start index.</param>
            <returns>The extracted string arobas double quote.</returns>
        </member>
        <member name="M:Extensions.ExtractStringArobasDoubleQuote(System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>
                A StringBuilder extension method that extracts the string arobas double quote
                described by @this.
            </summary>
            <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            <param name="this">The @this to act on.</param>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">[out] The end index.</param>
            <returns>The extracted string arobas double quote.</returns>
        </member>
        <member name="M:Extensions.ExtractStringArobasSingleQuote(System.Text.StringBuilder)">
            <summary>
                A StringBuilder extension method that extracts the string arobas single quote
                described by @this.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The extracted string arobas single quote.</returns>
        </member>
        <member name="M:Extensions.ExtractStringArobasSingleQuote(System.Text.StringBuilder,System.Int32@)">
            <summary>A StringBuilder extension method that extracts the string arobas single quote
            described by @this.</summary>
            <param name="this">The @this to act on.</param>
            <param name="endIndex">[out] The end index.</param>
            <returns>The extracted string arobas single quote.</returns>
        </member>
        <member name="M:Extensions.ExtractStringArobasSingleQuote(System.Text.StringBuilder,System.Int32)">
            <summary>
                A StringBuilder extension method that extracts the string arobas single quote
                described by @this.
            </summary>
            <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            <param name="this">The @this to act on.</param>
            <param name="startIndex">The start index.</param>
            <returns>The extracted string arobas single quote.</returns>
        </member>
        <member name="M:Extensions.ExtractStringArobasSingleQuote(System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>A StringBuilder extension method that extracts the string arobas single quote
            described by @this.</summary>
            <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            <param name="this">The @this to act on.</param>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">[out] The end index.</param>
            <returns>The extracted string arobas single quote.</returns>
        </member>
        <member name="M:Extensions.ExtractStringDoubleQuote(System.Text.StringBuilder)">
            <summary>
                A StringBuilder extension method that extracts the string double quote described by
                @this.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The extracted string double quote.</returns>
        </member>
        <member name="M:Extensions.ExtractStringDoubleQuote(System.Text.StringBuilder,System.Int32@)">
            <summary>A StringBuilder extension method that extracts the string double quote described by
            @this.</summary>
            <param name="this">The @this to act on.</param>
            <param name="endIndex">[out] The end index.</param>
            <returns>The extracted string double quote.</returns>
        </member>
        <member name="M:Extensions.ExtractStringDoubleQuote(System.Text.StringBuilder,System.Int32)">
            <summary>
                A StringBuilder extension method that extracts the string double quote described by
                @this.
            </summary>
            <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            <param name="this">The @this to act on.</param>
            <param name="startIndex">The start index.</param>
            <returns>The extracted string double quote.</returns>
        </member>
        <member name="M:Extensions.ExtractStringDoubleQuote(System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>A StringBuilder extension method that extracts the string double quote described by
            @this.</summary>
            <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            <param name="this">The @this to act on.</param>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">[out] The end index.</param>
            <returns>The extracted string double quote.</returns>
        </member>
        <member name="M:Extensions.ExtractStringSingleQuote(System.Text.StringBuilder)">
            <summary>
                A StringBuilder extension method that extracts the string single quote described by
                @this.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The extracted string single quote.</returns>
        </member>
        <member name="M:Extensions.ExtractStringSingleQuote(System.Text.StringBuilder,System.Int32@)">
            <summary>A StringBuilder extension method that extracts the string single quote described by
            @this.</summary>
            <param name="this">The @this to act on.</param>
            <param name="endIndex">[out] The end index.</param>
            <returns>The extracted string single quote.</returns>
        </member>
        <member name="M:Extensions.ExtractStringSingleQuote(System.Text.StringBuilder,System.Int32)">
            <summary>
                A StringBuilder extension method that extracts the string single quote described by
                @this.
            </summary>
            <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            <param name="this">The @this to act on.</param>
            <param name="startIndex">The start index.</param>
            <returns>The extracted string single quote.</returns>
        </member>
        <member name="M:Extensions.ExtractStringSingleQuote(System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>A StringBuilder extension method that extracts the string single quote described by
            @this.</summary>
            <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            <param name="this">The @this to act on.</param>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">[out] The end index.</param>
            <returns>The extracted string single quote.</returns>
        </member>
        <member name="M:Extensions.ExtractToken(System.Text.StringBuilder)">
            <summary>A StringBuilder extension method that extracts the directive described by @this.</summary>
            <param name="this">The @this to act on.</param>
            <returns>The extracted directive.</returns>
        </member>
        <member name="M:Extensions.ExtractToken(System.Text.StringBuilder,System.Int32@)">
            <summary>A StringBuilder extension method that extracts the directive described by @this.</summary>
            <param name="this">The @this to act on.</param>
            <param name="endIndex">[out] The end index.</param>
            <returns>The extracted directive.</returns>
        </member>
        <member name="M:Extensions.ExtractToken(System.Text.StringBuilder,System.Int32)">
            <summary>A StringBuilder extension method that extracts the directive described by @this.</summary>
            <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            <param name="this">The @this to act on.</param>
            <param name="startIndex">The start index.</param>
            <returns>The extracted directive.</returns>
        </member>
        <member name="M:Extensions.ExtractToken(System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>A StringBuilder extension method that extracts the directive described by @this.</summary>
            <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            <param name="this">The @this to act on.</param>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">[out] The end index.</param>
            <returns>The extracted directive.</returns>
        </member>
        <member name="M:Extensions.ExtractTriviaToken(System.Text.StringBuilder)">
            <summary>
                A StringBuilder extension method that extracts the trivia tokens described by
                @this.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The extracted trivia tokens.</returns>
        </member>
        <member name="M:Extensions.ExtractTriviaToken(System.Text.StringBuilder,System.Int32@)">
            <summary>
                A StringBuilder extension method that extracts the trivia tokens described by
                @this.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="endIndex">[out] The end index.</param>
            <returns>The extracted trivia tokens.</returns>
        </member>
        <member name="M:Extensions.ExtractTriviaToken(System.Text.StringBuilder,System.Int32)">
            <summary>
                A StringBuilder extension method that extracts the trivia tokens described by
                @this.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="startIndex">The start index.</param>
            <returns>The extracted trivia tokens.</returns>
        </member>
        <member name="M:Extensions.ExtractTriviaToken(System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>
                A StringBuilder extension method that extracts the trivia tokens described by
                @this.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">[out] The end index.</param>
            <returns>The extracted trivia tokens.</returns>
        </member>
        <member name="M:Extensions.AppendIf``1(System.Text.StringBuilder,System.Func{``0,System.Boolean},``0[])">
            <summary>A StringBuilder extension method that appends a when.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="predicate">The predicate.</param>
            <param name="values">A variable-length parameters list containing values.</param>
            <returns>A StringBuilder.</returns>
        </member>
        <member name="M:Extensions.AppendJoin``1(System.Text.StringBuilder,System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>A StringBuilder extension method that appends a join.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="separator">The separator.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:Extensions.AppendJoin``1(System.Text.StringBuilder,System.String,``0[])">
            <summary>A StringBuilder extension method that appends a join.</summary>
            <param name="this">The @this to act on.</param>
            <param name="separator">The separator.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:Extensions.AppendLineFormat(System.Text.StringBuilder,System.String,System.Object[])">
            <summary>
                A StringBuilder extension method that appends a line format.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="format">Describes the format to use.</param>
            <param name="args">A variable-length parameters list containing arguments.</param>
        </member>
        <member name="M:Extensions.AppendLineFormat(System.Text.StringBuilder,System.String,System.Collections.Generic.List{System.Collections.Generic.IEnumerable{System.Object}})">
            <summary>
                A StringBuilder extension method that appends a line format.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="format">Describes the format to use.</param>
            <param name="args">A variable-length parameters list containing arguments.</param>
        </member>
        <member name="M:Extensions.AppendLineIf``1(System.Text.StringBuilder,System.Func{``0,System.Boolean},``0[])">
            <summary>A StringBuilder extension method that appends a line when.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="predicate">The predicate.</param>
            <param name="values">A variable-length parameters list containing values.</param>
            <returns>A StringBuilder.</returns>
        </member>
        <member name="M:Extensions.AppendLineJoin``1(System.Text.StringBuilder,System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>A StringBuilder extension method that appends a line join.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="separator">The separator.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:Extensions.AppendLineJoin(System.Text.StringBuilder,System.String,System.Object[])">
            <summary>A StringBuilder extension method that appends a line join.</summary>
            <param name="this">The @this to act on.</param>
            <param name="separator">The separator.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:Extensions.GetIndexAfterNextDoubleQuote(System.Text.StringBuilder)">
            <summary>A StringBuilder extension method that gets index after next double quote.</summary>
            <param name="this">The path to act on.</param>
            <returns>The index after next double quote.</returns>
        </member>
        <member name="M:Extensions.GetIndexAfterNextDoubleQuote(System.Text.StringBuilder,System.Boolean)">
            <summary>A StringBuilder extension method that gets index after next double quote.</summary>
            <param name="this">The path to act on.</param>
            <param name="allowEscape">true to allow, false to deny escape.</param>
            <returns>The index after next double quote.</returns>
        </member>
        <member name="M:Extensions.GetIndexAfterNextDoubleQuote(System.Text.StringBuilder,System.Int32)">
            <summary>A StringBuilder extension method that gets index after next double quote.</summary>
            <param name="this">The path to act on.</param>
            <param name="startIndex">The start index.</param>
            <returns>The index after next double quote.</returns>
        </member>
        <member name="M:Extensions.GetIndexAfterNextDoubleQuote(System.Text.StringBuilder,System.Int32,System.Boolean)">
            <summary>A StringBuilder extension method that gets index after next double quote.</summary>
            <param name="this">The path to act on.</param>
            <param name="startIndex">The start index.</param>
            <param name="allowEscape">true to allow, false to deny escape.</param>
            <returns>The index after next double quote.</returns>
        </member>
        <member name="M:Extensions.GetIndexAfterNextSingleQuote(System.Text.StringBuilder)">
            <summary>Gets index after next single quote.</summary>
            <param name="this">Full pathname of the file.</param>
            <returns>The index after next single quote.</returns>
        </member>
        <member name="M:Extensions.GetIndexAfterNextSingleQuote(System.Text.StringBuilder,System.Boolean)">
            <summary>Gets index after next single quote.</summary>
            <param name="this">Full pathname of the file.</param>
            <param name="allowEscape">true to allow, false to deny escape.</param>
            <returns>The index after next single quote.</returns>
        </member>
        <member name="M:Extensions.GetIndexAfterNextSingleQuote(System.Text.StringBuilder,System.Int32)">
            <summary>Gets index after next single quote.</summary>
            <param name="this">Full pathname of the file.</param>
            <param name="startIndex">The start index.</param>
            <returns>The index after next single quote.</returns>
        </member>
        <member name="M:Extensions.GetIndexAfterNextSingleQuote(System.Text.StringBuilder,System.Int32,System.Boolean)">
            <summary>Gets index after next single quote.</summary>
            <param name="this">Full pathname of the file.</param>
            <param name="startIndex">The start index.</param>
            <param name="allowEscape">true to allow, false to deny escape.</param>
            <returns>The index after next single quote.</returns>
        </member>
        <member name="M:Extensions.Substring(System.Text.StringBuilder,System.Int32)">
            <summary>A StringBuilder extension method that substrings.</summary>
            <param name="this">The @this to act on.</param>
            <param name="startIndex">The start index.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Extensions.Substring(System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary>A StringBuilder extension method that substrings.</summary>
            <param name="this">The @this to act on.</param>
            <param name="startIndex">The start index.</param>
            <param name="length">The length.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Extensions.Ago(System.TimeSpan)">
            <summary>
                A TimeSpan extension method that substract the specified TimeSpan to the current DateTime.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The current DateTime with the specified TimeSpan substracted from it.</returns>
        </member>
        <member name="M:Extensions.FromNow(System.TimeSpan)">
            <summary>
                A TimeSpan extension method that add the specified TimeSpan to the current DateTime.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The current DateTime with the specified TimeSpan added to it.</returns>
        </member>
        <member name="M:Extensions.UtcAgo(System.TimeSpan)">
            <summary>
                A TimeSpan extension method that substract the specified TimeSpan to the current UTC (Coordinated Universal
                Time)
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The current UTC (Coordinated Universal Time) with the specified TimeSpan substracted from it.</returns>
        </member>
        <member name="M:Extensions.UtcFromNow(System.TimeSpan)">
            <summary>
                A TimeSpan extension method that add the specified TimeSpan to the current UTC (Coordinated Universal Time)
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The current UTC (Coordinated Universal Time) with the specified TimeSpan added to it.</returns>
        </member>
        <member name="M:Extensions.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
            <summary>
                Creates an instance of the specified type using the constructor that best matches the specified parameters.
            </summary>
            <param name="type">The type of object to create.</param>
            <param name="bindingAttr">
                A combination of zero or more bit flags that affect the search for the  constructor. If
                is zero, a case-sensitive search for public constructors is conducted.
            </param>
            <param name="binder">
                An object that uses  and  to seek and identify the  constructor. If  is null, the default
                binder is used.
            </param>
            <param name="args">
                An array of arguments that match in number, order, and type the parameters of the constructor
                to invoke. If  is an empty array or null, the constructor that takes no parameters (the default constructor) is
                invoked.
            </param>
            <param name="culture">
                Culture-specific information that governs the coercion of  to the formal types declared for
                the  constructor. If  is null, the  for the current thread is used.
            </param>
            <returns>A reference to the newly created object.</returns>
        </member>
        <member name="M:Extensions.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
            <summary>
                Creates an instance of the specified type using the constructor that best matches the specified parameters.
            </summary>
            <param name="type">The type of object to create.</param>
            <param name="bindingAttr">
                A combination of zero or more bit flags that affect the search for the  constructor. If
                is zero, a case-sensitive search for public constructors is conducted.
            </param>
            <param name="binder">
                An object that uses  and  to seek and identify the  constructor. If  is null, the default
                binder is used.
            </param>
            <param name="args">
                An array of arguments that match in number, order, and type the parameters of the constructor
                to invoke. If  is an empty array or null, the constructor that takes no parameters (the default constructor) is
                invoked.
            </param>
            <param name="culture">
                Culture-specific information that governs the coercion of  to the formal types declared for
                the  constructor. If  is null, the  for the current thread is used.
            </param>
            <param name="activationAttributes">
                An array of one or more attributes that can participate in activation. This
                is typically an array that contains a single  object. The  specifies the URL that is required to activate a
                remote object.
            </param>
            <returns>A reference to the newly created object.</returns>
        </member>
        <member name="M:Extensions.CreateInstance(System.Type,System.Object[])">
            <summary>
                Creates an instance of the specified type using the constructor that best matches the specified parameters.
            </summary>
            <param name="type">The type of object to create.</param>
            <param name="args">
                An array of arguments that match in number, order, and type the parameters of the constructor
                to invoke. If  is an empty array or null, the constructor that takes no parameters (the default constructor) is
                invoked.
            </param>
            <returns>A reference to the newly created object.</returns>
        </member>
        <member name="M:Extensions.CreateInstance(System.Type,System.Object[],System.Object[])">
            <summary>
                Creates an instance of the specified type using the constructor that best matches the specified parameters.
            </summary>
            <param name="type">The type of object to create.</param>
            <param name="args">
                An array of arguments that match in number, order, and type the parameters of the constructor
                to invoke. If  is an empty array or null, the constructor that takes no parameters (the default constructor) is
                invoked.
            </param>
            <param name="activationAttributes">
                An array of one or more attributes that can participate in activation. This
                is typically an array that contains a single  object. The  specifies the URL that is required to activate a
                remote object.
            </param>
            <returns>A reference to the newly created object.</returns>
        </member>
        <member name="M:Extensions.CreateInstance(System.Type)">
            <summary>
                Creates an instance of the specified type using that type&#39;s default constructor.
            </summary>
            <param name="type">The type of object to create.</param>
            <returns>A reference to the newly created object.</returns>
        </member>
        <member name="M:Extensions.CreateInstance(System.Type,System.Boolean)">
            <summary>
                Creates an instance of the specified type using that type&#39;s default constructor.
            </summary>
            <param name="type">The type of object to create.</param>
            <param name="nonPublic">
                true if a public or nonpublic default constructor can match; false if only a public
                default constructor can match.
            </param>
            <returns>A reference to the newly created object.</returns>
        </member>
        <member name="M:Extensions.GetObject(System.Type,System.String)">
            <summary>
                Creates a proxy for the well-known object indicated by the specified type and URL.
            </summary>
            <param name="type">The type of the well-known object to which you want to connect.</param>
            <param name="url">The URL of the well-known object.</param>
            <returns>A proxy that points to an endpoint served by the requested well-known object.</returns>
        </member>
        <member name="M:Extensions.GetObject(System.Type,System.String,System.Object)">
            <summary>
                Creates a proxy for the well-known object indicated by the specified type, URL, and channel data.
            </summary>
            <param name="type">The type of the well-known object to which you want to connect.</param>
            <param name="url">The URL of the well-known object.</param>
            <param name="state">Channel-specific data or null.</param>
            <returns>A proxy that points to an endpoint served by the requested well-known object.</returns>
        </member>
        <member name="M:Extensions.CreateInstance``1(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
            <summary>
                A Type extension method that creates an instance.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="bindingAttr">The binding attribute.</param>
            <param name="binder">The binder.</param>
            <param name="args">The arguments.</param>
            <param name="culture">The culture.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="M:Extensions.CreateInstance``1(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
            <summary>
                A Type extension method that creates an instance.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="bindingAttr">The binding attribute.</param>
            <param name="binder">The binder.</param>
            <param name="args">The arguments.</param>
            <param name="culture">The culture.</param>
            <param name="activationAttributes">The activation attributes.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="M:Extensions.CreateInstance``1(System.Type,System.Object[])">
            <summary>
                A Type extension method that creates an instance.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="args">The arguments.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="M:Extensions.CreateInstance``1(System.Type,System.Object[],System.Object[])">
            <summary>
                A Type extension method that creates an instance.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="args">The arguments.</param>
            <param name="activationAttributes">The activation attributes.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="M:Extensions.CreateInstance``1(System.Type)">
            <summary>
                A Type extension method that creates an instance.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="M:Extensions.CreateInstance``1(System.Type,System.Boolean)">
            <summary>
                A Type extension method that creates an instance.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="nonPublic">true to non public.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="M:Extensions.Max(System.UInt16,System.UInt16)">
            <summary>
                Returns the larger of two 16-bit unsigned integers.
            </summary>
            <param name="val1">The first of two 16-bit unsigned integers to compare.</param>
            <param name="val2">The second of two 16-bit unsigned integers to compare.</param>
            <returns>Parameter  or , whichever is larger.</returns>
        </member>
        <member name="M:Extensions.Min(System.UInt16,System.UInt16)">
            <summary>
                Returns the smaller of two 16-bit unsigned integers.
            </summary>
            <param name="val1">The first of two 16-bit unsigned integers to compare.</param>
            <param name="val2">The second of two 16-bit unsigned integers to compare.</param>
            <returns>Parameter  or , whichever is smaller.</returns>
        </member>
        <member name="M:Extensions.Between(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
                A T extension method that check if the value is between (exclusif) the minValue and maxValue.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns>true if the value is between the minValue and maxValue, otherwise false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.In(System.UInt16,System.UInt16[])">
            <summary>
                A T extension method to determines whether the object is equal to any of the provided values.
            </summary>
            <param name="this">The object to be compared.</param>
            <param name="values">The value list to compare with the object.</param>
            <returns>true if the values list contains the object, else false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.InRange(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
                A T extension method that check if the value is between inclusively the minValue and maxValue.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns>true if the value is between inclusively the minValue and maxValue, otherwise false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.NotIn(System.UInt16,System.UInt16[])">
            <summary>
                A T extension method to determines whether the object is not equal to any of the provided values.
            </summary>
            <param name="this">The object to be compared.</param>
            <param name="values">The value list to compare with the object.</param>
            <returns>true if the values list doesn't contains the object, else false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.Max(System.UInt32,System.UInt32)">
            <summary>
                Returns the larger of two 32-bit unsigned integers.
            </summary>
            <param name="val1">The first of two 32-bit unsigned integers to compare.</param>
            <param name="val2">The second of two 32-bit unsigned integers to compare.</param>
            <returns>Parameter  or , whichever is larger.</returns>
        </member>
        <member name="M:Extensions.Min(System.UInt32,System.UInt32)">
            <summary>
                Returns the smaller of two 32-bit unsigned integers.
            </summary>
            <param name="val1">The first of two 32-bit unsigned integers to compare.</param>
            <param name="val2">The second of two 32-bit unsigned integers to compare.</param>
            <returns>Parameter  or , whichever is smaller.</returns>
        </member>
        <member name="M:Extensions.Between(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
                A T extension method that check if the value is between (exclusif) the minValue and maxValue.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns>true if the value is between the minValue and maxValue, otherwise false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.In(System.UInt32,System.UInt32[])">
            <summary>
                A T extension method to determines whether the object is equal to any of the provided values.
            </summary>
            <param name="this">The object to be compared.</param>
            <param name="values">The value list to compare with the object.</param>
            <returns>true if the values list contains the object, else false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.InRange(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
                A T extension method that check if the value is between inclusively the minValue and maxValue.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns>true if the value is between inclusively the minValue and maxValue, otherwise false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.NotIn(System.UInt32,System.UInt32[])">
            <summary>
                A T extension method to determines whether the object is not equal to any of the provided values.
            </summary>
            <param name="this">The object to be compared.</param>
            <param name="values">The value list to compare with the object.</param>
            <returns>true if the values list doesn't contains the object, else false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.Max(System.UInt64,System.UInt64)">
            <summary>
                Returns the larger of two 64-bit unsigned integers.
            </summary>
            <param name="val1">The first of two 64-bit unsigned integers to compare.</param>
            <param name="val2">The second of two 64-bit unsigned integers to compare.</param>
            <returns>Parameter  or , whichever is larger.</returns>
        </member>
        <member name="M:Extensions.Min(System.UInt64,System.UInt64)">
            <summary>
                Returns the smaller of two 64-bit unsigned integers.
            </summary>
            <param name="val1">The first of two 64-bit unsigned integers to compare.</param>
            <param name="val2">The second of two 64-bit unsigned integers to compare.</param>
            <returns>Parameter  or , whichever is smaller.</returns>
        </member>
        <member name="M:Extensions.Between(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
                A T extension method that check if the value is between (exclusif) the minValue and maxValue.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns>true if the value is between the minValue and maxValue, otherwise false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.In(System.UInt64,System.UInt64[])">
            <summary>
                A T extension method to determines whether the object is equal to any of the provided values.
            </summary>
            <param name="this">The object to be compared.</param>
            <param name="values">The value list to compare with the object.</param>
            <returns>true if the values list contains the object, else false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.InRange(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
                A T extension method that check if the value is between inclusively the minValue and maxValue.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns>true if the value is between inclusively the minValue and maxValue, otherwise false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.NotIn(System.UInt64,System.UInt64[])">
            <summary>
                A T extension method to determines whether the object is not equal to any of the provided values.
            </summary>
            <param name="this">The object to be compared.</param>
            <param name="values">The value list to compare with the object.</param>
            <returns>true if the values list doesn't contains the object, else false.</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.Add(System.UIntPtr,System.Int32)">
            <summary>
                Adds an offset to the value of an unsigned pointer.
            </summary>
            <param name="pointer">The unsigned pointer to add the offset to.</param>
            <param name="offset">The offset to add.</param>
            <returns>A new unsigned pointer that reflects the addition of  to .</returns>
        </member>
        <member name="M:Extensions.Subtract(System.UIntPtr,System.Int32)">
            <summary>
                Subtracts an offset from the value of an unsigned pointer.
            </summary>
            <param name="pointer">The unsigned pointer to subtract the offset from.</param>
            <param name="offset">The offset to subtract.</param>
            <returns>A new unsigned pointer that reflects the subtraction of  from .</returns>
        </member>
        <member name="M:Extensions.ClearAll``1(``0[])">
            <summary>
                A T[] extension method that clears all described by @this.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            ###
            <returns>.</returns>
        </member>
        <member name="M:Extensions.ClearAt``1(``0[],System.Int32)">
            <summary>
                A T[] extension method that clears at.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The arrayToClear to act on.</param>
            <param name="at">at.</param>
        </member>
        <member name="M:Extensions.ToDataTable``1(``0[])">
            <summary>
                A T[] extension method that converts the @this to a data table.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>@this as a DataTable.</returns>
        </member>
        <member name="M:Extensions.AsReadOnly``1(``0[])">
            <summary>
                A T[] extension method that converts an array to a read only.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="array">The array to act on.</param>
            <returns>A list of.</returns>
        </member>
        <member name="M:Extensions.Exists``1(``0[],System.Predicate{``0})">
            <summary>
                A T[] extension method that exists.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="array">The array to act on.</param>
            <param name="match">Specifies the match.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Extensions.Find``1(``0[],System.Predicate{``0})">
            <summary>
                A T[] extension method that searches for the first match.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="array">The array to act on.</param>
            <param name="match">Specifies the match.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:Extensions.FindAll``1(``0[],System.Predicate{``0})">
            <summary>
                A T[] extension method that searches for the first all.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="array">The array to act on.</param>
            <param name="match">Specifies the match.</param>
            <returns>The found all.</returns>
        </member>
        <member name="M:Extensions.FindIndex``1(``0[],System.Predicate{``0})">
            <summary>
                A T[] extension method that searches for the first index.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="array">The array to act on.</param>
            <param name="match">Specifies the match.</param>
            <returns>The found index.</returns>
        </member>
        <member name="M:Extensions.FindIndex``1(``0[],System.Int32,System.Predicate{``0})">
            <summary>
                A T[] extension method that searches for the first index.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="array">The array to act on.</param>
            <param name="startIndex">The start index.</param>
            <param name="match">Specifies the match.</param>
            <returns>The found index.</returns>
        </member>
        <member name="M:Extensions.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
            <summary>
                A T[] extension method that searches for the first index.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="array">The array to act on.</param>
            <param name="startIndex">The start index.</param>
            <param name="count">Number of.</param>
            <param name="match">Specifies the match.</param>
            <returns>The found index.</returns>
        </member>
        <member name="M:Extensions.FindLast``1(``0[],System.Predicate{``0})">
            <summary>
                A T[] extension method that searches for the first last.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="array">The array to act on.</param>
            <param name="match">Specifies the match.</param>
            <returns>The found last.</returns>
        </member>
        <member name="M:Extensions.FindLastIndex``1(``0[],System.Predicate{``0})">
            <summary>
                A T[] extension method that searches for the last index.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="array">The array to act on.</param>
            <param name="match">Specifies the match.</param>
            <returns>The found index.</returns>
        </member>
        <member name="M:Extensions.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})">
            <summary>
                A T[] extension method that searches for the last index.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="array">The array to act on.</param>
            <param name="startIndex">The start index.</param>
            <param name="match">Specifies the match.</param>
            <returns>The found index.</returns>
        </member>
        <member name="M:Extensions.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
            <summary>
                A T[] extension method that searches for the last index.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="array">The array to act on.</param>
            <param name="startIndex">The start index.</param>
            <param name="count">Number of.</param>
            <param name="match">Specifies the match.</param>
            <returns>The found index.</returns>
        </member>
        <member name="M:Extensions.ForEach``1(``0[],System.Action{``0})">
            <summary>
                A T[] extension method that applies an operation to all items in this collection.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="array">The array to act on.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Extensions.TrueForAll``1(``0[],System.Predicate{``0})">
            <summary>
                A T[] extension method that true for all.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="array">The array to act on.</param>
            <param name="match">Specifies the match.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Extensions.ToDbParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.Data.Common.DbCommand)">
            <summary>
                An IDictionary&lt;string,object&gt; extension method that converts this object to a database parameters.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="command">The command.</param>
            <returns>The given data converted to a DbParameter[].</returns>
        </member>
        <member name="M:Extensions.ToDbParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.Data.Common.DbConnection)">
            <summary>
                An IDictionary&lt;string,object&gt; extension method that converts this object to a database parameters.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="connection">The connection.</param>
            <returns>The given data converted to a DbParameter[].</returns>
        </member>
        <member name="M:Extensions.ToSqlParameters(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
                An IDictionary&lt;string,object&gt; extension method that converts the @this to a SQL parameters.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a SqlParameter[].</returns>
        </member>
        <member name="M:Extensions.ExecuteEntities``1(System.Data.Common.DbCommand)">
            <summary>
                Enumerates execute entities in this collection.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>An enumerator that allows foreach to be used to process execute entities in this collection.</returns>
        </member>
        <member name="M:Extensions.ExecuteEntity``1(System.Data.Common.DbCommand)">
            <summary>
                A DbCommand extension method that executes the entity operation.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:Extensions.ExecuteExpandoObject(System.Data.Common.DbCommand)">
            <summary>
                A DbCommand extension method that executes the expando object operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>A dynamic.</returns>
        </member>
        <member name="M:Extensions.ExecuteExpandoObjects(System.Data.Common.DbCommand)">
            <summary>
                Enumerates execute expando objects in this collection.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>
                An enumerator that allows foreach to be used to process execute expando objects in this collection.
            </returns>
        </member>
        <member name="M:Extensions.ExecuteScalarAs``1(System.Data.Common.DbCommand)">
            <summary>
                A DbCommand extension method that executes the scalar as operation.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalarAsOrDefault``1(System.Data.Common.DbCommand)">
            <summary>
                A DbCommand extension method that executes the scalar as or default operation.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalarAsOrDefault``1(System.Data.Common.DbCommand,``0)">
            <summary>
                A DbCommand extension method that executes the scalar as or default operation.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalarAsOrDefault``1(System.Data.Common.DbCommand,System.Func{System.Data.Common.DbCommand,``0})">
            <summary>
                A DbCommand extension method that executes the scalar as or default operation.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalarTo``1(System.Data.Common.DbCommand)">
            <summary>
                A DbCommand extension method that executes the scalar to operation.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalarToOrDefault``1(System.Data.Common.DbCommand)">
            <summary>
                A DbCommand extension method that executes the scalar to or default operation.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalarToOrDefault``1(System.Data.Common.DbCommand,``0)">
            <summary>
                A DbCommand extension method that executes the scalar to or default operation.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="defaultValue">The default value.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalarToOrDefault``1(System.Data.Common.DbCommand,System.Func{System.Data.Common.DbCommand,``0})">
            <summary>
                A DbCommand extension method that executes the scalar to or default operation.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:Extensions.ExecuteEntities``1(System.Data.Common.DbConnection,System.String,System.Data.Common.DbParameter[],System.Data.CommandType,System.Data.Common.DbTransaction)">
            <summary>
                Enumerates execute entities in this collection.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="commandType">Type of the command.</param>
            <param name="transaction">The transaction.</param>
            <returns>An enumerator that allows foreach to be used to process execute entities in this collection.</returns>
        </member>
        <member name="M:Extensions.ExecuteEntities``1(System.Data.Common.DbConnection,System.Action{System.Data.Common.DbCommand})">
            <summary>
                Enumerates execute entities in this collection.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="commandFactory">The command factory.</param>
            <returns>An enumerator that allows foreach to be used to process execute entities in this collection.</returns>
        </member>
        <member name="M:Extensions.ExecuteEntities``1(System.Data.Common.DbConnection,System.String)">
            <summary>
                Enumerates execute entities in this collection.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <returns>An enumerator that allows foreach to be used to process execute entities in this collection.</returns>
        </member>
        <member name="M:Extensions.ExecuteEntities``1(System.Data.Common.DbConnection,System.String,System.Data.Common.DbTransaction)">
            <summary>
                Enumerates execute entities in this collection.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="transaction">The transaction.</param>
            <returns>An enumerator that allows foreach to be used to process execute entities in this collection.</returns>
        </member>
        <member name="M:Extensions.ExecuteEntities``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType)">
            <summary>
                Enumerates execute entities in this collection.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <returns>An enumerator that allows foreach to be used to process execute entities in this collection.</returns>
        </member>
        <member name="M:Extensions.ExecuteEntities``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Data.Common.DbTransaction)">
            <summary>
                Enumerates execute entities in this collection.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <param name="transaction">The transaction.</param>
            <returns>An enumerator that allows foreach to be used to process execute entities in this collection.</returns>
        </member>
        <member name="M:Extensions.ExecuteEntities``1(System.Data.Common.DbConnection,System.String,System.Data.Common.DbParameter[])">
            <summary>
                Enumerates execute entities in this collection.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <returns>An enumerator that allows foreach to be used to process execute entities in this collection.</returns>
        </member>
        <member name="M:Extensions.ExecuteEntities``1(System.Data.Common.DbConnection,System.String,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction)">
            <summary>
                Enumerates execute entities in this collection.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="transaction">The transaction.</param>
            <returns>An enumerator that allows foreach to be used to process execute entities in this collection.</returns>
        </member>
        <member name="M:Extensions.ExecuteEntities``1(System.Data.Common.DbConnection,System.String,System.Data.Common.DbParameter[],System.Data.CommandType)">
            <summary>
                Enumerates execute entities in this collection.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="commandType">Type of the command.</param>
            <returns>An enumerator that allows foreach to be used to process execute entities in this collection.</returns>
        </member>
        <member name="M:Extensions.ExecuteEntity``1(System.Data.Common.DbConnection,System.String,System.Data.Common.DbParameter[],System.Data.CommandType,System.Data.Common.DbTransaction)">
            <summary>
                A DbConnection extension method that executes the entity operation.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="commandType">Type of the command.</param>
            <param name="transaction">The transaction.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:Extensions.ExecuteEntity``1(System.Data.Common.DbConnection,System.Action{System.Data.Common.DbCommand})">
            <summary>
                A DbConnection extension method that executes the entity operation.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="commandFactory">The command factory.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:Extensions.ExecuteEntity``1(System.Data.Common.DbConnection,System.String)">
            <summary>
                A DbConnection extension method that executes the entity operation.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:Extensions.ExecuteEntity``1(System.Data.Common.DbConnection,System.String,System.Data.Common.DbTransaction)">
            <summary>
                A DbConnection extension method that executes the entity operation.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="transaction">The transaction.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:Extensions.ExecuteEntity``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType)">
            <summary>
                A DbConnection extension method that executes the entity operation.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:Extensions.ExecuteEntity``1(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Data.Common.DbTransaction)">
            <summary>
                A DbConnection extension method that executes the entity operation.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <param name="transaction">The transaction.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:Extensions.ExecuteEntity``1(System.Data.Common.DbConnection,System.String,System.Data.Common.DbParameter[])">
            <summary>
                A DbConnection extension method that executes the entity operation.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:Extensions.ExecuteEntity``1(System.Data.Common.DbConnection,System.String,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction)">
            <summary>
                A DbConnection extension method that executes the entity operation.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="transaction">The transaction.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:Extensions.ExecuteEntity``1(System.Data.Common.DbConnection,System.String,System.Data.Common.DbParameter[],System.Data.CommandType)">
            <summary>
                A DbConnection extension method that executes the entity operation.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="commandType">Type of the command.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:Extensions.ExecuteExpandoObject(System.Data.Common.DbConnection,System.String,System.Data.Common.DbParameter[],System.Data.CommandType,System.Data.Common.DbTransaction)">
            <summary>
                A DbConnection extension method that executes the expando object operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="commandType">Type of the command.</param>
            <param name="transaction">The transaction.</param>
            <returns>A dynamic.</returns>
        </member>
        <member name="M:Extensions.ExecuteExpandoObject(System.Data.Common.DbConnection,System.Action{System.Data.Common.DbCommand})">
            <summary>
                A DbConnection extension method that executes the expando object operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="commandFactory">The command factory.</param>
            <returns>A dynamic.</returns>
        </member>
        <member name="M:Extensions.ExecuteExpandoObject(System.Data.Common.DbConnection,System.String)">
            <summary>
                A DbConnection extension method that executes the expando object operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <returns>A dynamic.</returns>
        </member>
        <member name="M:Extensions.ExecuteExpandoObject(System.Data.Common.DbConnection,System.String,System.Data.Common.DbTransaction)">
            <summary>
                A DbConnection extension method that executes the expando object operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="transaction">The transaction.</param>
            <returns>A dynamic.</returns>
        </member>
        <member name="M:Extensions.ExecuteExpandoObject(System.Data.Common.DbConnection,System.String,System.Data.CommandType)">
            <summary>
                A DbConnection extension method that executes the expando object operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <returns>A dynamic.</returns>
        </member>
        <member name="M:Extensions.ExecuteExpandoObject(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Data.Common.DbTransaction)">
            <summary>
                A DbConnection extension method that executes the expando object operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <param name="transaction">The transaction.</param>
            <returns>A dynamic.</returns>
        </member>
        <member name="M:Extensions.ExecuteExpandoObject(System.Data.Common.DbConnection,System.String,System.Data.Common.DbParameter[])">
            <summary>
                A DbConnection extension method that executes the expando object operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <returns>A dynamic.</returns>
        </member>
        <member name="M:Extensions.ExecuteExpandoObject(System.Data.Common.DbConnection,System.String,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction)">
            <summary>
                A DbConnection extension method that executes the expando object operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="transaction">The transaction.</param>
            <returns>A dynamic.</returns>
        </member>
        <member name="M:Extensions.ExecuteExpandoObject(System.Data.Common.DbConnection,System.String,System.Data.Common.DbParameter[],System.Data.CommandType)">
            <summary>
                A DbConnection extension method that executes the expando object operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="commandType">Type of the command.</param>
            <returns>A dynamic.</returns>
        </member>
        <member name="M:Extensions.ExecuteExpandoObjects(System.Data.Common.DbConnection,System.String,System.Data.Common.DbParameter[],System.Data.CommandType,System.Data.Common.DbTransaction)">
            <summary>
                Enumerates execute expando objects in this collection.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="commandType">Type of the command.</param>
            <param name="transaction">The transaction.</param>
            <returns>
                An enumerator that allows foreach to be used to process execute expando objects in this collection.
            </returns>
        </member>
        <member name="M:Extensions.ExecuteExpandoObjects(System.Data.Common.DbConnection,System.Action{System.Data.Common.DbCommand})">
            <summary>
                Enumerates execute expando objects in this collection.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="commandFactory">The command factory.</param>
            <returns>
                An enumerator that allows foreach to be used to process execute expando objects in this collection.
            </returns>
        </member>
        <member name="M:Extensions.ExecuteExpandoObjects(System.Data.Common.DbConnection,System.String)">
            <summary>
                Enumerates execute expando objects in this collection.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <returns>
                An enumerator that allows foreach to be used to process execute expando objects in this collection.
            </returns>
        </member>
        <member name="M:Extensions.ExecuteExpandoObjects(System.Data.Common.DbConnection,System.String,System.Data.Common.DbTransaction)">
            <summary>
                Enumerates execute expando objects in this collection.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="transaction">The transaction.</param>
            <returns>
                An enumerator that allows foreach to be used to process execute expando objects in this collection.
            </returns>
        </member>
        <member name="M:Extensions.ExecuteExpandoObjects(System.Data.Common.DbConnection,System.String,System.Data.CommandType)">
            <summary>
                Enumerates execute expando objects in this collection.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <returns>
                An enumerator that allows foreach to be used to process execute expando objects in this collection.
            </returns>
        </member>
        <member name="M:Extensions.ExecuteExpandoObjects(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Data.Common.DbTransaction)">
            <summary>
                Enumerates execute expando objects in this collection.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <param name="transaction">The transaction.</param>
            <returns>
                An enumerator that allows foreach to be used to process execute expando objects in this collection.
            </returns>
        </member>
        <member name="M:Extensions.ExecuteExpandoObjects(System.Data.Common.DbConnection,System.String,System.Data.Common.DbParameter[])">
            <summary>
                Enumerates execute expando objects in this collection.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <returns>
                An enumerator that allows foreach to be used to process execute expando objects in this collection.
            </returns>
        </member>
        <member name="M:Extensions.ExecuteExpandoObjects(System.Data.Common.DbConnection,System.String,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction)">
            <summary>
                Enumerates execute expando objects in this collection.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="transaction">The transaction.</param>
            <returns>
                An enumerator that allows foreach to be used to process execute expando objects in this collection.
            </returns>
        </member>
        <member name="M:Extensions.ExecuteExpandoObjects(System.Data.Common.DbConnection,System.String,System.Data.Common.DbParameter[],System.Data.CommandType)">
            <summary>
                Enumerates execute expando objects in this collection.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="commandType">Type of the command.</param>
            <returns>
                An enumerator that allows foreach to be used to process execute expando objects in this collection.
            </returns>
        </member>
        <member name="M:Extensions.ExecuteNonQuery(System.Data.Common.DbConnection,System.String,System.Data.Common.DbParameter[],System.Data.CommandType,System.Data.Common.DbTransaction)">
            <summary>
                A DbConnection extension method that executes the non query operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="commandType">Type of the command.</param>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:Extensions.ExecuteNonQuery(System.Data.Common.DbConnection,System.Action{System.Data.Common.DbCommand})">
            <summary>
                A DbConnection extension method that executes the non query operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="commandFactory">The command factory.</param>
        </member>
        <member name="M:Extensions.ExecuteNonQuery(System.Data.Common.DbConnection,System.String)">
            <summary>
                A DbConnection extension method that executes the non query operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
        </member>
        <member name="M:Extensions.ExecuteNonQuery(System.Data.Common.DbConnection,System.String,System.Data.Common.DbTransaction)">
            <summary>
                A DbConnection extension method that executes the non query operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:Extensions.ExecuteNonQuery(System.Data.Common.DbConnection,System.String,System.Data.CommandType)">
            <summary>
                A DbConnection extension method that executes the non query operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="commandType">Type of the command.</param>
        </member>
        <member name="M:Extensions.ExecuteNonQuery(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Data.Common.DbTransaction)">
            <summary>
                A DbConnection extension method that executes the non query operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:Extensions.ExecuteNonQuery(System.Data.Common.DbConnection,System.String,System.Data.Common.DbParameter[])">
            <summary>
                A DbConnection extension method that executes the non query operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
        </member>
        <member name="M:Extensions.ExecuteNonQuery(System.Data.Common.DbConnection,System.String,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction)">
            <summary>
                A DbConnection extension method that executes the non query operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:Extensions.ExecuteNonQuery(System.Data.Common.DbConnection,System.String,System.Data.Common.DbParameter[],System.Data.CommandType)">
            <summary>
                A DbConnection extension method that executes the non query operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="commandType">Type of the command.</param>
        </member>
        <member name="M:Extensions.ExecuteReader(System.Data.Common.DbConnection,System.String,System.Data.Common.DbParameter[],System.Data.CommandType,System.Data.Common.DbTransaction)">
            <summary>
                A DbConnection extension method that executes the reader operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="commandType">Type of the command.</param>
            <param name="transaction">The transaction.</param>
            <returns>A DbDataReader.</returns>
        </member>
        <member name="M:Extensions.ExecuteReader(System.Data.Common.DbConnection,System.Action{System.Data.Common.DbCommand})">
            <summary>
                A DbConnection extension method that executes the reader operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="commandFactory">The command factory.</param>
            <returns>A DbDataReader.</returns>
        </member>
        <member name="M:Extensions.ExecuteReader(System.Data.Common.DbConnection,System.String)">
            <summary>
                A DbConnection extension method that executes the reader operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <returns>A DbDataReader.</returns>
        </member>
        <member name="M:Extensions.ExecuteReader(System.Data.Common.DbConnection,System.String,System.Data.Common.DbTransaction)">
            <summary>
                A DbConnection extension method that executes the reader operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="transaction">The transaction.</param>
            <returns>A DbDataReader.</returns>
        </member>
        <member name="M:Extensions.ExecuteReader(System.Data.Common.DbConnection,System.String,System.Data.CommandType)">
            <summary>
                A DbConnection extension method that executes the reader operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <returns>A DbDataReader.</returns>
        </member>
        <member name="M:Extensions.ExecuteReader(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Data.Common.DbTransaction)">
            <summary>
                A DbConnection extension method that executes the reader operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <param name="transaction">The transaction.</param>
            <returns>A DbDataReader.</returns>
        </member>
        <member name="M:Extensions.ExecuteReader(System.Data.Common.DbConnection,System.String,System.Data.Common.DbParameter[])">
            <summary>
                A DbConnection extension method that executes the reader operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <returns>A DbDataReader.</returns>
        </member>
        <member name="M:Extensions.ExecuteReader(System.Data.Common.DbConnection,System.String,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction)">
            <summary>
                A DbConnection extension method that executes the reader operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="transaction">The transaction.</param>
            <returns>A DbDataReader.</returns>
        </member>
        <member name="M:Extensions.ExecuteReader(System.Data.Common.DbConnection,System.String,System.Data.Common.DbParameter[],System.Data.CommandType)">
            <summary>
                A DbConnection extension method that executes the reader operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="commandType">Type of the command.</param>
            <returns>A DbDataReader.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalar(System.Data.Common.DbConnection,System.String,System.Data.Common.DbParameter[],System.Data.CommandType,System.Data.Common.DbTransaction)">
            <summary>
                A DbConnection extension method that executes the scalar operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="commandType">Type of the command.</param>
            <param name="transaction">The transaction.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalar(System.Data.Common.DbConnection,System.Action{System.Data.Common.DbCommand})">
            <summary>
                A DbConnection extension method that executes the scalar operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="commandFactory">The command factory.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalar(System.Data.Common.DbConnection,System.String)">
            <summary>
                A DbConnection extension method that executes the scalar operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalar(System.Data.Common.DbConnection,System.String,System.Data.Common.DbTransaction)">
            <summary>
                A DbConnection extension method that executes the scalar operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="transaction">The transaction.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalar(System.Data.Common.DbConnection,System.String,System.Data.CommandType)">
            <summary>
                A DbConnection extension method that executes the scalar operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalar(System.Data.Common.DbConnection,System.String,System.Data.CommandType,System.Data.Common.DbTransaction)">
            <summary>
                A DbConnection extension method that executes the scalar operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <param name="transaction">The transaction.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalar(System.Data.Common.DbConnection,System.String,System.Data.Common.DbParameter[])">
            <summary>
                A DbConnection extension method that executes the scalar operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalar(System.Data.Common.DbConnection,System.String,System.Data.Common.DbParameter[],System.Data.Common.DbTransaction)">
            <summary>
                A DbConnection extension method that executes the scalar operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="transaction">The transaction.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalar(System.Data.Common.DbConnection,System.String,System.Data.Common.DbParameter[],System.Data.CommandType)">
            <summary>
                A DbConnection extension method that executes the scalar operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="commandType">Type of the command.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:Extensions.In(System.Data.ConnectionState,System.Data.ConnectionState[])">
            <summary>
                A ConnectionState extension method that insert.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="values">A variable-length parameters list containing values.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Extensions.NotIn(System.Data.ConnectionState,System.Data.ConnectionState[])">
            <summary>
                A ConnectionState extension method that not in.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="values">A variable-length parameters list containing values.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Extensions.AddRange(System.Data.DataColumnCollection,System.String[])">
            <summary>
                A DataColumnCollection extension method that adds a range to 'columns'.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="columns">A variable-length parameters list containing columns.</param>
        </member>
        <member name="M:Extensions.ToEntity``1(System.Data.DataRow)">
            <summary>
                A DataRow extension method that converts the @this to the entities.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>@this as a T.</returns>
        </member>
        <member name="M:Extensions.ToExpandoObject(System.Data.DataRow)">
            <summary>A DataRow extension method that converts the @this to an expando object.</summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a dynamic.</returns>
        </member>
        <member name="M:Extensions.FirstRow(System.Data.DataTable)">
            <summary>
                A DataTable extension method that return the first row.
            </summary>
            <param name="this">The table to act on.</param>
            <returns>The first row of the table.</returns>
        </member>
        <member name="M:Extensions.LastRow(System.Data.DataTable)">
            <summary>A DataTable extension method that last row.</summary>
            <param name="this">The @this to act on.</param>
            <returns>A DataRow.</returns>
        </member>
        <member name="M:Extensions.ToEntities``1(System.Data.DataTable)">
            <summary>
                Enumerates to entities in this collection.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>@this as an IEnumerable&lt;T&gt;</returns>
        </member>
        <member name="M:Extensions.ToExpandoObjects(System.Data.DataTable)">
            <summary>
                Enumerates to expando objects in this collection.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as an IEnumerable&lt;dynamic&gt;</returns>
            ###
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:Extensions.ContainsColumn(System.Data.IDataReader,System.Int32)">
            <summary>
                An IDataReader extension method that query if '@this' contains column.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="columnIndex">Zero-based index of the column.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Extensions.ContainsColumn(System.Data.IDataReader,System.String)">
            <summary>
                An IDataReader extension method that query if '@this' contains column.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="columnName">Name of the column.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:Extensions.ForEach(System.Data.IDataReader,System.Action{System.Data.IDataReader})">
            <summary>
                An IDataReader extension method that applies an operation to all items in this collection.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="action">The action.</param>
            <returns>An IDataReader.</returns>
        </member>
        <member name="M:Extensions.GetColumnNames(System.Data.IDataRecord)">
            <summary>
                Gets the column names in this collection.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>An enumerator that allows foreach to be used to get the column names in this collection.</returns>
        </member>
        <member name="M:Extensions.GetValueAs``1(System.Data.IDataReader,System.Int32)">
            <summary>
                An IDataReader extension method that gets value as.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="index">Zero-based index of the.</param>
            <returns>The value as.</returns>
        </member>
        <member name="M:Extensions.GetValueAs``1(System.Data.IDataReader,System.String)">
            <summary>
                An IDataReader extension method that gets value as.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="columnName">Name of the column.</param>
            <returns>The value as.</returns>
        </member>
        <member name="M:Extensions.GetValueAsOrDefault``1(System.Data.IDataReader,System.Int32)">
            <summary>
                An IDataReader extension method that gets value as or default.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="index">Zero-based index of the.</param>
            <returns>The value as or default.</returns>
        </member>
        <member name="M:Extensions.GetValueAsOrDefault``1(System.Data.IDataReader,System.Int32,``0)">
            <summary>
                An IDataReader extension method that gets value as or default.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="index">Zero-based index of the.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The value as or default.</returns>
        </member>
        <member name="M:Extensions.GetValueAsOrDefault``1(System.Data.IDataReader,System.Int32,System.Func{System.Data.IDataReader,System.Int32,``0})">
            <summary>
                An IDataReader extension method that gets value as or default.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="index">Zero-based index of the.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The value as or default.</returns>
        </member>
        <member name="M:Extensions.GetValueAsOrDefault``1(System.Data.IDataReader,System.String)">
            <summary>
                An IDataReader extension method that gets value as or default.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="columnName">Name of the column.</param>
            <returns>The value as or default.</returns>
        </member>
        <member name="M:Extensions.GetValueAsOrDefault``1(System.Data.IDataReader,System.String,``0)">
            <summary>
                An IDataReader extension method that gets value as or default.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="columnName">Name of the column.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The value as or default.</returns>
        </member>
        <member name="M:Extensions.GetValueAsOrDefault``1(System.Data.IDataReader,System.String,System.Func{System.Data.IDataReader,System.String,``0})">
            <summary>
                An IDataReader extension method that gets value as or default.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="columnName">Name of the column.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The value as or default.</returns>
        </member>
        <member name="M:Extensions.GetValueTo``1(System.Data.IDataReader,System.Int32)">
            <summary>
                An IDataReader extension method that gets value to.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="index">Zero-based index of the.</param>
            <returns>The value to.</returns>
        </member>
        <member name="M:Extensions.GetValueTo``1(System.Data.IDataReader,System.String)">
            <summary>
                An IDataReader extension method that gets value to.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="columnName">Name of the column.</param>
            <returns>The value to.</returns>
        </member>
        <member name="M:Extensions.GetValueToOrDefault``1(System.Data.IDataReader,System.Int32)">
            <summary>
                An IDataReader extension method that gets value to or default.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="index">Zero-based index of the.</param>
            <returns>The value to or default.</returns>
        </member>
        <member name="M:Extensions.GetValueToOrDefault``1(System.Data.IDataReader,System.Int32,``0)">
            <summary>
                An IDataReader extension method that gets value to or default.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="index">Zero-based index of the.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The value to or default.</returns>
        </member>
        <member name="M:Extensions.GetValueToOrDefault``1(System.Data.IDataReader,System.Int32,System.Func{System.Data.IDataReader,System.Int32,``0})">
            <summary>
                An IDataReader extension method that gets value to or default.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="index">Zero-based index of the.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The value to or default.</returns>
        </member>
        <member name="M:Extensions.GetValueToOrDefault``1(System.Data.IDataReader,System.String)">
            <summary>
                An IDataReader extension method that gets value to or default.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="columnName">Name of the column.</param>
            <returns>The value to or default.</returns>
        </member>
        <member name="M:Extensions.GetValueToOrDefault``1(System.Data.IDataReader,System.String,``0)">
            <summary>
                An IDataReader extension method that gets value to or default.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="columnName">Name of the column.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The value to or default.</returns>
        </member>
        <member name="M:Extensions.GetValueToOrDefault``1(System.Data.IDataReader,System.String,System.Func{System.Data.IDataReader,System.String,``0})">
            <summary>
                An IDataReader extension method that gets value to or default.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="columnName">Name of the column.</param>
            <param name="defaultValueFactory">The default value factory.</param>
            <returns>The value to or default.</returns>
        </member>
        <member name="M:Extensions.IsDBNull(System.Data.IDataReader,System.String)">
            <summary>
                An IDataReader extension method that query if '@this' is database null.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="name">The name.</param>
            <returns>true if database null, false if not.</returns>
        </member>
        <member name="M:Extensions.ToDataTable(System.Data.IDataReader)">
            <summary>
                An IDataReader extension method that converts the @this to a data table.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a DataTable.</returns>
        </member>
        <member name="M:Extensions.ToEntities``1(System.Data.IDataReader)">
            <summary>
                Enumerates to entities in this collection.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>@this as an IEnumerable&lt;T&gt;</returns>
        </member>
        <member name="M:Extensions.ToEntity``1(System.Data.IDataReader)">
            <summary>
                An IDataReader extension method that converts the @this to an entity.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>@this as a T.</returns>
        </member>
        <member name="M:Extensions.ToExpandoObject(System.Data.IDataReader)">
            <summary>
                An IDataReader extension method that converts the @this to an expando object.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a dynamic.</returns>
        </member>
        <member name="M:Extensions.ToExpandoObjects(System.Data.IDataReader)">
            <summary>
                Enumerates to expando objects in this collection.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as an IEnumerable&lt;dynamic&gt;</returns>
        </member>
        <member name="M:Extensions.EnsureOpen(System.Data.IDbConnection)">
            <summary>
                An IDbConnection extension method that ensures that open.
            </summary>
            <param name="this">The @this to act on.</param>
        </member>
        <member name="M:Extensions.IsConnectionOpen(System.Data.Common.DbConnection)">
            <summary>A DbConnection extension method that queries if a connection is open.</summary>
            <param name="this">The @this to act on.</param>
            <returns>true if a connection is open, false if not.</returns>
        </member>
        <member name="M:Extensions.IsNotConnectionOpen(System.Data.Common.DbConnection)">
            <summary>A DbConnection extension method that queries if a not connection is open.</summary>
            <param name="this">The @this to act on.</param>
            <returns>true if a not connection is open, false if not.</returns>
        </member>
        <member name="M:Extensions.GetConnection(System.Data.SqlClient.SqlBulkCopy)">
            <summary>A SqlBulkCopy extension method that gets a connection.</summary>
            <param name="this">The @this to act on.</param>
            <returns>The connection.</returns>
        </member>
        <member name="M:Extensions.GetTransaction(System.Data.SqlClient.SqlBulkCopy)">
            <summary>A SqlBulkCopy extension method that gets a transaction.</summary>
            <param name="this">The @this to act on.</param>
            <returns>The transaction.</returns>
        </member>
        <member name="M:Extensions.ExecuteDataSet(System.Data.SqlClient.SqlCommand)">
            <summary>
                Executes the query, and returns the result set as DataSet.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>A DataSet that is equivalent to the result set.</returns>
        </member>
        <member name="M:Extensions.ExecuteDataTable(System.Data.SqlClient.SqlCommand)">
            <summary>
                Executes the query, and returns the first result set as DataTable.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>A DataTable that is equivalent to the first result set.</returns>
        </member>
        <member name="M:Extensions.ExecuteDataSet(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[],System.Data.CommandType,System.Data.SqlClient.SqlTransaction)">
            <summary>
                A SqlConnection extension method that executes the data set operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="commandType">Type of the command.</param>
            <param name="transaction">The transaction.</param>
            <returns>A DataSet.</returns>
        </member>
        <member name="M:Extensions.ExecuteDataSet(System.Data.SqlClient.SqlConnection,System.Action{System.Data.SqlClient.SqlCommand})">
            <summary>
                A SqlConnection extension method that executes the data set operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="commandFactory">The command factory.</param>
            <returns>A DataSet.</returns>
        </member>
        <member name="M:Extensions.ExecuteDataSet(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
                A SqlConnection extension method that executes the data set operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <returns>A DataSet.</returns>
        </member>
        <member name="M:Extensions.ExecuteDataSet(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
                A SqlConnection extension method that executes the data set operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="transaction">The transaction.</param>
            <returns>A DataSet.</returns>
        </member>
        <member name="M:Extensions.ExecuteDataSet(System.Data.SqlClient.SqlConnection,System.String,System.Data.CommandType)">
            <summary>
                A SqlConnection extension method that executes the data set operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <returns>A DataSet.</returns>
        </member>
        <member name="M:Extensions.ExecuteDataSet(System.Data.SqlClient.SqlConnection,System.String,System.Data.CommandType,System.Data.SqlClient.SqlTransaction)">
            <summary>
                A SqlConnection extension method that executes the data set operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <param name="transaction">The transaction.</param>
            <returns>A DataSet.</returns>
        </member>
        <member name="M:Extensions.ExecuteDataSet(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
                A SqlConnection extension method that executes the data set operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <returns>A DataSet.</returns>
        </member>
        <member name="M:Extensions.ExecuteDataSet(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[],System.Data.SqlClient.SqlTransaction)">
            <summary>
                A SqlConnection extension method that executes the data set operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="transaction">The transaction.</param>
            <returns>A DataSet.</returns>
        </member>
        <member name="M:Extensions.ExecuteDataSet(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[],System.Data.CommandType)">
            <summary>
                A SqlConnection extension method that executes the data set operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="commandType">Type of the command.</param>
            <returns>A DataSet.</returns>
        </member>
        <member name="M:Extensions.ExecuteDataTable(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[],System.Data.CommandType,System.Data.SqlClient.SqlTransaction)">
            <summary>
                A SqlConnection extension method that executes the data table operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="commandType">Type of the command.</param>
            <param name="transaction">The transaction.</param>
            <returns>A DataTable.</returns>
        </member>
        <member name="M:Extensions.ExecuteDataTable(System.Data.SqlClient.SqlConnection,System.Action{System.Data.SqlClient.SqlCommand})">
            <summary>
                A SqlConnection extension method that executes the data table operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="commandFactory">The command factory.</param>
            <returns>A DataTable.</returns>
        </member>
        <member name="M:Extensions.ExecuteDataTable(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
                A SqlConnection extension method that executes the data table operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <returns>A DataTable.</returns>
        </member>
        <member name="M:Extensions.ExecuteDataTable(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
                A SqlConnection extension method that executes the data table operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="transaction">The transaction.</param>
            <returns>A DataTable.</returns>
        </member>
        <member name="M:Extensions.ExecuteDataTable(System.Data.SqlClient.SqlConnection,System.String,System.Data.CommandType)">
            <summary>
                A SqlConnection extension method that executes the data table operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <returns>A DataTable.</returns>
        </member>
        <member name="M:Extensions.ExecuteDataTable(System.Data.SqlClient.SqlConnection,System.String,System.Data.CommandType,System.Data.SqlClient.SqlTransaction)">
            <summary>
                A SqlConnection extension method that executes the data table operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <param name="transaction">The transaction.</param>
            <returns>A DataTable.</returns>
        </member>
        <member name="M:Extensions.ExecuteDataTable(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
                A SqlConnection extension method that executes the data table operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <returns>A DataTable.</returns>
        </member>
        <member name="M:Extensions.ExecuteDataTable(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[],System.Data.SqlClient.SqlTransaction)">
            <summary>
                A SqlConnection extension method that executes the data table operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="transaction">The transaction.</param>
            <returns>A DataTable.</returns>
        </member>
        <member name="M:Extensions.ExecuteDataTable(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[],System.Data.CommandType)">
            <summary>
                A SqlConnection extension method that executes the data table operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="commandType">Type of the command.</param>
            <returns>A DataTable.</returns>
        </member>
        <member name="M:Extensions.ExecuteEntities``1(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[],System.Data.CommandType,System.Data.SqlClient.SqlTransaction)">
            <summary>
                Enumerates execute entities in this collection.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="commandType">Type of the command.</param>
            <param name="transaction">The transaction.</param>
            <returns>An enumerator that allows foreach to be used to process execute entities in this collection.</returns>
        </member>
        <member name="M:Extensions.ExecuteEntities``1(System.Data.SqlClient.SqlConnection,System.Action{System.Data.SqlClient.SqlCommand})">
            <summary>
                Enumerates execute entities in this collection.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="commandFactory">The command factory.</param>
            <returns>An enumerator that allows foreach to be used to process execute entities in this collection.</returns>
        </member>
        <member name="M:Extensions.ExecuteEntities``1(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
                Enumerates execute entities in this collection.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <returns>An enumerator that allows foreach to be used to process execute entities in this collection.</returns>
        </member>
        <member name="M:Extensions.ExecuteEntities``1(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
                Enumerates execute entities in this collection.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="transaction">The transaction.</param>
            <returns>An enumerator that allows foreach to be used to process execute entities in this collection.</returns>
        </member>
        <member name="M:Extensions.ExecuteEntities``1(System.Data.SqlClient.SqlConnection,System.String,System.Data.CommandType)">
            <summary>
                Enumerates execute entities in this collection.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <returns>An enumerator that allows foreach to be used to process execute entities in this collection.</returns>
        </member>
        <member name="M:Extensions.ExecuteEntities``1(System.Data.SqlClient.SqlConnection,System.String,System.Data.CommandType,System.Data.SqlClient.SqlTransaction)">
            <summary>
                Enumerates execute entities in this collection.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <param name="transaction">The transaction.</param>
            <returns>An enumerator that allows foreach to be used to process execute entities in this collection.</returns>
        </member>
        <member name="M:Extensions.ExecuteEntities``1(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
                Enumerates execute entities in this collection.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <returns>An enumerator that allows foreach to be used to process execute entities in this collection.</returns>
        </member>
        <member name="M:Extensions.ExecuteEntities``1(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[],System.Data.SqlClient.SqlTransaction)">
            <summary>
                Enumerates execute entities in this collection.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="transaction">The transaction.</param>
            <returns>An enumerator that allows foreach to be used to process execute entities in this collection.</returns>
        </member>
        <member name="M:Extensions.ExecuteEntities``1(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[],System.Data.CommandType)">
            <summary>
                Enumerates execute entities in this collection.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="commandType">Type of the command.</param>
            <returns>An enumerator that allows foreach to be used to process execute entities in this collection.</returns>
        </member>
        <member name="M:Extensions.ExecuteEntity``1(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[],System.Data.CommandType,System.Data.SqlClient.SqlTransaction)">
            <summary>
                A SqlConnection extension method that executes the entity operation.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="commandType">Type of the command.</param>
            <param name="transaction">The transaction.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:Extensions.ExecuteEntity``1(System.Data.SqlClient.SqlConnection,System.Action{System.Data.SqlClient.SqlCommand})">
            <summary>
                A SqlConnection extension method that executes the entity operation.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="commandFactory">The command factory.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:Extensions.ExecuteEntity``1(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
                A SqlConnection extension method that executes the entity operation.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:Extensions.ExecuteEntity``1(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
                A SqlConnection extension method that executes the entity operation.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="transaction">The transaction.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:Extensions.ExecuteEntity``1(System.Data.SqlClient.SqlConnection,System.String,System.Data.CommandType)">
            <summary>
                A SqlConnection extension method that executes the entity operation.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:Extensions.ExecuteEntity``1(System.Data.SqlClient.SqlConnection,System.String,System.Data.CommandType,System.Data.SqlClient.SqlTransaction)">
            <summary>
                A SqlConnection extension method that executes the entity operation.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <param name="transaction">The transaction.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:Extensions.ExecuteEntity``1(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
                A SqlConnection extension method that executes the entity operation.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:Extensions.ExecuteEntity``1(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[],System.Data.SqlClient.SqlTransaction)">
            <summary>
                A SqlConnection extension method that executes the entity operation.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="transaction">The transaction.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:Extensions.ExecuteEntity``1(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[],System.Data.CommandType)">
            <summary>
                A SqlConnection extension method that executes the entity operation.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="commandType">Type of the command.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:Extensions.ExecuteExpandoObject(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[],System.Data.CommandType,System.Data.SqlClient.SqlTransaction)">
            <summary>
                A SqlConnection extension method that executes the expando object operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="commandType">Type of the command.</param>
            <param name="transaction">The transaction.</param>
            <returns>A dynamic.</returns>
        </member>
        <member name="M:Extensions.ExecuteExpandoObject(System.Data.SqlClient.SqlConnection,System.Action{System.Data.SqlClient.SqlCommand})">
            <summary>
                A SqlConnection extension method that executes the expando object operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="commandFactory">The command factory.</param>
            <returns>A dynamic.</returns>
        </member>
        <member name="M:Extensions.ExecuteExpandoObject(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
                A SqlConnection extension method that executes the expando object operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <returns>A dynamic.</returns>
        </member>
        <member name="M:Extensions.ExecuteExpandoObject(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
                A SqlConnection extension method that executes the expando object operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="transaction">The transaction.</param>
            <returns>A dynamic.</returns>
        </member>
        <member name="M:Extensions.ExecuteExpandoObject(System.Data.SqlClient.SqlConnection,System.String,System.Data.CommandType)">
            <summary>
                A SqlConnection extension method that executes the expando object operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <returns>A dynamic.</returns>
        </member>
        <member name="M:Extensions.ExecuteExpandoObject(System.Data.SqlClient.SqlConnection,System.String,System.Data.CommandType,System.Data.SqlClient.SqlTransaction)">
            <summary>
                A SqlConnection extension method that executes the expando object operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <param name="transaction">The transaction.</param>
            <returns>A dynamic.</returns>
        </member>
        <member name="M:Extensions.ExecuteExpandoObject(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
                A SqlConnection extension method that executes the expando object operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <returns>A dynamic.</returns>
        </member>
        <member name="M:Extensions.ExecuteExpandoObject(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[],System.Data.SqlClient.SqlTransaction)">
            <summary>
                A SqlConnection extension method that executes the expando object operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="transaction">The transaction.</param>
            <returns>A dynamic.</returns>
        </member>
        <member name="M:Extensions.ExecuteExpandoObject(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[],System.Data.CommandType)">
            <summary>
                A SqlConnection extension method that executes the expando object operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="commandType">Type of the command.</param>
            <returns>A dynamic.</returns>
        </member>
        <member name="M:Extensions.ExecuteExpandoObjects(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[],System.Data.CommandType,System.Data.SqlClient.SqlTransaction)">
            <summary>
                Enumerates execute expando objects in this collection.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="commandType">Type of the command.</param>
            <param name="transaction">The transaction.</param>
            <returns>
                An enumerator that allows foreach to be used to process execute expando objects in this collection.
            </returns>
        </member>
        <member name="M:Extensions.ExecuteExpandoObjects(System.Data.SqlClient.SqlConnection,System.Action{System.Data.SqlClient.SqlCommand})">
            <summary>
                Enumerates execute expando objects in this collection.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="commandFactory">The command factory.</param>
            <returns>
                An enumerator that allows foreach to be used to process execute expando objects in this collection.
            </returns>
        </member>
        <member name="M:Extensions.ExecuteExpandoObjects(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
                Enumerates execute expando objects in this collection.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <returns>
                An enumerator that allows foreach to be used to process execute expando objects in this collection.
            </returns>
        </member>
        <member name="M:Extensions.ExecuteExpandoObjects(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
                Enumerates execute expando objects in this collection.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="transaction">The transaction.</param>
            <returns>
                An enumerator that allows foreach to be used to process execute expando objects in this collection.
            </returns>
        </member>
        <member name="M:Extensions.ExecuteExpandoObjects(System.Data.SqlClient.SqlConnection,System.String,System.Data.CommandType)">
            <summary>
                Enumerates execute expando objects in this collection.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <returns>
                An enumerator that allows foreach to be used to process execute expando objects in this collection.
            </returns>
        </member>
        <member name="M:Extensions.ExecuteExpandoObjects(System.Data.SqlClient.SqlConnection,System.String,System.Data.CommandType,System.Data.SqlClient.SqlTransaction)">
            <summary>
                Enumerates execute expando objects in this collection.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <param name="transaction">The transaction.</param>
            <returns>
                An enumerator that allows foreach to be used to process execute expando objects in this collection.
            </returns>
        </member>
        <member name="M:Extensions.ExecuteExpandoObjects(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
                Enumerates execute expando objects in this collection.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <returns>
                An enumerator that allows foreach to be used to process execute expando objects in this collection.
            </returns>
        </member>
        <member name="M:Extensions.ExecuteExpandoObjects(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[],System.Data.SqlClient.SqlTransaction)">
            <summary>
                Enumerates execute expando objects in this collection.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="transaction">The transaction.</param>
            <returns>
                An enumerator that allows foreach to be used to process execute expando objects in this collection.
            </returns>
        </member>
        <member name="M:Extensions.ExecuteExpandoObjects(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[],System.Data.CommandType)">
            <summary>
                Enumerates execute expando objects in this collection.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="commandType">Type of the command.</param>
            <returns>
                An enumerator that allows foreach to be used to process execute expando objects in this collection.
            </returns>
        </member>
        <member name="M:Extensions.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[],System.Data.CommandType,System.Data.SqlClient.SqlTransaction)">
            <summary>
                A SqlConnection extension method that executes the non query operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="commandType">Type of the command.</param>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:Extensions.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Action{System.Data.SqlClient.SqlCommand})">
            <summary>
                A SqlConnection extension method that executes the non query operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="commandFactory">The command factory.</param>
        </member>
        <member name="M:Extensions.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
                A SqlConnection extension method that executes the non query operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
        </member>
        <member name="M:Extensions.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
                A SqlConnection extension method that executes the non query operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:Extensions.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Data.CommandType)">
            <summary>
                A SqlConnection extension method that executes the non query operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="commandType">Type of the command.</param>
        </member>
        <member name="M:Extensions.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Data.CommandType,System.Data.SqlClient.SqlTransaction)">
            <summary>
                A SqlConnection extension method that executes the non query operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:Extensions.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
                A SqlConnection extension method that executes the non query operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
        </member>
        <member name="M:Extensions.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[],System.Data.SqlClient.SqlTransaction)">
            <summary>
                A SqlConnection extension method that executes the non query operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:Extensions.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[],System.Data.CommandType)">
            <summary>
                A SqlConnection extension method that executes the non query operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="commandType">Type of the command.</param>
        </member>
        <member name="M:Extensions.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[],System.Data.CommandType,System.Data.SqlClient.SqlTransaction)">
            <summary>
                A SqlConnection extension method that executes the reader operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="commandType">Type of the command.</param>
            <param name="transaction">The transaction.</param>
            <returns>A SqlDataReader.</returns>
        </member>
        <member name="M:Extensions.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Action{System.Data.SqlClient.SqlCommand})">
            <summary>
                A SqlConnection extension method that executes the reader operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="commandFactory">The command factory.</param>
            <returns>A SqlDataReader.</returns>
        </member>
        <member name="M:Extensions.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
                A SqlConnection extension method that executes the reader operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <returns>A SqlDataReader.</returns>
        </member>
        <member name="M:Extensions.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
                A SqlConnection extension method that executes the reader operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="transaction">The transaction.</param>
            <returns>A SqlDataReader.</returns>
        </member>
        <member name="M:Extensions.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Data.CommandType)">
            <summary>
                A SqlConnection extension method that executes the reader operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <returns>A SqlDataReader.</returns>
        </member>
        <member name="M:Extensions.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Data.CommandType,System.Data.SqlClient.SqlTransaction)">
            <summary>
                A SqlConnection extension method that executes the reader operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <param name="transaction">The transaction.</param>
            <returns>A SqlDataReader.</returns>
        </member>
        <member name="M:Extensions.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
                A SqlConnection extension method that executes the reader operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <returns>A SqlDataReader.</returns>
        </member>
        <member name="M:Extensions.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[],System.Data.SqlClient.SqlTransaction)">
            <summary>
                A SqlConnection extension method that executes the reader operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="transaction">The transaction.</param>
            <returns>A SqlDataReader.</returns>
        </member>
        <member name="M:Extensions.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[],System.Data.CommandType)">
            <summary>
                A SqlConnection extension method that executes the reader operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="commandType">Type of the command.</param>
            <returns>A SqlDataReader.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[],System.Data.CommandType,System.Data.SqlClient.SqlTransaction)">
            <summary>
                A SqlConnection extension method that executes the scalar operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="commandType">Type of the command.</param>
            <param name="transaction">The transaction.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Action{System.Data.SqlClient.SqlCommand})">
            <summary>
                A SqlConnection extension method that executes the scalar operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="commandFactory">The command factory.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
                A SqlConnection extension method that executes the scalar operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
                A SqlConnection extension method that executes the scalar operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="transaction">The transaction.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Data.CommandType)">
            <summary>
                A SqlConnection extension method that executes the scalar operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Data.CommandType,System.Data.SqlClient.SqlTransaction)">
            <summary>
                A SqlConnection extension method that executes the scalar operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <param name="transaction">The transaction.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
                A SqlConnection extension method that executes the scalar operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[],System.Data.SqlClient.SqlTransaction)">
            <summary>
                A SqlConnection extension method that executes the scalar operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="transaction">The transaction.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[],System.Data.CommandType)">
            <summary>
                A SqlConnection extension method that executes the scalar operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="commandType">Type of the command.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalarAs``1(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[],System.Data.CommandType,System.Data.SqlClient.SqlTransaction)">
            <summary>
                A SqlConnection extension method that executes the scalar operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="commandType">Type of the command.</param>
            <param name="transaction">The transaction.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalarAs``1(System.Data.SqlClient.SqlConnection,System.Action{System.Data.SqlClient.SqlCommand})">
            <summary>
                A SqlConnection extension method that executes the scalar operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="commandFactory">The command factory.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalarAs``1(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
                A SqlConnection extension method that executes the scalar operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalarAs``1(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
                A SqlConnection extension method that executes the scalar operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="transaction">The transaction.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalarAs``1(System.Data.SqlClient.SqlConnection,System.String,System.Data.CommandType)">
            <summary>
                A SqlConnection extension method that executes the scalar operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalarAs``1(System.Data.SqlClient.SqlConnection,System.String,System.Data.CommandType,System.Data.SqlClient.SqlTransaction)">
            <summary>
                A SqlConnection extension method that executes the scalar operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <param name="transaction">The transaction.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalarAs``1(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
                A SqlConnection extension method that executes the scalar operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalarAs``1(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[],System.Data.SqlClient.SqlTransaction)">
            <summary>
                A SqlConnection extension method that executes the scalar operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="transaction">The transaction.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalarAs``1(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[],System.Data.CommandType)">
            <summary>
                A SqlConnection extension method that executes the scalar operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="commandType">Type of the command.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalarTo``1(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[],System.Data.CommandType,System.Data.SqlClient.SqlTransaction)">
            <summary>
                A SqlConnection extension method that executes the scalar operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="commandType">Type of the command.</param>
            <param name="transaction">The transaction.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalarTo``1(System.Data.SqlClient.SqlConnection,System.Action{System.Data.SqlClient.SqlCommand})">
            <summary>
                A SqlConnection extension method that executes the scalar operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="commandFactory">The command factory.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalarTo``1(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
                A SqlConnection extension method that executes the scalar operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalarTo``1(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
                A SqlConnection extension method that executes the scalar operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="transaction">The transaction.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalarTo``1(System.Data.SqlClient.SqlConnection,System.String,System.Data.CommandType)">
            <summary>
                A SqlConnection extension method that executes the scalar operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalarTo``1(System.Data.SqlClient.SqlConnection,System.String,System.Data.CommandType,System.Data.SqlClient.SqlTransaction)">
            <summary>
                A SqlConnection extension method that executes the scalar operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <param name="transaction">The transaction.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalarTo``1(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
                A SqlConnection extension method that executes the scalar operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalarTo``1(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[],System.Data.SqlClient.SqlTransaction)">
            <summary>
                A SqlConnection extension method that executes the scalar operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="transaction">The transaction.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:Extensions.ExecuteScalarTo``1(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[],System.Data.CommandType)">
            <summary>
                A SqlConnection extension method that executes the scalar operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="commandType">Type of the command.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:Extensions.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[],System.Data.CommandType,System.Data.SqlClient.SqlTransaction)">
            <summary>
                A SqlConnection extension method that executes the XML reader operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="commandType">Type of the command.</param>
            <param name="transaction">The transaction.</param>
            <returns>An XmlReader.</returns>
        </member>
        <member name="M:Extensions.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Action{System.Data.SqlClient.SqlCommand})">
            <summary>
                A SqlConnection extension method that executes the XML reader operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="commandFactory">The command factory.</param>
            <returns>An XmlReader.</returns>
        </member>
        <member name="M:Extensions.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
                A SqlConnection extension method that executes the XML reader operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <returns>An XmlReader.</returns>
        </member>
        <member name="M:Extensions.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
                A SqlConnection extension method that executes the XML reader operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="transaction">The transaction.</param>
            <returns>An XmlReader.</returns>
        </member>
        <member name="M:Extensions.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Data.CommandType)">
            <summary>
                A SqlConnection extension method that executes the XML reader operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <returns>An XmlReader.</returns>
        </member>
        <member name="M:Extensions.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Data.CommandType,System.Data.SqlClient.SqlTransaction)">
            <summary>
                A SqlConnection extension method that executes the XML reader operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="commandType">Type of the command.</param>
            <param name="transaction">The transaction.</param>
            <returns>An XmlReader.</returns>
        </member>
        <member name="M:Extensions.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
                A SqlConnection extension method that executes the XML reader operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <returns>An XmlReader.</returns>
        </member>
        <member name="M:Extensions.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[],System.Data.SqlClient.SqlTransaction)">
            <summary>
                A SqlConnection extension method that executes the XML reader operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="transaction">The transaction.</param>
            <returns>An XmlReader.</returns>
        </member>
        <member name="M:Extensions.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlParameter[],System.Data.CommandType)">
            <summary>
                A SqlConnection extension method that executes the XML reader operation.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="cmdText">The command text.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <param name="commandType">Type of the command.</param>
            <returns>An XmlReader.</returns>
        </member>
        <member name="M:Extensions.AddRangeWithValue(System.Data.SqlClient.SqlParameterCollection,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
                A SqlParameterCollection extension method that adds a range with value to 'values'.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:Extensions.ToHtml(System.Drawing.Color)">
            <summary>
                Translates the specified  structure to an HTML string color representation.
            </summary>
            <param name="c">The  structure to translate.</param>
            <returns>The string that represents the HTML color.</returns>
        </member>
        <member name="M:Extensions.ToOle(System.Drawing.Color)">
            <summary>
                Translates the specified  structure to an OLE color.
            </summary>
            <param name="c">The  structure to translate.</param>
            <returns>The OLE color value.</returns>
        </member>
        <member name="M:Extensions.ToWin32(System.Drawing.Color)">
            <summary>
                Translates the specified  structure to a Windows color.
            </summary>
            <param name="c">The  structure to translate.</param>
            <returns>The Windows color value.</returns>
        </member>
        <member name="M:Extensions.Cut(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                An Image extension method that cuts an image.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <returns>The cutted image.</returns>
        </member>
        <member name="M:Extensions.Scale(System.Drawing.Image,System.Double)">
            <summary>
                An Image extension method that scales an image to the specific ratio.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="ratio">The ratio.</param>
            <returns>The scaled image to the specific ratio.</returns>
        </member>
        <member name="M:Extensions.Scale(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
                An Image extension method that scales an image to a specific with and height.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns>The scaled image to the specific width and height.</returns>
        </member>
        <member name="M:Extensions.Delete(System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo})">
            <summary>
                An IEnumerable&lt;DirectoryInfo&gt; extension method that deletes the given @this.
            </summary>
            <param name="this">The @this to act on.</param>
        </member>
        <member name="M:Extensions.ForEach(System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo},System.Action{System.IO.DirectoryInfo})">
            <summary>
                Enumerates for each in this collection.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="action">The action.</param>
            <returns>An enumerator that allows foreach to be used to process for each in this collection.</returns>
        </member>
        <member name="M:Extensions.Delete(System.Collections.Generic.IEnumerable{System.IO.FileInfo})">
            <summary>
                An IEnumerable&lt;FileInfo&gt; extension method that deletes the given @this.
            </summary>
            <param name="this">The @this to act on.</param>
        </member>
        <member name="M:Extensions.ForEach(System.Collections.Generic.IEnumerable{System.IO.FileInfo},System.Action{System.IO.FileInfo})">
            <summary>
                Enumerates for each in this collection.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="action">The action.</param>
            <returns>An enumerator that allows foreach to be used to process for each in this collection.</returns>
        </member>
        <member name="M:Extensions.PathCombine(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                An IEnumerable&lt;string&gt; extension method that combine all value to return a path.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The path.</returns>
        </member>
        <member name="M:Extensions.Clear(System.IO.DirectoryInfo)">
            <summary>
                A DirectoryInfo extension method that clears all files and directories in this directory.
            </summary>
            <param name="obj">The obj to act on.</param>
        </member>
        <member name="M:Extensions.CopyTo(System.IO.DirectoryInfo,System.String)">
            <summary>A DirectoryInfo extension method that copies to.</summary>
            <param name="obj">The obj to act on.</param>
            <param name="destDirName">Pathname of the destination directory.</param>
        </member>
        <member name="M:Extensions.CopyTo(System.IO.DirectoryInfo,System.String,System.String)">
            <summary>A DirectoryInfo extension method that copies to.</summary>
            <param name="obj">The obj to act on.</param>
            <param name="destDirName">Pathname of the destination directory.</param>
            <param name="searchPattern">A pattern specifying the search.</param>
        </member>
        <member name="M:Extensions.CopyTo(System.IO.DirectoryInfo,System.String,System.IO.SearchOption)">
            <summary>A DirectoryInfo extension method that copies to.</summary>
            <param name="obj">The obj to act on.</param>
            <param name="destDirName">Pathname of the destination directory.</param>
            <param name="searchOption">The search option.</param>
        </member>
        <member name="M:Extensions.CopyTo(System.IO.DirectoryInfo,System.String,System.String,System.IO.SearchOption)">
            <summary>A DirectoryInfo extension method that copies to.</summary>
            <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            <param name="obj">The obj to act on.</param>
            <param name="destDirName">Pathname of the destination directory.</param>
            <param name="searchPattern">A pattern specifying the search.</param>
            <param name="searchOption">The search option.</param>
        </member>
        <member name="M:Extensions.CreateAllDirectories(System.IO.DirectoryInfo)">
            <summary>
                Creates all directories and subdirectories in the specified @this.
            </summary>
            <param name="this">The directory @this to create.</param>
            <returns>An object that represents the directory for the specified @this.</returns>
            ###
            <exception cref="T:System.IO.IOException">
                The directory specified by <paramref name="this" /> is a file.-or-The
                network name is not known.
            </exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this" /> is a zero-length string, contains only
                white space, or contains one or more invalid characters as defined by
                <see
                    cref="F:System.IO.Path.InvalidPathChars" />
                .-or-<paramref name="this" /> is prefixed with, or contains only a colon character (:).
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or both exceed the system-
                defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file
                names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                The specified @this is invalid (for example, it is on
                an unmapped drive).
            </exception>
            ###
            <exception cref="T:System.NotSupportedException">
                <paramref name="this" /> contains a colon character (:) that
                is not part of a drive label ("C:\").
            </exception>
        </member>
        <member name="M:Extensions.CreateAllDirectories(System.IO.DirectoryInfo,System.Security.AccessControl.DirectorySecurity)">
            <summary>
                Creates all the directories in the specified @this, applying the specified Windows security.
            </summary>
            <param name="this">The directory to create.</param>
            <param name="directorySecurity">The access control to apply to the directory.</param>
            <returns>An object that represents the directory for the specified @this.</returns>
            ###
            <exception cref="T:System.IO.IOException">
                The directory specified by <paramref name="this" /> is a file.-or-The
                network name is not known.
            </exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this" /> is a zero-length string, contains only
                white space, or contains one or more invalid characters as defined by
                <see
                    cref="F:System.IO.Path.InvalidPathChars" />
                . -or-<paramref name="this" /> is prefixed with, or contains only a colon character (:).
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or both exceed the system-
                defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file
                names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                The specified @this is invalid (for example, it is on
                an unmapped drive).
            </exception>
            ###
            <exception cref="T:System.NotSupportedException">
                <paramref name="this" /> contains a colon character (:) that
                is not part of a drive label ("C:\").
            </exception>
        </member>
        <member name="M:Extensions.DeleteDirectoriesWhere(System.IO.DirectoryInfo,System.Func{System.IO.DirectoryInfo,System.Boolean})">
            <summary>
                A DirectoryInfo extension method that deletes the directories where.
            </summary>
            <param name="obj">The obj to act on.</param>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:Extensions.DeleteDirectoriesWhere(System.IO.DirectoryInfo,System.IO.SearchOption,System.Func{System.IO.DirectoryInfo,System.Boolean})">
            <summary>
                A DirectoryInfo extension method that deletes the directories where.
            </summary>
            <param name="obj">The obj to act on.</param>
            <param name="searchOption">The search option.</param>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:Extensions.DeleteFilesWhere(System.IO.DirectoryInfo,System.Func{System.IO.FileInfo,System.Boolean})">
            <summary>
                A DirectoryInfo extension method that deletes the files where.
            </summary>
            <param name="obj">The obj to act on.</param>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:Extensions.DeleteFilesWhere(System.IO.DirectoryInfo,System.IO.SearchOption,System.Func{System.IO.FileInfo,System.Boolean})">
            <summary>
                A DirectoryInfo extension method that deletes the files where.
            </summary>
            <param name="obj">The obj to act on.</param>
            <param name="searchOption">The search option.</param>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:Extensions.DeleteOlderThan(System.IO.DirectoryInfo,System.TimeSpan)">
            <summary>
                A DirectoryInfo extension method that deletes the older than.
            </summary>
            <param name="obj">The obj to act on.</param>
            <param name="timeSpan">The time span.</param>
        </member>
        <member name="M:Extensions.DeleteOlderThan(System.IO.DirectoryInfo,System.IO.SearchOption,System.TimeSpan)">
            <summary>
                A DirectoryInfo extension method that deletes the older than.
            </summary>
            <param name="obj">The obj to act on.</param>
            <param name="searchOption">The search option.</param>
            <param name="timeSpan">The time span.</param>
        </member>
        <member name="M:Extensions.EnsureDirectoryExists(System.IO.DirectoryInfo)">
            <summary>
                Creates all directories and subdirectories in the specified @this if the directory doesn't already exists.
                This methods is the same as FileInfo.CreateDirectory however it's less ambigues about what happen if the
                directory already exists.
            </summary>
            <param name="this">The directory @this to create.</param>
            <returns>An object that represents the directory for the specified @this.</returns>
            ###
            <exception cref="T:System.IO.IOException">
                The directory specified by <paramref name="this" /> is a file.-or-The
                network name is not known.
            </exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this" /> is a zero-length string, contains only
                white space, or contains one or more invalid characters as defined by
                <see
                    cref="F:System.IO.Path.InvalidPathChars" />
                .-or-<paramref name="this" /> is prefixed with, or contains only a colon character (:).
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or both exceed the system-
                defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file
                names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                The specified @this is invalid (for example, it is on
                an unmapped drive).
            </exception>
            ###
            <exception cref="T:System.NotSupportedException">
                <paramref name="this" /> contains a colon character (:) that
                is not part of a drive label ("C:\").
            </exception>
        </member>
        <member name="M:Extensions.EnsureDirectoryExists(System.IO.DirectoryInfo,System.Security.AccessControl.DirectorySecurity)">
            <summary>
                Creates all directories and subdirectories in the specified @this if the directory doesn't already exists.
                This methods is the same as FileInfo.CreateDirectory however it's less ambigues about what happen if the
                directory already exists.
            </summary>
            <param name="this">The directory to create.</param>
            <param name="directorySecurity">The access control to apply to the directory.</param>
            <returns>An object that represents the directory for the specified @this.</returns>
            ###
            <exception cref="T:System.IO.IOException">
                The directory specified by <paramref name="this" /> is a file.-or-The
                network name is not known.
            </exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this" /> is a zero-length string, contains only
                white space, or contains one or more invalid characters as defined by
                <see
                    cref="F:System.IO.Path.InvalidPathChars" />
                . -or-<paramref name="this" /> is prefixed with, or contains only a colon character (:).
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or both exceed the system-
                defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file
                names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                The specified @this is invalid (for example, it is on
                an unmapped drive).
            </exception>
            ###
            <exception cref="T:System.NotSupportedException">
                <paramref name="this" /> contains a colon character (:) that
                is not part of a drive label ("C:\").
            </exception>
        </member>
        <member name="M:Extensions.EnumerateDirectories(System.IO.DirectoryInfo)">
            <summary>
                Returns an enumerable collection of directory names in a specified @this.
            </summary>
            <param name="this">The directory to search.</param>
            <returns>
                An enumerable collection of the full names (including paths) for the directories in the directory specified by
                <paramref
                    name="this" />
                .
            </returns>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this " />is a zero-length string, contains only
                white space, or contains invalid characters as defined by
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid, such as
                referring to an unmapped drive.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">
                <paramref name="this" /> is a file name.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or combined exceed the
                system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters
                and file names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.EnumerateDirectories(System.IO.DirectoryInfo,System.String)">
            <summary>
                Returns an enumerable collection of directory names that match a search pattern in a specified @this.
            </summary>
            <param name="this">The directory to search.</param>
            <param name="searchPattern">
                The search string to match against the names of directories in
                <paramref name="this" />.
            </param>
            <returns>
                An enumerable collection of the full names (including paths) for the directories in the directory specified by
                <paramref
                    name="this" />
                and that match the specified search pattern.
            </returns>
            <example>
                <code>
                  using System;
                  using System.Collections.Generic;
                  using System.IO;
                  using System.Linq;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_EnumerateDirectories
                      {
                          [TestMethod]
                          public void EnumerateDirectories()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_EnumerateDirectories&quot;));
                              Directory.CreateDirectory(root.FullName);
                              root.CreateSubdirectory(&quot;Directory1&quot;);
                              root.CreateSubdirectory(&quot;Directory2&quot;);
            
                              // Exemples
                              List&lt;DirectoryInfo&gt; result = root.EnumerateDirectories().ToList();
            
                              // Unit Test
                              Assert.AreEqual(2, result.Count);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                  using System;
                  using System.Collections.Generic;
                  using System.IO;
                  using System.Linq;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_EnumerateDirectories
                      {
                          [TestMethod]
                          public void EnumerateDirectories()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_EnumerateDirectories&quot;));
                              Directory.CreateDirectory(root.FullName);
                              root.CreateSubdirectory(&quot;Directory1&quot;);
                              root.CreateSubdirectory(&quot;Directory2&quot;);
            
                              // Exemples
                              List&lt;DirectoryInfo&gt; result = root.EnumerateDirectories().ToList();
            
                              // Unit Test
                              Assert.AreEqual(2, result.Count);
                          }
                      }
                  }
            </code>
            </example>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this " />is a zero-length string, contains only
                white space, or contains invalid characters as defined by
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .- or -<paramref name="searchPattern" /> does not contain a valid pattern.
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.-or-
                <paramref name="searchPattern" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid, such as
                referring to an unmapped drive.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">
                <paramref name="this" /> is a file name.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or combined exceed the
                system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters
                and file names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.EnumerateDirectories(System.IO.DirectoryInfo,System.String,System.IO.SearchOption)">
            <summary>
                Returns an enumerable collection of directory names that match a search pattern in a specified @this, and
                optionally searches subdirectories.
            </summary>
            <param name="this">The directory to search.</param>
            <param name="searchPattern">
                The search string to match against the names of directories in
                <paramref name="this" />.
            </param>
            <param name="searchOption">
                One of the enumeration values that specifies whether the search operation should
                include only the current directory or should include all subdirectories.The default value is
                <see
                    cref="F:System.IO.SearchOption.TopDirectoryOnly" />
                .
            </param>
            <returns>
                An enumerable collection of the full names (including paths) for the directories in the directory specified by
                <paramref
                    name="this" />
                and that match the specified search pattern and option.
            </returns>
            <example>
                <code>
                  using System;
                  using System.Collections.Generic;
                  using System.IO;
                  using System.Linq;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_EnumerateDirectories
                      {
                          [TestMethod]
                          public void EnumerateDirectories()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_EnumerateDirectories&quot;));
                              Directory.CreateDirectory(root.FullName);
                              root.CreateSubdirectory(&quot;Directory1&quot;);
                              root.CreateSubdirectory(&quot;Directory2&quot;);
            
                              // Exemples
                              List&lt;DirectoryInfo&gt; result = root.EnumerateDirectories().ToList();
            
                              // Unit Test
                              Assert.AreEqual(2, result.Count);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                  using System;
                  using System.Collections.Generic;
                  using System.IO;
                  using System.Linq;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_EnumerateDirectories
                      {
                          [TestMethod]
                          public void EnumerateDirectories()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_EnumerateDirectories&quot;));
                              Directory.CreateDirectory(root.FullName);
                              root.CreateSubdirectory(&quot;Directory1&quot;);
                              root.CreateSubdirectory(&quot;Directory2&quot;);
            
                              // Exemples
                              List&lt;DirectoryInfo&gt; result = root.EnumerateDirectories().ToList();
            
                              // Unit Test
                              Assert.AreEqual(2, result.Count);
                          }
                      }
                  }
            </code>
            </example>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this " />is a zero-length string, contains only
                white space, or contains invalid characters as defined by
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .- or -<paramref name="searchPattern" /> does not contain a valid pattern.
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.-or-
                <paramref name="searchPattern" /> is null.
            </exception>
            ###
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="searchOption" /> is not a valid
                <see cref="T:System.IO.SearchOption" /> value.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid, such as
                referring to an unmapped drive.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">
                <paramref name="this" /> is a file name.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or combined exceed the
                system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters
                and file names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.EnumerateDirectories(System.IO.DirectoryInfo,System.String[])">
            <summary>
                Returns an enumerable collection of directory names that match a search pattern in a specified @this.
            </summary>
            <param name="this">The directory to search.</param>
            <param name="searchPatterns">The search string to match against the names of directories in.</param>
            <returns>
                An enumerable collection of the full names (including paths) for the directories in the directory specified by
                <paramref
                    name="this" />
                and that match the specified search pattern.
            </returns>
            <example>
                <code>
                  using System;
                  using System.Collections.Generic;
                  using System.IO;
                  using System.Linq;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_EnumerateDirectories
                      {
                          [TestMethod]
                          public void EnumerateDirectories()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_EnumerateDirectories&quot;));
                              Directory.CreateDirectory(root.FullName);
                              root.CreateSubdirectory(&quot;Directory1&quot;);
                              root.CreateSubdirectory(&quot;Directory2&quot;);
            
                              // Exemples
                              List&lt;DirectoryInfo&gt; result = root.EnumerateDirectories().ToList();
            
                              // Unit Test
                              Assert.AreEqual(2, result.Count);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                  using System;
                  using System.Collections.Generic;
                  using System.IO;
                  using System.Linq;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_EnumerateDirectories
                      {
                          [TestMethod]
                          public void EnumerateDirectories()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_EnumerateDirectories&quot;));
                              Directory.CreateDirectory(root.FullName);
                              root.CreateSubdirectory(&quot;Directory1&quot;);
                              root.CreateSubdirectory(&quot;Directory2&quot;);
            
                              // Exemples
                              List&lt;DirectoryInfo&gt; result = root.EnumerateDirectories().ToList();
            
                              // Unit Test
                              Assert.AreEqual(2, result.Count);
                          }
                      }
                  }
            </code>
            </example>
            ###
            <param name="searchPattern">
                The search string to match against the names of directories in
                <paramref name="this" />.
            </param>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this " />is a zero-length string, contains only
                white space, or contains invalid characters as defined by
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .- or -<paramref name="searchPattern" /> does not contain a valid pattern.
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.-or-
                <paramref name="searchPattern" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid, such as
                referring to an unmapped drive.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">
                <paramref name="this" /> is a file name.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or combined exceed the
                system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters
                and file names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.EnumerateDirectories(System.IO.DirectoryInfo,System.String[],System.IO.SearchOption)">
            <summary>
                Returns an enumerable collection of directory names that match a search pattern in a specified @this, and
                optionally searches subdirectories.
            </summary>
            <param name="this">The directory to search.</param>
            <param name="searchPatterns">
                The search string to match against the names of directories in
                <paramref name="this" />.
            </param>
            <param name="searchOption">
                One of the enumeration values that specifies whether the search operation should
                include only the current directory or should include all subdirectories.The default value is
                <see
                    cref="F:System.IO.SearchOption.TopDirectoryOnly" />
                .
            </param>
            <returns>
                An enumerable collection of the full names (including paths) for the directories in the directory specified by
                <paramref
                    name="this" />
                and that match the specified search pattern and option.
            </returns>
            <example>
                <code>
                  using System;
                  using System.Collections.Generic;
                  using System.IO;
                  using System.Linq;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_EnumerateDirectories
                      {
                          [TestMethod]
                          public void EnumerateDirectories()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_EnumerateDirectories&quot;));
                              Directory.CreateDirectory(root.FullName);
                              root.CreateSubdirectory(&quot;Directory1&quot;);
                              root.CreateSubdirectory(&quot;Directory2&quot;);
            
                              // Exemples
                              List&lt;DirectoryInfo&gt; result = root.EnumerateDirectories().ToList();
            
                              // Unit Test
                              Assert.AreEqual(2, result.Count);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                  using System;
                  using System.Collections.Generic;
                  using System.IO;
                  using System.Linq;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_EnumerateDirectories
                      {
                          [TestMethod]
                          public void EnumerateDirectories()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_EnumerateDirectories&quot;));
                              Directory.CreateDirectory(root.FullName);
                              root.CreateSubdirectory(&quot;Directory1&quot;);
                              root.CreateSubdirectory(&quot;Directory2&quot;);
            
                              // Exemples
                              List&lt;DirectoryInfo&gt; result = root.EnumerateDirectories().ToList();
            
                              // Unit Test
                              Assert.AreEqual(2, result.Count);
                          }
                      }
                  }
            </code>
            </example>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this " />is a zero-length string, contains only
                white space, or contains invalid characters as defined by
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .- or -<paramref name="searchPattern" /> does not contain a valid pattern.
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.-or-
                <paramref name="searchPattern" /> is null.
            </exception>
            ###
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="searchOption" /> is not a valid
                <see cref="T:System.IO.SearchOption" /> value.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid, such as
                referring to an unmapped drive.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">
                <paramref name="this" /> is a file name.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or combined exceed the
                system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters
                and file names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.EnumerateFiles(System.IO.DirectoryInfo)">
            <summary>
                Returns an enumerable collection of file names in a specified @this.
            </summary>
            <param name="this">The directory to search.</param>
            <returns>
                An enumerable collection of the full names (including paths) for the files in the directory specified by
                <paramref
                    name="this" />
                .
            </returns>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this " />is a zero-length string, contains only
                white space, or contains invalid characters as defined by
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid, such as
                referring to an unmapped drive.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">
                <paramref name="this" /> is a file name.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or combined exceed the
                system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters
                and file names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.EnumerateFiles(System.IO.DirectoryInfo,System.String)">
            <summary>
                Returns an enumerable collection of file names that match a search pattern in a specified @this.
            </summary>
            <param name="this">The directory to search.</param>
            <param name="searchPattern">
                The search string to match against the names of directories in
                <paramref name="this" />.
            </param>
            <returns>
                An enumerable collection of the full names (including paths) for the files in the directory specified by
                <paramref
                    name="this" />
                and that match the specified search pattern.
            </returns>
            <example>
                <code>
                  using System;
                  using System.Collections.Generic;
                  using System.IO;
                  using System.Linq;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_EnumerateFiles
                      {
                          [TestMethod]
                          public void EnumerateFiles()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_EnumerateFiles&quot;));
                              Directory.CreateDirectory(root.FullName);
            
                              var file1 = new FileInfo(Path.Combine(root.FullName, &quot;test1.txt&quot;));
                              var file2 = new FileInfo(Path.Combine(root.FullName, &quot;test2.txt&quot;));
                              file1.Create();
                              file2.Create();
            
                              // Exemples
                              List&lt;FileInfo&gt; result = root.EnumerateFiles().ToList();
            
                              // Unit Test
                              Assert.AreEqual(2, result.Count);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                  using System;
                  using System.Collections.Generic;
                  using System.IO;
                  using System.Linq;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_EnumerateFiles
                      {
                          [TestMethod]
                          public void EnumerateFiles()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_EnumerateFiles&quot;));
                              Directory.CreateDirectory(root.FullName);
            
                              var file1 = new FileInfo(Path.Combine(root.FullName, &quot;test1.txt&quot;));
                              var file2 = new FileInfo(Path.Combine(root.FullName, &quot;test2.txt&quot;));
                              file1.Create();
                              file2.Create();
            
                              // Exemples
                              List&lt;FileInfo&gt; result = root.EnumerateFiles().ToList();
            
                              // Unit Test
                              Assert.AreEqual(2, result.Count);
                          }
                      }
                  }
            </code>
            </example>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this " />is a zero-length string, contains only
                white space, or contains invalid characters as defined by
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .- or -<paramref name="searchPattern" /> does not contain a valid pattern.
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.-or-
                <paramref name="searchPattern" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid, such as
                referring to an unmapped drive.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">
                <paramref name="this" /> is a file name.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or combined exceed the
                system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters
                and file names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.EnumerateFiles(System.IO.DirectoryInfo,System.String,System.IO.SearchOption)">
            <summary>
                Returns an enumerable collection of file names that match a search pattern in a specified @this, and
                optionally searches subdirectories.
            </summary>
            <param name="this">The directory to search.</param>
            <param name="searchPattern">
                The search string to match against the names of directories in
                <paramref name="this" />.
            </param>
            <param name="searchOption">
                One of the enumeration values that specifies whether the search operation should
                include only the current directory or should include all subdirectories.The default value is
                <see
                    cref="F:System.IO.SearchOption.TopDirectoryOnly" />
                .
            </param>
            <returns>
                An enumerable collection of the full names (including paths) for the files in the directory specified by
                <paramref
                    name="this" />
                and that match the specified search pattern and option.
            </returns>
            <example>
                <code>
                  using System;
                  using System.Collections.Generic;
                  using System.IO;
                  using System.Linq;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_EnumerateFiles
                      {
                          [TestMethod]
                          public void EnumerateFiles()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_EnumerateFiles&quot;));
                              Directory.CreateDirectory(root.FullName);
            
                              var file1 = new FileInfo(Path.Combine(root.FullName, &quot;test1.txt&quot;));
                              var file2 = new FileInfo(Path.Combine(root.FullName, &quot;test2.txt&quot;));
                              file1.Create();
                              file2.Create();
            
                              // Exemples
                              List&lt;FileInfo&gt; result = root.EnumerateFiles().ToList();
            
                              // Unit Test
                              Assert.AreEqual(2, result.Count);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                  using System;
                  using System.Collections.Generic;
                  using System.IO;
                  using System.Linq;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_EnumerateFiles
                      {
                          [TestMethod]
                          public void EnumerateFiles()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_EnumerateFiles&quot;));
                              Directory.CreateDirectory(root.FullName);
            
                              var file1 = new FileInfo(Path.Combine(root.FullName, &quot;test1.txt&quot;));
                              var file2 = new FileInfo(Path.Combine(root.FullName, &quot;test2.txt&quot;));
                              file1.Create();
                              file2.Create();
            
                              // Exemples
                              List&lt;FileInfo&gt; result = root.EnumerateFiles().ToList();
            
                              // Unit Test
                              Assert.AreEqual(2, result.Count);
                          }
                      }
                  }
            </code>
            </example>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this " />is a zero-length string, contains only
                white space, or contains invalid characters as defined by
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .- or -<paramref name="searchPattern" /> does not contain a valid pattern.
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.-or-
                <paramref name="searchPattern" /> is null.
            </exception>
            ###
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="searchOption" /> is not a valid
                <see cref="T:System.IO.SearchOption" /> value.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid, such as
                referring to an unmapped drive.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">
                <paramref name="this" /> is a file name.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or combined exceed the
                system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters
                and file names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.EnumerateFiles(System.IO.DirectoryInfo,System.String[])">
            <summary>
                Returns an enumerable collection of file names that match a search pattern in a specified @this.
            </summary>
            <param name="this">The directory to search.</param>
            <param name="searchPatterns">The search string to match against the names of directories in.</param>
            <returns>
                An enumerable collection of the full names (including paths) for the files in the directory specified by
                <paramref
                    name="this" />
                and that match the specified search pattern.
            </returns>
            <example>
                <code>
                  using System;
                  using System.Collections.Generic;
                  using System.IO;
                  using System.Linq;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_EnumerateFiles
                      {
                          [TestMethod]
                          public void EnumerateFiles()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_EnumerateFiles&quot;));
                              Directory.CreateDirectory(root.FullName);
            
                              var file1 = new FileInfo(Path.Combine(root.FullName, &quot;test1.txt&quot;));
                              var file2 = new FileInfo(Path.Combine(root.FullName, &quot;test2.txt&quot;));
                              file1.Create();
                              file2.Create();
            
                              // Exemples
                              List&lt;FileInfo&gt; result = root.EnumerateFiles().ToList();
            
                              // Unit Test
                              Assert.AreEqual(2, result.Count);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                  using System;
                  using System.Collections.Generic;
                  using System.IO;
                  using System.Linq;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_EnumerateFiles
                      {
                          [TestMethod]
                          public void EnumerateFiles()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_EnumerateFiles&quot;));
                              Directory.CreateDirectory(root.FullName);
            
                              var file1 = new FileInfo(Path.Combine(root.FullName, &quot;test1.txt&quot;));
                              var file2 = new FileInfo(Path.Combine(root.FullName, &quot;test2.txt&quot;));
                              file1.Create();
                              file2.Create();
            
                              // Exemples
                              List&lt;FileInfo&gt; result = root.EnumerateFiles().ToList();
            
                              // Unit Test
                              Assert.AreEqual(2, result.Count);
                          }
                      }
                  }
            </code>
            </example>
            ###
            <param name="searchPattern">
                The search string to match against the names of directories in
                <paramref name="this" />.
            </param>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this " />is a zero-length string, contains only
                white space, or contains invalid characters as defined by
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .- or -<paramref name="searchPattern" /> does not contain a valid pattern.
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.-or-
                <paramref name="searchPattern" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid, such as
                referring to an unmapped drive.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">
                <paramref name="this" /> is a file name.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or combined exceed the
                system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters
                and file names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.EnumerateFiles(System.IO.DirectoryInfo,System.String[],System.IO.SearchOption)">
            <summary>
                Returns an enumerable collection of file names that match a search pattern in a specified @this, and
                optionally searches subdirectories.
            </summary>
            <param name="this">The directory to search.</param>
            <param name="searchPatterns">
                The search string to match against the names of directories in
                <paramref name="this" />.
            </param>
            <param name="searchOption">
                One of the enumeration values that specifies whether the search operation should
                include only the current directory or should include all subdirectories.The default value is
                <see
                    cref="F:System.IO.SearchOption.TopDirectoryOnly" />
                .
            </param>
            <returns>
                An enumerable collection of the full names (including paths) for the files in the directory specified by
                <paramref
                    name="this" />
                and that match the specified search pattern and option.
            </returns>
            <example>
                <code>
                  using System;
                  using System.Collections.Generic;
                  using System.IO;
                  using System.Linq;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_EnumerateFiles
                      {
                          [TestMethod]
                          public void EnumerateFiles()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_EnumerateFiles&quot;));
                              Directory.CreateDirectory(root.FullName);
            
                              var file1 = new FileInfo(Path.Combine(root.FullName, &quot;test1.txt&quot;));
                              var file2 = new FileInfo(Path.Combine(root.FullName, &quot;test2.txt&quot;));
                              file1.Create();
                              file2.Create();
            
                              // Exemples
                              List&lt;FileInfo&gt; result = root.EnumerateFiles().ToList();
            
                              // Unit Test
                              Assert.AreEqual(2, result.Count);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                  using System;
                  using System.Collections.Generic;
                  using System.IO;
                  using System.Linq;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_EnumerateFiles
                      {
                          [TestMethod]
                          public void EnumerateFiles()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_EnumerateFiles&quot;));
                              Directory.CreateDirectory(root.FullName);
            
                              var file1 = new FileInfo(Path.Combine(root.FullName, &quot;test1.txt&quot;));
                              var file2 = new FileInfo(Path.Combine(root.FullName, &quot;test2.txt&quot;));
                              file1.Create();
                              file2.Create();
            
                              // Exemples
                              List&lt;FileInfo&gt; result = root.EnumerateFiles().ToList();
            
                              // Unit Test
                              Assert.AreEqual(2, result.Count);
                          }
                      }
                  }
            </code>
            </example>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this " />is a zero-length string, contains only
                white space, or contains invalid characters as defined by
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .- or -<paramref name="searchPattern" /> does not contain a valid pattern.
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.-or-
                <paramref name="searchPattern" /> is null.
            </exception>
            ###
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="searchOption" /> is not a valid
                <see cref="T:System.IO.SearchOption" /> value.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid, such as
                referring to an unmapped drive.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">
                <paramref name="this" /> is a file name.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or combined exceed the
                system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters
                and file names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.EnumerateFileSystemEntries(System.IO.DirectoryInfo)">
            <summary>
                Returns an enumerable collection of file-system entries in a specified @this.
            </summary>
            <param name="this">The directory to search.</param>
            <returns>
                An enumerable collection of file-system entries in the directory specified by <paramref name="this" />.
            </returns>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this " />is a zero-length string, contains only
                white space, or contains invalid characters as defined by
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid, such as
                referring to an unmapped drive.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">
                <paramref name="this" /> is a file name.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or combined exceed the
                system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters
                and file names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.EnumerateFileSystemEntries(System.IO.DirectoryInfo,System.String)">
            <summary>
                Returns an enumerable collection of file-system entries that match a search pattern in a specified @this.
            </summary>
            <param name="this">The directory to search.</param>
            <param name="searchPattern">
                The search string to match against the names of directories in
                <paramref name="this" />.
            </param>
            <returns>
                An enumerable collection of file-system entries in the directory specified by <paramref name="this" /> and
                that match the specified search pattern.
            </returns>
            <example>
                <code>
                  using System;
                  using System.Collections.Generic;
                  using System.IO;
                  using System.Linq;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_EnumerateFileSystemEntries
                      {
                          [TestMethod]
                          public void EnumerateFileSystemEntries()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_EnumerateFileSystemEntries&quot;));
                              Directory.CreateDirectory(root.FullName);
            
                              var file1 = new FileInfo(Path.Combine(root.FullName, &quot;test1.txt&quot;));
                              file1.Create();
                              root.CreateSubdirectory(&quot;test2&quot;);
            
                              // Exemples
                              List&lt;string&gt; result = root.EnumerateFileSystemEntries().ToList();
            
                              // Unit Test
                              Assert.AreEqual(2, result.Count);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                  using System;
                  using System.Collections.Generic;
                  using System.IO;
                  using System.Linq;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
                  using Z.ExtensionMethods;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_EnumerateFileSystemEntries
                      {
                          [TestMethod]
                          public void EnumerateFileSystemEntries()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_EnumerateFileSystemEntries&quot;));
                              Directory.CreateDirectory(root.FullName);
            
                              var file1 = new FileInfo(Path.Combine(root.FullName, &quot;test1.txt&quot;));
                              file1.Create();
                              root.CreateSubdirectory(&quot;test2&quot;);
            
                              // Exemples
                              List&lt;string&gt; result = root.EnumerateFileSystemEntries().ToList();
            
                              // Unit Test
                              Assert.AreEqual(2, result.Count);
                          }
                      }
                  }
            </code>
            </example>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this " />is a zero-length string, contains only
                white space, or contains invalid characters as defined by
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .- or -<paramref name="searchPattern" /> does not contain a valid pattern.
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.-or-
                <paramref name="searchPattern" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid, such as
                referring to an unmapped drive.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">
                <paramref name="this" /> is a file name.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or combined exceed the
                system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters
                and file names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.EnumerateFileSystemEntries(System.IO.DirectoryInfo,System.String,System.IO.SearchOption)">
            <summary>
                Returns an enumerable collection of file names and directory names that match a search pattern in a specified
                @this, and optionally searches subdirectories.
            </summary>
            <param name="this">The directory to search.</param>
            <param name="searchPattern">
                The search string to match against the names of directories in
                <paramref name="this" />.
            </param>
            <param name="searchOption">
                One of the enumeration values  that specifies whether the search operation should
                include only the current directory or should include all subdirectories.The default value is
                <see
                    cref="F:System.IO.SearchOption.TopDirectoryOnly" />
                .
            </param>
            <returns>
                An enumerable collection of file-system entries in the directory specified by <paramref name="this" /> and
                that match the specified search pattern and option.
            </returns>
            <example>
                <code>
                  using System;
                  using System.Collections.Generic;
                  using System.IO;
                  using System.Linq;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_EnumerateFileSystemEntries
                      {
                          [TestMethod]
                          public void EnumerateFileSystemEntries()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_EnumerateFileSystemEntries&quot;));
                              Directory.CreateDirectory(root.FullName);
            
                              var file1 = new FileInfo(Path.Combine(root.FullName, &quot;test1.txt&quot;));
                              file1.Create();
                              root.CreateSubdirectory(&quot;test2&quot;);
            
                              // Exemples
                              List&lt;string&gt; result = root.EnumerateFileSystemEntries().ToList();
            
                              // Unit Test
                              Assert.AreEqual(2, result.Count);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                  using System;
                  using System.Collections.Generic;
                  using System.IO;
                  using System.Linq;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
                  using Z.ExtensionMethods;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_EnumerateFileSystemEntries
                      {
                          [TestMethod]
                          public void EnumerateFileSystemEntries()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_EnumerateFileSystemEntries&quot;));
                              Directory.CreateDirectory(root.FullName);
            
                              var file1 = new FileInfo(Path.Combine(root.FullName, &quot;test1.txt&quot;));
                              file1.Create();
                              root.CreateSubdirectory(&quot;test2&quot;);
            
                              // Exemples
                              List&lt;string&gt; result = root.EnumerateFileSystemEntries().ToList();
            
                              // Unit Test
                              Assert.AreEqual(2, result.Count);
                          }
                      }
                  }
            </code>
            </example>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this " />is a zero-length string, contains only
                white space, or contains invalid characters as defined by
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .- or -<paramref name="searchPattern" /> does not contain a valid pattern.
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.-or-
                <paramref name="searchPattern" /> is null.
            </exception>
            ###
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="searchOption" /> is not a valid
                <see cref="T:System.IO.SearchOption" /> value.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid, such as
                referring to an unmapped drive.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">
                <paramref name="this" /> is a file name.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or combined exceed the
                system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters
                and file names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.EnumerateFileSystemEntries(System.IO.DirectoryInfo,System.String[])">
            <summary>
                Returns an enumerable collection of file-system entries that match a search pattern in a specified @this.
            </summary>
            <param name="this">The directory to search.</param>
            <param name="searchPatterns">The search string to match against the names of directories in.</param>
            <returns>
                An enumerable collection of file-system entries in the directory specified by <paramref name="this" /> and
                that match the specified search pattern.
            </returns>
            <example>
                <code>
                  using System;
                  using System.Collections.Generic;
                  using System.IO;
                  using System.Linq;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_EnumerateFileSystemEntries
                      {
                          [TestMethod]
                          public void EnumerateFileSystemEntries()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_EnumerateFileSystemEntries&quot;));
                              Directory.CreateDirectory(root.FullName);
            
                              var file1 = new FileInfo(Path.Combine(root.FullName, &quot;test1.txt&quot;));
                              file1.Create();
                              root.CreateSubdirectory(&quot;test2&quot;);
            
                              // Exemples
                              List&lt;string&gt; result = root.EnumerateFileSystemEntries().ToList();
            
                              // Unit Test
                              Assert.AreEqual(2, result.Count);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                  using System;
                  using System.Collections.Generic;
                  using System.IO;
                  using System.Linq;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
                  using Z.ExtensionMethods;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_EnumerateFileSystemEntries
                      {
                          [TestMethod]
                          public void EnumerateFileSystemEntries()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_EnumerateFileSystemEntries&quot;));
                              Directory.CreateDirectory(root.FullName);
            
                              var file1 = new FileInfo(Path.Combine(root.FullName, &quot;test1.txt&quot;));
                              file1.Create();
                              root.CreateSubdirectory(&quot;test2&quot;);
            
                              // Exemples
                              List&lt;string&gt; result = root.EnumerateFileSystemEntries().ToList();
            
                              // Unit Test
                              Assert.AreEqual(2, result.Count);
                          }
                      }
                  }
            </code>
            </example>
            ###
            <param name="searchPattern">
                The search string to match against the names of directories in
                <paramref name="this" />.
            </param>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this " />is a zero-length string, contains only
                white space, or contains invalid characters as defined by
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .- or -<paramref name="searchPattern" /> does not contain a valid pattern.
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.-or-
                <paramref name="searchPattern" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid, such as
                referring to an unmapped drive.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">
                <paramref name="this" /> is a file name.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or combined exceed the
                system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters
                and file names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.EnumerateFileSystemEntries(System.IO.DirectoryInfo,System.String[],System.IO.SearchOption)">
            <summary>
                Returns an enumerable collection of file names and directory names that match a search pattern in a specified
                @this, and optionally searches subdirectories.
            </summary>
            <param name="this">The directory to search.</param>
            <param name="searchPatterns">
                The search string to match against the names of directories in
                <paramref name="this" />.
            </param>
            <param name="searchOption">
                One of the enumeration values  that specifies whether the search operation should
                include only the current directory or should include all subdirectories.The default value is
                <see
                    cref="F:System.IO.SearchOption.TopDirectoryOnly" />
                .
            </param>
            <returns>
                An enumerable collection of file-system entries in the directory specified by <paramref name="this" /> and
                that match the specified search pattern and option.
            </returns>
            <example>
                <code>
                  using System;
                  using System.Collections.Generic;
                  using System.IO;
                  using System.Linq;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_EnumerateFileSystemEntries
                      {
                          [TestMethod]
                          public void EnumerateFileSystemEntries()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_EnumerateFileSystemEntries&quot;));
                              Directory.CreateDirectory(root.FullName);
            
                              var file1 = new FileInfo(Path.Combine(root.FullName, &quot;test1.txt&quot;));
                              file1.Create();
                              root.CreateSubdirectory(&quot;test2&quot;);
            
                              // Exemples
                              List&lt;string&gt; result = root.EnumerateFileSystemEntries().ToList();
            
                              // Unit Test
                              Assert.AreEqual(2, result.Count);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                  using System;
                  using System.Collections.Generic;
                  using System.IO;
                  using System.Linq;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
                  using Z.ExtensionMethods;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_EnumerateFileSystemEntries
                      {
                          [TestMethod]
                          public void EnumerateFileSystemEntries()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_EnumerateFileSystemEntries&quot;));
                              Directory.CreateDirectory(root.FullName);
            
                              var file1 = new FileInfo(Path.Combine(root.FullName, &quot;test1.txt&quot;));
                              file1.Create();
                              root.CreateSubdirectory(&quot;test2&quot;);
            
                              // Exemples
                              List&lt;string&gt; result = root.EnumerateFileSystemEntries().ToList();
            
                              // Unit Test
                              Assert.AreEqual(2, result.Count);
                          }
                      }
                  }
            </code>
            </example>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this " />is a zero-length string, contains only
                white space, or contains invalid characters as defined by
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .- or -<paramref name="searchPattern" /> does not contain a valid pattern.
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.-or-
                <paramref name="searchPattern" /> is null.
            </exception>
            ###
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="searchOption" /> is not a valid
                <see cref="T:System.IO.SearchOption" /> value.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid, such as
                referring to an unmapped drive.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">
                <paramref name="this" /> is a file name.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or combined exceed the
                system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters
                and file names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.GetDirectories(System.IO.DirectoryInfo,System.String[])">
            <summary>
                Returns an enumerable collection of directory names that match a search pattern in a specified @this.
            </summary>
            <param name="this">The directory to search.</param>
            <param name="searchPatterns">The search string to match against the names of directories in.</param>
            <returns>
                An enumerable collection of the full names (including paths) for the directories in the directory specified by
                <paramref
                    name="this" />
                and that match the specified search pattern.
            </returns>
            ###
            <param name="searchPattern">
                The search string to match against the names of directories in
                <paramref name="this" />.
            </param>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this " />is a zero-length string, contains only
                white space, or contains invalid characters as defined by
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .- or -<paramref name="searchPattern" /> does not contain a valid pattern.
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.-or-
                <paramref name="searchPattern" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid, such as
                referring to an unmapped drive.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">
                <paramref name="this" /> is a file name.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or combined exceed the
                system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters
                and file names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.GetDirectories(System.IO.DirectoryInfo,System.String[],System.IO.SearchOption)">
            <summary>
                Returns an enumerable collection of directory names that match a search pattern in a specified @this, and
                optionally searches subdirectories.
            </summary>
            <param name="this">The directory to search.</param>
            <param name="searchPatterns">
                The search string to match against the names of directories in
                <paramref name="this" />.
            </param>
            <param name="searchOption">
                One of the enumeration values that specifies whether the search operation should
                include only the current directory or should include all subdirectories.The default value is
                <see
                    cref="F:System.IO.SearchOption.TopDirectoryOnly" />
                .
            </param>
            <returns>
                An enumerable collection of the full names (including paths) for the directories in the directory specified by
                <paramref
                    name="this" />
                and that match the specified search pattern and option.
            </returns>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this " />is a zero-length string, contains only
                white space, or contains invalid characters as defined by
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .- or -<paramref name="searchPattern" /> does not contain a valid pattern.
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.-or-
                <paramref name="searchPattern" /> is null.
            </exception>
            ###
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="searchOption" /> is not a valid
                <see cref="T:System.IO.SearchOption" /> value.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid, such as
                referring to an unmapped drive.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">
                <paramref name="this" /> is a file name.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or combined exceed the
                system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters
                and file names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.GetDirectoriesWhere(System.IO.DirectoryInfo,System.Func{System.IO.DirectoryInfo,System.Boolean})">
            <summary>
                Returns an enumerable collection of directory names in a specified @this.
            </summary>
            <param name="this">The directory to search.</param>
            <param name="predicate">The predicate.</param>
            <returns>
                An enumerable collection of the full names (including paths) for the directories in the directory specified by
                <paramref
                    name="this" />
                .
            </returns>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this " />is a zero-length string, contains only
                white space, or contains invalid characters as defined by
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid, such as
                referring to an unmapped drive.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">
                <paramref name="this" /> is a file name.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or combined exceed the
                system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters
                and file names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.GetDirectoriesWhere(System.IO.DirectoryInfo,System.String,System.Func{System.IO.DirectoryInfo,System.Boolean})">
            <summary>
                Returns an enumerable collection of directory names that match a search pattern in a specified @this.
            </summary>
            <param name="this">The directory to search.</param>
            <param name="searchPattern">
                The search string to match against the names of directories in
                <paramref name="this" />.
            </param>
            <param name="predicate">The predicate.</param>
            <returns>
                An enumerable collection of the full names (including paths) for the directories in the directory specified by
                <paramref
                    name="this" />
                and that match the specified search pattern.
            </returns>
            <example>
                <code>
                  using System;
                  using System.IO;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_GetDirectoriesWhere
                      {
                          [TestMethod]
                          public void GetDirectoriesWhere()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_GetDirectories&quot;));
                              Directory.CreateDirectory(root.FullName);
                              root.CreateSubdirectory(&quot;DirFizz123&quot;);
                              root.CreateSubdirectory(&quot;DirBuzz123&quot;);
                              root.CreateSubdirectory(&quot;DirNotFound123&quot;);
            
                              // Exemples
                              DirectoryInfo[] result = root.GetDirectoriesWhere(x =&gt; x.Name.StartsWith(&quot;DirFizz&quot;) || x.Name.StartsWith(&quot;DirBuzz&quot;));
            
                              // Unit Test
                              Assert.AreEqual(2, result.Length);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                  using System;
                  using System.IO;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
                  using Z.ExtensionMethods;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_GetDirectoriesWhere
                      {
                          [TestMethod]
                          public void GetDirectoriesWhere()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_GetDirectories&quot;));
                              Directory.CreateDirectory(root.FullName);
                              root.CreateSubdirectory(&quot;DirFizz123&quot;);
                              root.CreateSubdirectory(&quot;DirBuzz123&quot;);
                              root.CreateSubdirectory(&quot;DirNotFound123&quot;);
            
                              // Exemples
                              DirectoryInfo[] result = root.GetDirectoriesWhere(x =&gt; x.Name.StartsWith(&quot;DirFizz&quot;) || x.Name.StartsWith(&quot;DirBuzz&quot;));
            
                              // Unit Test
                              Assert.AreEqual(2, result.Length);
                          }
                      }
                  }
            </code>
            </example>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this " />is a zero-length string, contains only
                white space, or contains invalid characters as defined by
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .- or -<paramref name="searchPattern" /> does not contain a valid pattern.
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.-or-
                <paramref name="searchPattern" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid, such as
                referring to an unmapped drive.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">
                <paramref name="this" /> is a file name.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or combined exceed the
                system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters
                and file names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.GetDirectoriesWhere(System.IO.DirectoryInfo,System.String,System.IO.SearchOption,System.Func{System.IO.DirectoryInfo,System.Boolean})">
            <summary>
                Returns an enumerable collection of directory names that match a search pattern in a specified @this, and
                optionally searches subdirectories.
            </summary>
            <param name="this">The directory to search.</param>
            <param name="searchPattern">
                The search string to match against the names of directories in
                <paramref name="this" />.
            </param>
            <param name="searchOption">
                One of the enumeration values that specifies whether the search operation should
                include only the current directory or should include all subdirectories.The default value is
                <see
                    cref="F:System.IO.SearchOption.TopDirectoryOnly" />
                .
            </param>
            <param name="predicate">The predicate.</param>
            <returns>
                An enumerable collection of the full names (including paths) for the directories in the directory specified by
                <paramref
                    name="this" />
                and that match the specified search pattern and option.
            </returns>
            <example>
                <code>
                  using System;
                  using System.IO;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_GetDirectoriesWhere
                      {
                          [TestMethod]
                          public void GetDirectoriesWhere()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_GetDirectories&quot;));
                              Directory.CreateDirectory(root.FullName);
                              root.CreateSubdirectory(&quot;DirFizz123&quot;);
                              root.CreateSubdirectory(&quot;DirBuzz123&quot;);
                              root.CreateSubdirectory(&quot;DirNotFound123&quot;);
            
                              // Exemples
                              DirectoryInfo[] result = root.GetDirectoriesWhere(x =&gt; x.Name.StartsWith(&quot;DirFizz&quot;) || x.Name.StartsWith(&quot;DirBuzz&quot;));
            
                              // Unit Test
                              Assert.AreEqual(2, result.Length);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                  using System;
                  using System.IO;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
                  using Z.ExtensionMethods;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_GetDirectoriesWhere
                      {
                          [TestMethod]
                          public void GetDirectoriesWhere()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_GetDirectories&quot;));
                              Directory.CreateDirectory(root.FullName);
                              root.CreateSubdirectory(&quot;DirFizz123&quot;);
                              root.CreateSubdirectory(&quot;DirBuzz123&quot;);
                              root.CreateSubdirectory(&quot;DirNotFound123&quot;);
            
                              // Exemples
                              DirectoryInfo[] result = root.GetDirectoriesWhere(x =&gt; x.Name.StartsWith(&quot;DirFizz&quot;) || x.Name.StartsWith(&quot;DirBuzz&quot;));
            
                              // Unit Test
                              Assert.AreEqual(2, result.Length);
                          }
                      }
                  }
            </code>
            </example>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this " />is a zero-length string, contains only
                white space, or contains invalid characters as defined by
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .- or -<paramref name="searchPattern" /> does not contain a valid pattern.
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.-or-
                <paramref name="searchPattern" /> is null.
            </exception>
            ###
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="searchOption" /> is not a valid
                <see cref="T:System.IO.SearchOption" /> value.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid, such as
                referring to an unmapped drive.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">
                <paramref name="this" /> is a file name.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or combined exceed the
                system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters
                and file names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.GetDirectoriesWhere(System.IO.DirectoryInfo,System.String[],System.Func{System.IO.DirectoryInfo,System.Boolean})">
            <summary>
                Returns an enumerable collection of directory names that match a search pattern in a specified @this.
            </summary>
            <param name="this">The directory to search.</param>
            <param name="searchPatterns">The search string to match against the names of directories in.</param>
            <param name="predicate">The predicate.</param>
            <returns>
                An enumerable collection of the full names (including paths) for the directories in the directory specified by
                <paramref
                    name="this" />
                and that match the specified search pattern.
            </returns>
            <example>
                <code>
                  using System;
                  using System.IO;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_GetDirectoriesWhere
                      {
                          [TestMethod]
                          public void GetDirectoriesWhere()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_GetDirectories&quot;));
                              Directory.CreateDirectory(root.FullName);
                              root.CreateSubdirectory(&quot;DirFizz123&quot;);
                              root.CreateSubdirectory(&quot;DirBuzz123&quot;);
                              root.CreateSubdirectory(&quot;DirNotFound123&quot;);
            
                              // Exemples
                              DirectoryInfo[] result = root.GetDirectoriesWhere(x =&gt; x.Name.StartsWith(&quot;DirFizz&quot;) || x.Name.StartsWith(&quot;DirBuzz&quot;));
            
                              // Unit Test
                              Assert.AreEqual(2, result.Length);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                  using System;
                  using System.IO;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
                  using Z.ExtensionMethods;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_GetDirectoriesWhere
                      {
                          [TestMethod]
                          public void GetDirectoriesWhere()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_GetDirectories&quot;));
                              Directory.CreateDirectory(root.FullName);
                              root.CreateSubdirectory(&quot;DirFizz123&quot;);
                              root.CreateSubdirectory(&quot;DirBuzz123&quot;);
                              root.CreateSubdirectory(&quot;DirNotFound123&quot;);
            
                              // Exemples
                              DirectoryInfo[] result = root.GetDirectoriesWhere(x =&gt; x.Name.StartsWith(&quot;DirFizz&quot;) || x.Name.StartsWith(&quot;DirBuzz&quot;));
            
                              // Unit Test
                              Assert.AreEqual(2, result.Length);
                          }
                      }
                  }
            </code>
            </example>
            ###
            <param name="searchPattern">
                The search string to match against the names of directories in
                <paramref name="this" />.
            </param>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this " />is a zero-length string, contains only
                white space, or contains invalid characters as defined by
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .- or -<paramref name="searchPattern" /> does not contain a valid pattern.
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.-or-
                <paramref name="searchPattern" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid, such as
                referring to an unmapped drive.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">
                <paramref name="this" /> is a file name.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or combined exceed the
                system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters
                and file names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.GetDirectoriesWhere(System.IO.DirectoryInfo,System.String[],System.IO.SearchOption,System.Func{System.IO.DirectoryInfo,System.Boolean})">
            <summary>
                Returns an enumerable collection of directory names that match a search pattern in a specified @this, and
                optionally searches subdirectories.
            </summary>
            <param name="this">The directory to search.</param>
            <param name="searchPatterns">
                The search string to match against the names of directories in
                <paramref name="this" />.
            </param>
            <param name="searchOption">
                One of the enumeration values that specifies whether the search operation should
                include only the current directory or should include all subdirectories.The default value is
                <see
                    cref="F:System.IO.SearchOption.TopDirectoryOnly" />
                .
            </param>
            <param name="predicate">The predicate.</param>
            <returns>
                An enumerable collection of the full names (including paths) for the directories in the directory specified by
                <paramref
                    name="this" />
                and that match the specified search pattern and option.
            </returns>
            <example>
                <code>
                  using System;
                  using System.IO;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_GetDirectoriesWhere
                      {
                          [TestMethod]
                          public void GetDirectoriesWhere()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_GetDirectories&quot;));
                              Directory.CreateDirectory(root.FullName);
                              root.CreateSubdirectory(&quot;DirFizz123&quot;);
                              root.CreateSubdirectory(&quot;DirBuzz123&quot;);
                              root.CreateSubdirectory(&quot;DirNotFound123&quot;);
            
                              // Exemples
                              DirectoryInfo[] result = root.GetDirectoriesWhere(x =&gt; x.Name.StartsWith(&quot;DirFizz&quot;) || x.Name.StartsWith(&quot;DirBuzz&quot;));
            
                              // Unit Test
                              Assert.AreEqual(2, result.Length);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                  using System;
                  using System.IO;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
                  using Z.ExtensionMethods;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_GetDirectoriesWhere
                      {
                          [TestMethod]
                          public void GetDirectoriesWhere()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_GetDirectories&quot;));
                              Directory.CreateDirectory(root.FullName);
                              root.CreateSubdirectory(&quot;DirFizz123&quot;);
                              root.CreateSubdirectory(&quot;DirBuzz123&quot;);
                              root.CreateSubdirectory(&quot;DirNotFound123&quot;);
            
                              // Exemples
                              DirectoryInfo[] result = root.GetDirectoriesWhere(x =&gt; x.Name.StartsWith(&quot;DirFizz&quot;) || x.Name.StartsWith(&quot;DirBuzz&quot;));
            
                              // Unit Test
                              Assert.AreEqual(2, result.Length);
                          }
                      }
                  }
            </code>
            </example>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this " />is a zero-length string, contains only
                white space, or contains invalid characters as defined by
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .- or -<paramref name="searchPattern" /> does not contain a valid pattern.
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.-or-
                <paramref name="searchPattern" /> is null.
            </exception>
            ###
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="searchOption" /> is not a valid
                <see cref="T:System.IO.SearchOption" /> value.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid, such as
                referring to an unmapped drive.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">
                <paramref name="this" /> is a file name.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or combined exceed the
                system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters
                and file names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.GetFiles(System.IO.DirectoryInfo,System.String[])">
            <summary>
                Returns an enumerable collection of file names that match a search pattern in a specified @this.
            </summary>
            <param name="this">The directory to search.</param>
            <param name="searchPatterns">The search string to match against the names of directories in.</param>
            <returns>
                An enumerable collection of the full names (including paths) for the files in the directory specified by
                <paramref
                    name="this" />
                and that match the specified search pattern.
            </returns>
            ###
            <param name="searchPattern">
                The search string to match against the names of directories in
                <paramref name="this" />.
            </param>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this " />is a zero-length string, contains only
                white space, or contains invalid characters as defined by
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .- or -<paramref name="searchPattern" /> does not contain a valid pattern.
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.-or-
                <paramref name="searchPattern" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid, such as
                referring to an unmapped drive.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">
                <paramref name="this" /> is a file name.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or combined exceed the
                system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters
                and file names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.GetFiles(System.IO.DirectoryInfo,System.String[],System.IO.SearchOption)">
            <summary>
                Returns an enumerable collection of file names that match a search pattern in a specified @this, and
                optionally searches subdirectories.
            </summary>
            <param name="this">The directory to search.</param>
            <param name="searchPatterns">
                The search string to match against the names of directories in
                <paramref name="this" />.
            </param>
            <param name="searchOption">
                One of the enumeration values that specifies whether the search operation should
                include only the current directory or should include all subdirectories.The default value is
                <see
                    cref="F:System.IO.SearchOption.TopDirectoryOnly" />
                .
            </param>
            <returns>
                An enumerable collection of the full names (including paths) for the files in the directory specified by
                <paramref
                    name="this" />
                and that match the specified search pattern and option.
            </returns>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this " />is a zero-length string, contains only
                white space, or contains invalid characters as defined by
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .- or -<paramref name="searchPattern" /> does not contain a valid pattern.
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.-or-
                <paramref name="searchPattern" /> is null.
            </exception>
            ###
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="searchOption" /> is not a valid
                <see cref="T:System.IO.SearchOption" /> value.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid, such as
                referring to an unmapped drive.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">
                <paramref name="this" /> is a file name.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or combined exceed the
                system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters
                and file names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.GetFilesWhere(System.IO.DirectoryInfo,System.Func{System.IO.FileInfo,System.Boolean})">
            <summary>
                Returns an enumerable collection of file names in a specified @this.
            </summary>
            <param name="this">The directory to search.</param>
            <param name="predicate">The predicate.</param>
            <returns>
                An enumerable collection of the full names (including paths) for the files in the directory specified by
                <paramref
                    name="this" />
                .
            </returns>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this " />is a zero-length string, contains only
                white space, or contains invalid characters as defined by
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid, such as
                referring to an unmapped drive.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">
                <paramref name="this" /> is a file name.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or combined exceed the
                system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters
                and file names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.GetFilesWhere(System.IO.DirectoryInfo,System.String,System.Func{System.IO.FileInfo,System.Boolean})">
            <summary>
                Returns an enumerable collection of file names that match a search pattern in a specified @this.
            </summary>
            <param name="this">The directory to search.</param>
            <param name="searchPattern">
                The search string to match against the names of directories in
                <paramref name="this" />.
            </param>
            <param name="predicate">The predicate.</param>
            <returns>
                An enumerable collection of the full names (including paths) for the files in the directory specified by
                <paramref
                    name="this" />
                and that match the specified search pattern.
            </returns>
            <example>
                <code>
                  using System;
                  using System.IO;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_GetFilesWhere
                      {
                          [TestMethod]
                          public void GetFilesWhere()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_GetFilesWhere&quot;));
                              Directory.CreateDirectory(root.FullName);
            
                              var file1 = new FileInfo(Path.Combine(root.FullName, &quot;test.txt&quot;));
                              var file2 = new FileInfo(Path.Combine(root.FullName, &quot;test.cs&quot;));
                              var file3 = new FileInfo(Path.Combine(root.FullName, &quot;test.asp&quot;));
                              file1.Create();
                              file2.Create();
                              file3.Create();
            
                              // Exemples
                              FileInfo[] result = root.GetFilesWhere(x =&gt; x.Extension == &quot;.txt&quot; || x.Extension == &quot;.cs&quot;);
            
                              // Unit Test
                              Assert.AreEqual(2, result.Length);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                  using System;
                  using System.IO;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
                  using Z.ExtensionMethods;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_GetFilesWhere
                      {
                          [TestMethod]
                          public void GetFilesWhere()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_GetFilesWhere&quot;));
                              Directory.CreateDirectory(root.FullName);
            
                              var file1 = new FileInfo(Path.Combine(root.FullName, &quot;test.txt&quot;));
                              var file2 = new FileInfo(Path.Combine(root.FullName, &quot;test.cs&quot;));
                              var file3 = new FileInfo(Path.Combine(root.FullName, &quot;test.asp&quot;));
                              file1.Create();
                              file2.Create();
                              file3.Create();
            
                              // Exemples
                              FileInfo[] result = root.GetFilesWhere(x =&gt; x.Extension == &quot;.txt&quot; || x.Extension == &quot;.cs&quot;);
            
                              // Unit Test
                              Assert.AreEqual(2, result.Length);
                          }
                      }
                  }
            </code>
            </example>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this " />is a zero-length string, contains only
                white space, or contains invalid characters as defined by
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .- or -<paramref name="searchPattern" /> does not contain a valid pattern.
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.-or-
                <paramref name="searchPattern" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid, such as
                referring to an unmapped drive.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">
                <paramref name="this" /> is a file name.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or combined exceed the
                system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters
                and file names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.GetFilesWhere(System.IO.DirectoryInfo,System.String,System.IO.SearchOption,System.Func{System.IO.FileInfo,System.Boolean})">
            <summary>
                Returns an enumerable collection of file names that match a search pattern in a specified @this, and
                optionally searches subdirectories.
            </summary>
            <param name="this">The directory to search.</param>
            <param name="searchPattern">
                The search string to match against the names of directories in
                <paramref name="this" />.
            </param>
            <param name="searchOption">
                One of the enumeration values that specifies whether the search operation should
                include only the current directory or should include all subdirectories.The default value is
                <see
                    cref="F:System.IO.SearchOption.TopDirectoryOnly" />
                .
            </param>
            <param name="predicate">The predicate.</param>
            <returns>
                An enumerable collection of the full names (including paths) for the files in the directory specified by
                <paramref
                    name="this" />
                and that match the specified search pattern and option.
            </returns>
            <example>
                <code>
                  using System;
                  using System.IO;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_GetFilesWhere
                      {
                          [TestMethod]
                          public void GetFilesWhere()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_GetFilesWhere&quot;));
                              Directory.CreateDirectory(root.FullName);
            
                              var file1 = new FileInfo(Path.Combine(root.FullName, &quot;test.txt&quot;));
                              var file2 = new FileInfo(Path.Combine(root.FullName, &quot;test.cs&quot;));
                              var file3 = new FileInfo(Path.Combine(root.FullName, &quot;test.asp&quot;));
                              file1.Create();
                              file2.Create();
                              file3.Create();
            
                              // Exemples
                              FileInfo[] result = root.GetFilesWhere(x =&gt; x.Extension == &quot;.txt&quot; || x.Extension == &quot;.cs&quot;);
            
                              // Unit Test
                              Assert.AreEqual(2, result.Length);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                  using System;
                  using System.IO;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
                  using Z.ExtensionMethods;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_GetFilesWhere
                      {
                          [TestMethod]
                          public void GetFilesWhere()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_GetFilesWhere&quot;));
                              Directory.CreateDirectory(root.FullName);
            
                              var file1 = new FileInfo(Path.Combine(root.FullName, &quot;test.txt&quot;));
                              var file2 = new FileInfo(Path.Combine(root.FullName, &quot;test.cs&quot;));
                              var file3 = new FileInfo(Path.Combine(root.FullName, &quot;test.asp&quot;));
                              file1.Create();
                              file2.Create();
                              file3.Create();
            
                              // Exemples
                              FileInfo[] result = root.GetFilesWhere(x =&gt; x.Extension == &quot;.txt&quot; || x.Extension == &quot;.cs&quot;);
            
                              // Unit Test
                              Assert.AreEqual(2, result.Length);
                          }
                      }
                  }
            </code>
            </example>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this " />is a zero-length string, contains only
                white space, or contains invalid characters as defined by
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .- or -<paramref name="searchPattern" /> does not contain a valid pattern.
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.-or-
                <paramref name="searchPattern" /> is null.
            </exception>
            ###
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="searchOption" /> is not a valid
                <see cref="T:System.IO.SearchOption" /> value.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid, such as
                referring to an unmapped drive.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">
                <paramref name="this" /> is a file name.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or combined exceed the
                system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters
                and file names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.GetFilesWhere(System.IO.DirectoryInfo,System.String[],System.Func{System.IO.FileInfo,System.Boolean})">
            <summary>
                Returns an enumerable collection of file names that match a search pattern in a specified @this.
            </summary>
            <param name="this">The directory to search.</param>
            <param name="searchPatterns">The search string to match against the names of directories in.</param>
            <param name="predicate">The predicate.</param>
            <returns>
                An enumerable collection of the full names (including paths) for the files in the directory specified by
                <paramref
                    name="this" />
                and that match the specified search pattern.
            </returns>
            <example>
                <code>
                  using System;
                  using System.IO;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_GetFilesWhere
                      {
                          [TestMethod]
                          public void GetFilesWhere()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_GetFilesWhere&quot;));
                              Directory.CreateDirectory(root.FullName);
            
                              var file1 = new FileInfo(Path.Combine(root.FullName, &quot;test.txt&quot;));
                              var file2 = new FileInfo(Path.Combine(root.FullName, &quot;test.cs&quot;));
                              var file3 = new FileInfo(Path.Combine(root.FullName, &quot;test.asp&quot;));
                              file1.Create();
                              file2.Create();
                              file3.Create();
            
                              // Exemples
                              FileInfo[] result = root.GetFilesWhere(x =&gt; x.Extension == &quot;.txt&quot; || x.Extension == &quot;.cs&quot;);
            
                              // Unit Test
                              Assert.AreEqual(2, result.Length);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                  using System;
                  using System.IO;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
                  using Z.ExtensionMethods;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_GetFilesWhere
                      {
                          [TestMethod]
                          public void GetFilesWhere()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_GetFilesWhere&quot;));
                              Directory.CreateDirectory(root.FullName);
            
                              var file1 = new FileInfo(Path.Combine(root.FullName, &quot;test.txt&quot;));
                              var file2 = new FileInfo(Path.Combine(root.FullName, &quot;test.cs&quot;));
                              var file3 = new FileInfo(Path.Combine(root.FullName, &quot;test.asp&quot;));
                              file1.Create();
                              file2.Create();
                              file3.Create();
            
                              // Exemples
                              FileInfo[] result = root.GetFilesWhere(x =&gt; x.Extension == &quot;.txt&quot; || x.Extension == &quot;.cs&quot;);
            
                              // Unit Test
                              Assert.AreEqual(2, result.Length);
                          }
                      }
                  }
            </code>
            </example>
            ###
            <param name="searchPattern">
                The search string to match against the names of directories in
                <paramref name="this" />.
            </param>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this " />is a zero-length string, contains only
                white space, or contains invalid characters as defined by
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .- or -<paramref name="searchPattern" /> does not contain a valid pattern.
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.-or-
                <paramref name="searchPattern" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid, such as
                referring to an unmapped drive.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">
                <paramref name="this" /> is a file name.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or combined exceed the
                system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters
                and file names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.GetFilesWhere(System.IO.DirectoryInfo,System.String[],System.IO.SearchOption,System.Func{System.IO.FileInfo,System.Boolean})">
            <summary>
                Returns an enumerable collection of file names that match a search pattern in a specified @this, and
                optionally searches subdirectories.
            </summary>
            <param name="this">The directory to search.</param>
            <param name="searchPatterns">
                The search string to match against the names of directories in
                <paramref name="this" />.
            </param>
            <param name="searchOption">
                One of the enumeration values that specifies whether the search operation should
                include only the current directory or should include all subdirectories.The default value is
                <see
                    cref="F:System.IO.SearchOption.TopDirectoryOnly" />
                .
            </param>
            <param name="predicate">The predicate.</param>
            <returns>
                An enumerable collection of the full names (including paths) for the files in the directory specified by
                <paramref
                    name="this" />
                and that match the specified search pattern and option.
            </returns>
            <example>
                <code>
                  using System;
                  using System.IO;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_GetFilesWhere
                      {
                          [TestMethod]
                          public void GetFilesWhere()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_GetFilesWhere&quot;));
                              Directory.CreateDirectory(root.FullName);
            
                              var file1 = new FileInfo(Path.Combine(root.FullName, &quot;test.txt&quot;));
                              var file2 = new FileInfo(Path.Combine(root.FullName, &quot;test.cs&quot;));
                              var file3 = new FileInfo(Path.Combine(root.FullName, &quot;test.asp&quot;));
                              file1.Create();
                              file2.Create();
                              file3.Create();
            
                              // Exemples
                              FileInfo[] result = root.GetFilesWhere(x =&gt; x.Extension == &quot;.txt&quot; || x.Extension == &quot;.cs&quot;);
            
                              // Unit Test
                              Assert.AreEqual(2, result.Length);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                  using System;
                  using System.IO;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
                  using Z.ExtensionMethods;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_GetFilesWhere
                      {
                          [TestMethod]
                          public void GetFilesWhere()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_GetFilesWhere&quot;));
                              Directory.CreateDirectory(root.FullName);
            
                              var file1 = new FileInfo(Path.Combine(root.FullName, &quot;test.txt&quot;));
                              var file2 = new FileInfo(Path.Combine(root.FullName, &quot;test.cs&quot;));
                              var file3 = new FileInfo(Path.Combine(root.FullName, &quot;test.asp&quot;));
                              file1.Create();
                              file2.Create();
                              file3.Create();
            
                              // Exemples
                              FileInfo[] result = root.GetFilesWhere(x =&gt; x.Extension == &quot;.txt&quot; || x.Extension == &quot;.cs&quot;);
            
                              // Unit Test
                              Assert.AreEqual(2, result.Length);
                          }
                      }
                  }
            </code>
            </example>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this " />is a zero-length string, contains only
                white space, or contains invalid characters as defined by
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .- or -<paramref name="searchPattern" /> does not contain a valid pattern.
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.-or-
                <paramref name="searchPattern" /> is null.
            </exception>
            ###
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="searchOption" /> is not a valid
                <see cref="T:System.IO.SearchOption" /> value.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid, such as
                referring to an unmapped drive.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">
                <paramref name="this" /> is a file name.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or combined exceed the
                system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters
                and file names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.GetFileSystemEntries(System.IO.DirectoryInfo)">
            <summary>
                Returns an enumerable collection of file-system entries in a specified @this.
            </summary>
            <param name="this">The directory to search.</param>
            <returns>
                An enumerable collection of file-system entries in the directory specified by <paramref name="this" />.
            </returns>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this " />is a zero-length string, contains only
                white space, or contains invalid characters as defined by
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid, such as
                referring to an unmapped drive.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">
                <paramref name="this" /> is a file name.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or combined exceed the
                system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters
                and file names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.GetFileSystemEntries(System.IO.DirectoryInfo,System.String)">
            <summary>
                Returns an enumerable collection of file-system entries that match a search pattern in a specified @this.
            </summary>
            <param name="this">The directory to search.</param>
            <param name="searchPattern">
                The search string to match against the names of directories in
                <paramref name="this" />.
            </param>
            <returns>
                An enumerable collection of file-system entries in the directory specified by <paramref name="this" /> and
                that match the specified search pattern.
            </returns>
            <example>
                <code>
                  using System;
                  using System.IO;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_GetFileSystemEntries
                      {
                          [TestMethod]
                          public void GetFileSystemEntries()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_GetFileSystemEntries&quot;));
                              Directory.CreateDirectory(root.FullName);
                              root.CreateSubdirectory(&quot;DirFizz123&quot;);
                              root.CreateSubdirectory(&quot;DirBuzz123&quot;);
                              var file1 = new FileInfo(Path.Combine(root.FullName, &quot;test1.txt&quot;));
                              file1.Create();
            
                              // Exemples
                              string[] result = root.GetFileSystemEntries(new[] {&quot;DirFizz*&quot;, &quot;*.txt&quot;});
            
                              // Unit Test
                              Assert.AreEqual(2, result.Length);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                  using System;
                  using System.IO;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
                  using Z.ExtensionMethods;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_GetFileSystemEntries
                      {
                          [TestMethod]
                          public void GetFileSystemEntries()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_GetFileSystemEntries&quot;));
                              Directory.CreateDirectory(root.FullName);
                              root.CreateSubdirectory(&quot;DirFizz123&quot;);
                              root.CreateSubdirectory(&quot;DirBuzz123&quot;);
                              var file1 = new FileInfo(Path.Combine(root.FullName, &quot;test1.txt&quot;));
                              file1.Create();
            
                              // Exemples
                              string[] result = root.GetFileSystemEntries(new[] {&quot;DirFizz*&quot;, &quot;*.txt&quot;});
            
                              // Unit Test
                              Assert.AreEqual(2, result.Length);
                          }
                      }
                  }
            </code>
            </example>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this " />is a zero-length string, contains only
                white space, or contains invalid characters as defined by
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .- or -<paramref name="searchPattern" /> does not contain a valid pattern.
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.-or-
                <paramref name="searchPattern" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid, such as
                referring to an unmapped drive.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">
                <paramref name="this" /> is a file name.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or combined exceed the
                system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters
                and file names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.GetFileSystemEntries(System.IO.DirectoryInfo,System.String,System.IO.SearchOption)">
            <summary>
                Returns an enumerable collection of file names and directory names that match a search pattern in a specified
                @this, and optionally searches subdirectories.
            </summary>
            <param name="this">The directory to search.</param>
            <param name="searchPattern">
                The search string to match against the names of directories in
                <paramref name="this" />.
            </param>
            <param name="searchOption">
                One of the enumeration values  that specifies whether the search operation should
                include only the current directory or should include all subdirectories.The default value is
                <see
                    cref="F:System.IO.SearchOption.TopDirectoryOnly" />
                .
            </param>
            <returns>
                An enumerable collection of file-system entries in the directory specified by <paramref name="this" /> and
                that match the specified search pattern and option.
            </returns>
            <example>
                <code>
                  using System;
                  using System.IO;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_GetFileSystemEntries
                      {
                          [TestMethod]
                          public void GetFileSystemEntries()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_GetFileSystemEntries&quot;));
                              Directory.CreateDirectory(root.FullName);
                              root.CreateSubdirectory(&quot;DirFizz123&quot;);
                              root.CreateSubdirectory(&quot;DirBuzz123&quot;);
                              var file1 = new FileInfo(Path.Combine(root.FullName, &quot;test1.txt&quot;));
                              file1.Create();
            
                              // Exemples
                              string[] result = root.GetFileSystemEntries(new[] {&quot;DirFizz*&quot;, &quot;*.txt&quot;});
            
                              // Unit Test
                              Assert.AreEqual(2, result.Length);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                  using System;
                  using System.IO;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
                  using Z.ExtensionMethods;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_GetFileSystemEntries
                      {
                          [TestMethod]
                          public void GetFileSystemEntries()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_GetFileSystemEntries&quot;));
                              Directory.CreateDirectory(root.FullName);
                              root.CreateSubdirectory(&quot;DirFizz123&quot;);
                              root.CreateSubdirectory(&quot;DirBuzz123&quot;);
                              var file1 = new FileInfo(Path.Combine(root.FullName, &quot;test1.txt&quot;));
                              file1.Create();
            
                              // Exemples
                              string[] result = root.GetFileSystemEntries(new[] {&quot;DirFizz*&quot;, &quot;*.txt&quot;});
            
                              // Unit Test
                              Assert.AreEqual(2, result.Length);
                          }
                      }
                  }
            </code>
            </example>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this " />is a zero-length string, contains only
                white space, or contains invalid characters as defined by
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .- or -<paramref name="searchPattern" /> does not contain a valid pattern.
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.-or-
                <paramref name="searchPattern" /> is null.
            </exception>
            ###
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="searchOption" /> is not a valid
                <see cref="T:System.IO.SearchOption" /> value.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid, such as
                referring to an unmapped drive.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">
                <paramref name="this" /> is a file name.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or combined exceed the
                system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters
                and file names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.GetFileSystemEntries(System.IO.DirectoryInfo,System.String[])">
            <summary>
                Returns an enumerable collection of file-system entries that match a search pattern in a specified @this.
            </summary>
            <param name="this">The directory to search.</param>
            <param name="searchPatterns">The search string to match against the names of directories in.</param>
            <returns>
                An enumerable collection of file-system entries in the directory specified by <paramref name="this" /> and
                that match the specified search pattern.
            </returns>
            <example>
                <code>
                  using System;
                  using System.IO;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_GetFileSystemEntries
                      {
                          [TestMethod]
                          public void GetFileSystemEntries()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_GetFileSystemEntries&quot;));
                              Directory.CreateDirectory(root.FullName);
                              root.CreateSubdirectory(&quot;DirFizz123&quot;);
                              root.CreateSubdirectory(&quot;DirBuzz123&quot;);
                              var file1 = new FileInfo(Path.Combine(root.FullName, &quot;test1.txt&quot;));
                              file1.Create();
            
                              // Exemples
                              string[] result = root.GetFileSystemEntries(new[] {&quot;DirFizz*&quot;, &quot;*.txt&quot;});
            
                              // Unit Test
                              Assert.AreEqual(2, result.Length);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                  using System;
                  using System.IO;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
                  using Z.ExtensionMethods;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_GetFileSystemEntries
                      {
                          [TestMethod]
                          public void GetFileSystemEntries()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_GetFileSystemEntries&quot;));
                              Directory.CreateDirectory(root.FullName);
                              root.CreateSubdirectory(&quot;DirFizz123&quot;);
                              root.CreateSubdirectory(&quot;DirBuzz123&quot;);
                              var file1 = new FileInfo(Path.Combine(root.FullName, &quot;test1.txt&quot;));
                              file1.Create();
            
                              // Exemples
                              string[] result = root.GetFileSystemEntries(new[] {&quot;DirFizz*&quot;, &quot;*.txt&quot;});
            
                              // Unit Test
                              Assert.AreEqual(2, result.Length);
                          }
                      }
                  }
            </code>
            </example>
            ###
            <param name="searchPattern">
                The search string to match against the names of directories in
                <paramref name="this" />.
            </param>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this " />is a zero-length string, contains only
                white space, or contains invalid characters as defined by
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .- or -<paramref name="searchPattern" /> does not contain a valid pattern.
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.-or-
                <paramref name="searchPattern" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid, such as
                referring to an unmapped drive.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">
                <paramref name="this" /> is a file name.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or combined exceed the
                system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters
                and file names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.GetFileSystemEntries(System.IO.DirectoryInfo,System.String[],System.IO.SearchOption)">
            <summary>
                Returns an enumerable collection of file names and directory names that match a search pattern in a specified
                @this, and optionally searches subdirectories.
            </summary>
            <param name="this">The directory to search.</param>
            <param name="searchPatterns">
                The search string to match against the names of directories in
                <paramref name="this" />.
            </param>
            <param name="searchOption">
                One of the enumeration values  that specifies whether the search operation should
                include only the current directory or should include all subdirectories.The default value is
                <see
                    cref="F:System.IO.SearchOption.TopDirectoryOnly" />
                .
            </param>
            <returns>
                An enumerable collection of file-system entries in the directory specified by <paramref name="this" /> and
                that match the specified search pattern and option.
            </returns>
            <example>
                <code>
                  using System;
                  using System.IO;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_GetFileSystemEntries
                      {
                          [TestMethod]
                          public void GetFileSystemEntries()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_GetFileSystemEntries&quot;));
                              Directory.CreateDirectory(root.FullName);
                              root.CreateSubdirectory(&quot;DirFizz123&quot;);
                              root.CreateSubdirectory(&quot;DirBuzz123&quot;);
                              var file1 = new FileInfo(Path.Combine(root.FullName, &quot;test1.txt&quot;));
                              file1.Create();
            
                              // Exemples
                              string[] result = root.GetFileSystemEntries(new[] {&quot;DirFizz*&quot;, &quot;*.txt&quot;});
            
                              // Unit Test
                              Assert.AreEqual(2, result.Length);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                  using System;
                  using System.IO;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
                  using Z.ExtensionMethods;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_GetFileSystemEntries
                      {
                          [TestMethod]
                          public void GetFileSystemEntries()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_GetFileSystemEntries&quot;));
                              Directory.CreateDirectory(root.FullName);
                              root.CreateSubdirectory(&quot;DirFizz123&quot;);
                              root.CreateSubdirectory(&quot;DirBuzz123&quot;);
                              var file1 = new FileInfo(Path.Combine(root.FullName, &quot;test1.txt&quot;));
                              file1.Create();
            
                              // Exemples
                              string[] result = root.GetFileSystemEntries(new[] {&quot;DirFizz*&quot;, &quot;*.txt&quot;});
            
                              // Unit Test
                              Assert.AreEqual(2, result.Length);
                          }
                      }
                  }
            </code>
            </example>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this " />is a zero-length string, contains only
                white space, or contains invalid characters as defined by
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .- or -<paramref name="searchPattern" /> does not contain a valid pattern.
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.-or-
                <paramref name="searchPattern" /> is null.
            </exception>
            ###
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="searchOption" /> is not a valid
                <see cref="T:System.IO.SearchOption" /> value.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid, such as
                referring to an unmapped drive.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">
                <paramref name="this" /> is a file name.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or combined exceed the
                system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters
                and file names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.GetFileSystemEntriesWhere(System.IO.DirectoryInfo,System.Func{System.String,System.Boolean})">
            <summary>
                Returns an enumerable collection of file-system entries in a specified @this.
            </summary>
            <param name="this">The directory to search.</param>
            <param name="predicate">The predicate.</param>
            <returns>
                An enumerable collection of file-system entries in the directory specified by <paramref name="this" />.
            </returns>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this " />is a zero-length string, contains only
                white space, or contains invalid characters as defined by
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid, such as
                referring to an unmapped drive.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">
                <paramref name="this" /> is a file name.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or combined exceed the
                system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters
                and file names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.GetFileSystemEntriesWhere(System.IO.DirectoryInfo,System.String,System.Func{System.String,System.Boolean})">
            <summary>
                Returns an enumerable collection of file-system entries that match a search pattern in a specified @this.
            </summary>
            <param name="this">The directory to search.</param>
            <param name="searchPattern">
                The search string to match against the names of directories in
                <paramref name="this" />.
            </param>
            <param name="predicate">The predicate.</param>
            <returns>
                An enumerable collection of file-system entries in the directory specified by <paramref name="this" /> and
                that match the specified search pattern.
            </returns>
            <example>
                <code>
                  using System;
                  using System.IO;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_GetFileSystemEntriesWhere
                      {
                          [TestMethod]
                          public void GetFileSystemEntriesWhere()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_GetFileSystemEntriesWhere&quot;));
                              Directory.CreateDirectory(root.FullName);
                              root.CreateSubdirectory(&quot;DirFizz123&quot;);
                              root.CreateSubdirectory(&quot;DirBuzz123&quot;);
                              var file1 = new FileInfo(Path.Combine(root.FullName, &quot;test1.txt&quot;));
                              file1.Create();
            
                              // Exemples
                              string[] result = root.GetFileSystemEntriesWhere(x =&gt; x.Contains(&quot;DirFizz&quot;) || x.EndsWith(&quot;.txt&quot;));
            
                              // Unit Test
                              Assert.AreEqual(2, result.Length);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                  using System;
                  using System.IO;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
                  using Z.ExtensionMethods;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_GetFileSystemEntriesWhere
                      {
                          [TestMethod]
                          public void GetFileSystemEntriesWhere()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_GetFileSystemEntriesWhere&quot;));
                              Directory.CreateDirectory(root.FullName);
                              root.CreateSubdirectory(&quot;DirFizz123&quot;);
                              root.CreateSubdirectory(&quot;DirBuzz123&quot;);
                              var file1 = new FileInfo(Path.Combine(root.FullName, &quot;test1.txt&quot;));
                              file1.Create();
            
                              // Exemples
                              string[] result = root.GetFileSystemEntriesWhere(x =&gt; x.Contains(&quot;DirFizz&quot;) || x.EndsWith(&quot;.txt&quot;));
            
                              // Unit Test
                              Assert.AreEqual(2, result.Length);
                          }
                      }
                  }
            </code>
            </example>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this " />is a zero-length string, contains only
                white space, or contains invalid characters as defined by
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .- or -<paramref name="searchPattern" /> does not contain a valid pattern.
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.-or-
                <paramref name="searchPattern" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid, such as
                referring to an unmapped drive.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">
                <paramref name="this" /> is a file name.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or combined exceed the
                system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters
                and file names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.GetFileSystemEntriesWhere(System.IO.DirectoryInfo,System.String,System.IO.SearchOption,System.Func{System.String,System.Boolean})">
            <summary>
                Returns an enumerable collection of file names and directory names that match a search pattern in a specified
                @this, and optionally searches subdirectories.
            </summary>
            <param name="this">The directory to search.</param>
            <param name="searchPattern">
                The search string to match against the names of directories in
                <paramref name="this" />.
            </param>
            <param name="searchOption">
                One of the enumeration values  that specifies whether the search operation should
                include only the current directory or should include all subdirectories.The default value is
                <see
                    cref="F:System.IO.SearchOption.TopDirectoryOnly" />
                .
            </param>
            <param name="predicate">The predicate.</param>
            <returns>
                An enumerable collection of file-system entries in the directory specified by <paramref name="this" /> and
                that match the specified search pattern and option.
            </returns>
            <example>
                <code>
                  using System;
                  using System.IO;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_GetFileSystemEntriesWhere
                      {
                          [TestMethod]
                          public void GetFileSystemEntriesWhere()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_GetFileSystemEntriesWhere&quot;));
                              Directory.CreateDirectory(root.FullName);
                              root.CreateSubdirectory(&quot;DirFizz123&quot;);
                              root.CreateSubdirectory(&quot;DirBuzz123&quot;);
                              var file1 = new FileInfo(Path.Combine(root.FullName, &quot;test1.txt&quot;));
                              file1.Create();
            
                              // Exemples
                              string[] result = root.GetFileSystemEntriesWhere(x =&gt; x.Contains(&quot;DirFizz&quot;) || x.EndsWith(&quot;.txt&quot;));
            
                              // Unit Test
                              Assert.AreEqual(2, result.Length);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                  using System;
                  using System.IO;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
                  using Z.ExtensionMethods;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_GetFileSystemEntriesWhere
                      {
                          [TestMethod]
                          public void GetFileSystemEntriesWhere()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_GetFileSystemEntriesWhere&quot;));
                              Directory.CreateDirectory(root.FullName);
                              root.CreateSubdirectory(&quot;DirFizz123&quot;);
                              root.CreateSubdirectory(&quot;DirBuzz123&quot;);
                              var file1 = new FileInfo(Path.Combine(root.FullName, &quot;test1.txt&quot;));
                              file1.Create();
            
                              // Exemples
                              string[] result = root.GetFileSystemEntriesWhere(x =&gt; x.Contains(&quot;DirFizz&quot;) || x.EndsWith(&quot;.txt&quot;));
            
                              // Unit Test
                              Assert.AreEqual(2, result.Length);
                          }
                      }
                  }
            </code>
            </example>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this " />is a zero-length string, contains only
                white space, or contains invalid characters as defined by
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .- or -<paramref name="searchPattern" /> does not contain a valid pattern.
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.-or-
                <paramref name="searchPattern" /> is null.
            </exception>
            ###
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="searchOption" /> is not a valid
                <see cref="T:System.IO.SearchOption" /> value.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid, such as
                referring to an unmapped drive.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">
                <paramref name="this" /> is a file name.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or combined exceed the
                system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters
                and file names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.GetFileSystemEntriesWhere(System.IO.DirectoryInfo,System.String[],System.Func{System.String,System.Boolean})">
            <summary>
                Returns an enumerable collection of file-system entries that match a search pattern in a specified @this.
            </summary>
            <param name="this">The directory to search.</param>
            <param name="searchPatterns">The search string to match against the names of directories in.</param>
            <param name="predicate">The predicate.</param>
            <returns>
                An enumerable collection of file-system entries in the directory specified by <paramref name="this" /> and
                that match the specified search pattern.
            </returns>
            <example>
                <code>
                  using System;
                  using System.IO;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_GetFileSystemEntriesWhere
                      {
                          [TestMethod]
                          public void GetFileSystemEntriesWhere()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_GetFileSystemEntriesWhere&quot;));
                              Directory.CreateDirectory(root.FullName);
                              root.CreateSubdirectory(&quot;DirFizz123&quot;);
                              root.CreateSubdirectory(&quot;DirBuzz123&quot;);
                              var file1 = new FileInfo(Path.Combine(root.FullName, &quot;test1.txt&quot;));
                              file1.Create();
            
                              // Exemples
                              string[] result = root.GetFileSystemEntriesWhere(x =&gt; x.Contains(&quot;DirFizz&quot;) || x.EndsWith(&quot;.txt&quot;));
            
                              // Unit Test
                              Assert.AreEqual(2, result.Length);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                  using System;
                  using System.IO;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
                  using Z.ExtensionMethods;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_GetFileSystemEntriesWhere
                      {
                          [TestMethod]
                          public void GetFileSystemEntriesWhere()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_GetFileSystemEntriesWhere&quot;));
                              Directory.CreateDirectory(root.FullName);
                              root.CreateSubdirectory(&quot;DirFizz123&quot;);
                              root.CreateSubdirectory(&quot;DirBuzz123&quot;);
                              var file1 = new FileInfo(Path.Combine(root.FullName, &quot;test1.txt&quot;));
                              file1.Create();
            
                              // Exemples
                              string[] result = root.GetFileSystemEntriesWhere(x =&gt; x.Contains(&quot;DirFizz&quot;) || x.EndsWith(&quot;.txt&quot;));
            
                              // Unit Test
                              Assert.AreEqual(2, result.Length);
                          }
                      }
                  }
            </code>
            </example>
            ###
            <param name="searchPattern">
                The search string to match against the names of directories in
                <paramref name="this" />.
            </param>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this " />is a zero-length string, contains only
                white space, or contains invalid characters as defined by
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .- or -<paramref name="searchPattern" /> does not contain a valid pattern.
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.-or-
                <paramref name="searchPattern" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid, such as
                referring to an unmapped drive.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">
                <paramref name="this" /> is a file name.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or combined exceed the
                system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters
                and file names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.GetFileSystemEntriesWhere(System.IO.DirectoryInfo,System.String[],System.IO.SearchOption,System.Func{System.String,System.Boolean})">
            <summary>
                Returns an enumerable collection of file names and directory names that match a search pattern in a specified
                @this, and optionally searches subdirectories.
            </summary>
            <param name="this">The directory to search.</param>
            <param name="searchPatterns">
                The search string to match against the names of directories in
                <paramref name="this" />.
            </param>
            <param name="searchOption">
                One of the enumeration values  that specifies whether the search operation should
                include only the current directory or should include all subdirectories.The default value is
                <see
                    cref="F:System.IO.SearchOption.TopDirectoryOnly" />
                .
            </param>
            <param name="predicate">The predicate.</param>
            <returns>
                An enumerable collection of file-system entries in the directory specified by <paramref name="this" /> and
                that match the specified search pattern and option.
            </returns>
            <example>
                <code>
                  using System;
                  using System.IO;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
            
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_GetFileSystemEntriesWhere
                      {
                          [TestMethod]
                          public void GetFileSystemEntriesWhere()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_GetFileSystemEntriesWhere&quot;));
                              Directory.CreateDirectory(root.FullName);
                              root.CreateSubdirectory(&quot;DirFizz123&quot;);
                              root.CreateSubdirectory(&quot;DirBuzz123&quot;);
                              var file1 = new FileInfo(Path.Combine(root.FullName, &quot;test1.txt&quot;));
                              file1.Create();
            
                              // Exemples
                              string[] result = root.GetFileSystemEntriesWhere(x =&gt; x.Contains(&quot;DirFizz&quot;) || x.EndsWith(&quot;.txt&quot;));
            
                              // Unit Test
                              Assert.AreEqual(2, result.Length);
                          }
                      }
                  }
            </code>
            </example>
            <example>
                <code>
                  using System;
                  using System.IO;
                  using Microsoft.VisualStudio.TestTools.UnitTesting;
                  using Z.ExtensionMethods;
            
                  namespace ExtensionMethods.Examples
                  {
                      [TestClass]
                      public class System_IO_DirectoryInfo_GetFileSystemEntriesWhere
                      {
                          [TestMethod]
                          public void GetFileSystemEntriesWhere()
                          {
                              // Type
                              var root = new DirectoryInfo(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, &quot;System_IO_DirectoryInfo_GetFileSystemEntriesWhere&quot;));
                              Directory.CreateDirectory(root.FullName);
                              root.CreateSubdirectory(&quot;DirFizz123&quot;);
                              root.CreateSubdirectory(&quot;DirBuzz123&quot;);
                              var file1 = new FileInfo(Path.Combine(root.FullName, &quot;test1.txt&quot;));
                              file1.Create();
            
                              // Exemples
                              string[] result = root.GetFileSystemEntriesWhere(x =&gt; x.Contains(&quot;DirFizz&quot;) || x.EndsWith(&quot;.txt&quot;));
            
                              // Unit Test
                              Assert.AreEqual(2, result.Length);
                          }
                      }
                  }
            </code>
            </example>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this " />is a zero-length string, contains only
                white space, or contains invalid characters as defined by
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .- or -<paramref name="searchPattern" /> does not contain a valid pattern.
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.-or-
                <paramref name="searchPattern" /> is null.
            </exception>
            ###
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="searchOption" /> is not a valid
                <see cref="T:System.IO.SearchOption" /> value.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid, such as
                referring to an unmapped drive.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">
                <paramref name="this" /> is a file name.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or combined exceed the
                system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters
                and file names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.GetSize(System.IO.DirectoryInfo)">
            <summary>
                A DirectoryInfo extension method that gets a size.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The size.</returns>
        </member>
        <member name="M:Extensions.PathCombine(System.IO.DirectoryInfo,System.String[])">
            <summary>
                Combines multiples string into a path.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="paths">A variable-length parameters list containing paths.</param>
            <returns>
                The combined paths. If one of the specified paths is a zero-length string, this method returns the other path.
            </returns>
        </member>
        <member name="M:Extensions.PathCombineDirectory(System.IO.DirectoryInfo,System.String[])">
            <summary>
                Combines multiples string into a path.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="paths">A variable-length parameters list containing paths.</param>
            <returns>
                The combined paths as a DirectoryInfo. If one of the specified paths is a zero-length string, this method
                returns the other path.
            </returns>
        </member>
        <member name="M:Extensions.PathCombineFile(System.IO.DirectoryInfo,System.String[])">
            <summary>
                Combines multiples string into a path.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="paths">A variable-length parameters list containing paths.</param>
            <returns>
                The combined paths as a FileInfo. If one of the specified paths is a zero-length string, this method returns
                the other path.
            </returns>
        </member>
        <member name="M:Extensions.AppendAllLines(System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                A FileInfo extension method that appends all lines.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="contents">The contents.</param>
        </member>
        <member name="M:Extensions.AppendAllLines(System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
                A FileInfo extension method that appends all lines.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="contents">The contents.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:Extensions.AppendAllText(System.IO.FileInfo,System.String)">
            <summary>
                Opens a file, appends the specified string to the file, and then closes the file. If the file does not exist,
                this method creates a file, writes the specified string to the file, then closes the file.
            </summary>
            <param name="this">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this" /> is a zero-length string, contains only
                white space, or contains one or more invalid characters as defined by
                <see
                    cref="F:System.IO.Path.InvalidPathChars" />
                .
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or both exceed the system-
                defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file
                names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                The specified @this is invalid (for example, the
                directory doesn?t exist or it is on an unmapped drive).
            </exception>
            ###
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">
                <paramref name="this" /> specified a file that is
                read-only.-or- This operation is not supported on the current platform.-or-
                <paramref
                    name="this" />
                specified a directory.-or- The caller does not have the required permission.
            </exception>
            ###
            <exception cref="T:System.IO.FileNotFoundException">
                The file specified in <paramref name="this" /> was not
                found.
            </exception>
            ###
            <exception cref="T:System.NotSupportedException">
                <paramref name="this" /> is in an invalid format.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.AppendAllText(System.IO.FileInfo,System.String,System.Text.Encoding)">
            <summary>
                Appends the specified string to the file, creating the file if it does not already exist.
            </summary>
            <param name="this">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
            <param name="encoding">The character encoding to use.</param>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this" /> is a zero-length string, contains only
                white space, or contains one or more invalid characters as defined by
                <see
                    cref="F:System.IO.Path.InvalidPathChars" />
                .
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or both exceed the system-
                defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file
                names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                The specified @this is invalid (for example, the
                directory doesn?t exist or it is on an unmapped drive).
            </exception>
            ###
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">
                <paramref name="this" /> specified a file that is
                read-only.-or- This operation is not supported on the current platform.-or-
                <paramref
                    name="this" />
                specified a directory.-or- The caller does not have the required permission.
            </exception>
            ###
            <exception cref="T:System.IO.FileNotFoundException">
                The file specified in <paramref name="this" /> was not
                found.
            </exception>
            ###
            <exception cref="T:System.NotSupportedException">
                <paramref name="this" /> is in an invalid format.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.ChangeExtension(System.IO.FileInfo,System.String)">
            <summary>
                Changes the extension of a @this string.
            </summary>
            <param name="this">
                The @this information to modify. The @this cannot contain any of the characters defined in
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .
            </param>
            <param name="extension">
                The new extension (with or without a leading period). Specify null to remove an existing
                extension from
                <paramref
                    name="this" />
                .
            </param>
            <returns>
                The modified @this information.On Windows-based desktop platforms, if <paramref name="this" /> is null or an
                empty string (""), the @this information is returned unmodified. If
                <paramref
                    name="extension" />
                is null, the returned string contains the specified @this with its extension removed. If
                <paramref
                    name="this" />
                has no extension, and <paramref name="extension" /> is not null, the returned @this string contains
                <paramref
                    name="extension" />
                appended to the end of <paramref name="this" />.
            </returns>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this" /> contains one or more of the invalid
                characters defined in
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .
            </exception>
        </member>
        <member name="M:Extensions.CreateDirectory(System.IO.FileInfo)">
            <summary>
                Creates all directories and subdirectories in the specified @this.
            </summary>
            <param name="this">The directory @this to create.</param>
            <returns>An object that represents the directory for the specified @this.</returns>
            ###
            <exception cref="T:System.IO.IOException">
                The directory specified by <paramref name="this" /> is a file.-or-The
                network name is not known.
            </exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this" /> is a zero-length string, contains only
                white space, or contains one or more invalid characters as defined by
                <see
                    cref="F:System.IO.Path.InvalidPathChars" />
                .-or-<paramref name="this" /> is prefixed with, or contains only a colon character (:).
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or both exceed the system-
                defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file
                names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                The specified @this is invalid (for example, it is on
                an unmapped drive).
            </exception>
            ###
            <exception cref="T:System.NotSupportedException">
                <paramref name="this" /> contains a colon character (:) that
                is not part of a drive label ("C:\").
            </exception>
        </member>
        <member name="M:Extensions.CreateDirectory(System.IO.FileInfo,System.Security.AccessControl.DirectorySecurity)">
            <summary>
                Creates all the directories in the specified @this, applying the specified Windows security.
            </summary>
            <param name="this">The directory to create.</param>
            <param name="directorySecurity">The access control to apply to the directory.</param>
            <returns>An object that represents the directory for the specified @this.</returns>
            ###
            <exception cref="T:System.IO.IOException">
                The directory specified by <paramref name="this" /> is a file.-or-The
                network name is not known.
            </exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this" /> is a zero-length string, contains only
                white space, or contains one or more invalid characters as defined by
                <see
                    cref="F:System.IO.Path.InvalidPathChars" />
                . -or-<paramref name="this" /> is prefixed with, or contains only a colon character (:).
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or both exceed the system-
                defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file
                names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                The specified @this is invalid (for example, it is on
                an unmapped drive).
            </exception>
            ###
            <exception cref="T:System.NotSupportedException">
                <paramref name="this" /> contains a colon character (:) that
                is not part of a drive label ("C:\").
            </exception>
        </member>
        <member name="M:Extensions.EnsureDirectoryExists(System.IO.FileInfo)">
            <summary>
                Creates all directories and subdirectories in the specified @this if the directory doesn't already exists.
                This methods is the same as FileInfo.CreateDirectory however it's less ambigues about what happen if the
                directory already exists.
            </summary>
            <param name="this">The directory @this to create.</param>
            <returns>An object that represents the directory for the specified @this.</returns>
            ###
            <exception cref="T:System.IO.IOException">
                The directory specified by <paramref name="this" /> is a file.-or-The
                network name is not known.
            </exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this" /> is a zero-length string, contains only
                white space, or contains one or more invalid characters as defined by
                <see
                    cref="F:System.IO.Path.InvalidPathChars" />
                .-or-<paramref name="this" /> is prefixed with, or contains only a colon character (:).
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or both exceed the system-
                defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file
                names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                The specified @this is invalid (for example, it is on
                an unmapped drive).
            </exception>
            ###
            <exception cref="T:System.NotSupportedException">
                <paramref name="this" /> contains a colon character (:) that
                is not part of a drive label ("C:\").
            </exception>
        </member>
        <member name="M:Extensions.EnsureDirectoryExists(System.IO.FileInfo,System.Security.AccessControl.DirectorySecurity)">
            <summary>
                Creates all directories and subdirectories in the specified @this if the directory doesn't already exists.
                This methods is the same as FileInfo.CreateDirectory however it's less ambigues about what happen if the
                directory already exists.
            </summary>
            <param name="this">The directory to create.</param>
            <param name="directorySecurity">The access control to apply to the directory.</param>
            <returns>An object that represents the directory for the specified @this.</returns>
            ###
            <exception cref="T:System.IO.IOException">
                The directory specified by <paramref name="this" /> is a file.-or-The
                network name is not known.
            </exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this" /> is a zero-length string, contains only
                white space, or contains one or more invalid characters as defined by
                <see
                    cref="F:System.IO.Path.InvalidPathChars" />
                . -or-<paramref name="this" /> is prefixed with, or contains only a colon character (:).
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or both exceed the system-
                defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file
                names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                The specified @this is invalid (for example, it is on
                an unmapped drive).
            </exception>
            ###
            <exception cref="T:System.NotSupportedException">
                <paramref name="this" /> contains a colon character (:) that
                is not part of a drive label ("C:\").
            </exception>
        </member>
        <member name="M:Extensions.GetDirectoryFullName(System.IO.FileInfo)">
            <summary>
                A FileInfo extension method that gets directory full name.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The directory full name.</returns>
        </member>
        <member name="M:Extensions.GetDirectoryName(System.IO.FileInfo)">
            <summary>
                A FileInfo extension method that gets directory name.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The directory name.</returns>
        </member>
        <member name="M:Extensions.GetFileNameWithoutExtension(System.IO.FileInfo)">
            <summary>
                Returns the file name of the specified @this string without the extension.
            </summary>
            <param name="this">The @this of the file.</param>
            <returns>
                The string returned by <see cref="M:System.IO.Path.GetFileName(System.String)" />, minus the last period (.)
                and all characters following it.
            </returns>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this" /> contains one or more of the invalid
                characters defined in
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .
            </exception>
        </member>
        <member name="M:Extensions.GetPathRoot(System.IO.FileInfo)">
            <summary>
                Gets the root directory information of the specified @this.
            </summary>
            <param name="this">The @this from which to obtain root directory information.</param>
            <returns>
                The root directory of <paramref name="this" />, such as "C:\", or null if <paramref name="this" /> is null,
                or an empty string if
                <paramref
                    name="this" />
                does not contain root directory information.
            </returns>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this" /> contains one or more of the invalid
                characters defined in
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .-or- <see cref="F:System.String.Empty" /> was passed to
                <paramref
                    name="this" />
                .
            </exception>
        </member>
        <member name="M:Extensions.HasExtension(System.IO.FileInfo)">
            <summary>
                Determines whether a @this includes a file name extension.
            </summary>
            <param name="this">The @this to search for an extension.</param>
            <returns>
                true if the characters that follow the last directory separator (\\ or /) or volume separator (:) in the
                @this include a period (.) followed by one or more characters; otherwise, false.
            </returns>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this" /> contains one or more of the invalid
                characters defined in
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .
            </exception>
        </member>
        <member name="M:Extensions.IsPathRooted(System.IO.FileInfo)">
            <summary>
                Gets a value indicating whether the specified @this string contains a root.
            </summary>
            <param name="this">The @this to test.</param>
            <returns>
                true if <paramref name="this" /> contains a root; otherwise, false.
            </returns>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this" /> contains one or more of the invalid
                characters defined in
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .
            </exception>
        </member>
        <member name="M:Extensions.ReadAllBytes(System.IO.FileInfo)">
            <summary>
                Opens a binary file, reads the contents of the file into a byte array, and then closes the file.
            </summary>
            <param name="this">The file to open for reading.</param>
            <returns>A byte array containing the contents of the file.</returns>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this" /> is a zero-length string, contains only
                white space, or contains one or more invalid characters as defined by
                <see
                    cref="F:System.IO.Path.InvalidPathChars" />
                .
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or both exceed the system-
                defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file
                names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                The specified @this is invalid (for example, it is on
                an unmapped drive).
            </exception>
            ###
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">
                This operation is not supported on the current
                platform.-or- <paramref name="this" /> specified a directory.-or- The caller does not have the required
                permission.
            </exception>
            ###
            <exception cref="T:System.IO.FileNotFoundException">
                The file specified in <paramref name="this" /> was not
                found.
            </exception>
            ###
            <exception cref="T:System.NotSupportedException">
                <paramref name="this" /> is in an invalid format.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.ReadAllLines(System.IO.FileInfo)">
            <summary>
                Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="this">The file to open for reading.</param>
            <returns>A string array containing all lines of the file.</returns>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this" /> is a zero-length string, contains only
                white space, or contains one or more invalid characters as defined by
                <see
                    cref="F:System.IO.Path.InvalidPathChars" />
                .
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or both exceed the system-
                defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file
                names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                The specified @this is invalid (for example, it is on
                an unmapped drive).
            </exception>
            ###
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">
                <paramref name="this" /> specified a file that is
                read-only.-or- This operation is not supported on the current platform.-or-
                <paramref
                    name="this" />
                specified a directory.-or- The caller does not have the required permission.
            </exception>
            ###
            <exception cref="T:System.IO.FileNotFoundException">
                The file specified in <paramref name="this" /> was not
                found.
            </exception>
            ###
            <exception cref="T:System.NotSupportedException">
                <paramref name="this" /> is in an invalid format.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.ReadAllLines(System.IO.FileInfo,System.Text.Encoding)">
            <summary>
                Opens a file, reads all lines of the file with the specified encoding, and then closes the file.
            </summary>
            <param name="this">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>A string array containing all lines of the file.</returns>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this" /> is a zero-length string, contains only
                white space, or contains one or more invalid characters as defined by
                <see
                    cref="F:System.IO.Path.InvalidPathChars" />
                .
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or both exceed the system-
                defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file
                names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                The specified @this is invalid (for example, it is on
                an unmapped drive).
            </exception>
            ###
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">
                <paramref name="this" /> specified a file that is
                read-only.-or- This operation is not supported on the current platform.-or-
                <paramref
                    name="this" />
                specified a directory.-or- The caller does not have the required permission.
            </exception>
            ###
            <exception cref="T:System.IO.FileNotFoundException">
                The file specified in <paramref name="this" /> was not
                found.
            </exception>
            ###
            <exception cref="T:System.NotSupportedException">
                <paramref name="this" /> is in an invalid format.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.ReadAllText(System.IO.FileInfo)">
            <summary>
                Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="this">The file to open for reading.</param>
            <returns>A string containing all lines of the file.</returns>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this" /> is a zero-length string, contains only
                white space, or contains one or more invalid characters as defined by
                <see
                    cref="F:System.IO.Path.InvalidPathChars" />
                .
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or both exceed the system-
                defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file
                names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                The specified @this is invalid (for example, it is on
                an unmapped drive).
            </exception>
            ###
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">
                <paramref name="this" /> specified a file that is
                read-only.-or- This operation is not supported on the current platform.-or-
                <paramref
                    name="this" />
                specified a directory.-or- The caller does not have the required permission.
            </exception>
            ###
            <exception cref="T:System.IO.FileNotFoundException">
                The file specified in <paramref name="this" /> was not
                found.
            </exception>
            ###
            <exception cref="T:System.NotSupportedException">
                <paramref name="this" /> is in an invalid format.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.ReadAllText(System.IO.FileInfo,System.Text.Encoding)">
            <summary>
                Opens a file, reads all lines of the file with the specified encoding, and then closes the file.
            </summary>
            <param name="this">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>A string containing all lines of the file.</returns>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this" /> is a zero-length string, contains only
                white space, or contains one or more invalid characters as defined by
                <see
                    cref="F:System.IO.Path.InvalidPathChars" />
                .
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or both exceed the system-
                defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file
                names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                The specified @this is invalid (for example, it is on
                an unmapped drive).
            </exception>
            ###
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">
                <paramref name="this" /> specified a file that is
                read-only.-or- This operation is not supported on the current platform.-or-
                <paramref
                    name="this" />
                specified a directory.-or- The caller does not have the required permission.
            </exception>
            ###
            <exception cref="T:System.IO.FileNotFoundException">
                The file specified in <paramref name="this" /> was not
                found.
            </exception>
            ###
            <exception cref="T:System.NotSupportedException">
                <paramref name="this" /> is in an invalid format.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.ReadLines(System.IO.FileInfo)">
            <summary>
                Reads the lines of a file.
            </summary>
            <param name="this">The file to read.</param>
            <returns>All the lines of the file, or the lines that are the result of a query.</returns>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this" /> is a zero-length string, contains only
                white space, or contains one or more invalid characters defined by the
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                method.
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid (for example, it
                is on an unmapped drive).
            </exception>
            ###
            <exception cref="T:System.IO.FileNotFoundException">
                The file specified by <paramref name="this" /> was not
                found.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                <paramref name="this" /> exceeds the system-defined
                maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names
                must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">
                <paramref name="this" /> specifies a file that is
                read-only.-or-This operation is not supported on the current platform.-or-
                <paramref
                    name="this" />
                is a directory.-or-The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Extensions.ReadLines(System.IO.FileInfo,System.Text.Encoding)">
            <summary>
                Read the lines of a file that has a specified encoding.
            </summary>
            <param name="this">The file to read.</param>
            <param name="encoding">The encoding that is applied to the contents of the file.</param>
            <returns>All the lines of the file, or the lines that are the result of a query.</returns>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this" /> is a zero-length string, contains only
                white space, or contains one or more invalid characters as defined by the
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                method.
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                <paramref name="this" /> is invalid (for example, it
                is on an unmapped drive).
            </exception>
            ###
            <exception cref="T:System.IO.FileNotFoundException">
                The file specified by <paramref name="this" /> was not
                found.
            </exception>
            ###
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                <paramref name="this" /> exceeds the system-defined
                maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names
                must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">
                <paramref name="this" /> specifies a file that is
                read-only.-or-This operation is not supported on the current platform.-or-
                <paramref
                    name="this" />
                is a directory.-or-The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Extensions.ReadToEnd(System.IO.FileInfo)">
            <summary>
                A FileInfo extension method that reads the file to the end.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>
                The rest of the stream as a string, from the current position to the end. If the current position is at the
                end of the stream, returns an empty string ("").
            </returns>
        </member>
        <member name="M:Extensions.ReadToEnd(System.IO.FileInfo,System.Int64)">
            <summary>
                A FileInfo extension method that reads the file to the end.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="position">The position.</param>
            <returns>
                The rest of the stream as a string, from the current position to the end. If the current position is at the
                end of the stream, returns an empty string ("").
            </returns>
        </member>
        <member name="M:Extensions.ReadToEnd(System.IO.FileInfo,System.Text.Encoding)">
            <summary>
                A FileInfo extension method that reads the file to the end.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="encoding">The encoding.</param>
            <returns>
                The rest of the stream as a string, from the current position to the end. If the current position is at the
                end of the stream, returns an empty string ("").
            </returns>
        </member>
        <member name="M:Extensions.ReadToEnd(System.IO.FileInfo,System.Text.Encoding,System.Int64)">
            <summary>
                A FileInfo extension method that reads the file to the end.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="encoding">The encoding.</param>
            <param name="position">The position.</param>
            <returns>
                The rest of the stream as a string, from the current position to the end. If the current position is at the
                end of the stream, returns an empty string ("").
            </returns>
        </member>
        <member name="M:Extensions.Rename(System.IO.FileInfo,System.String)">
            <summary>
                A FileInfo extension method that renames.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="newName">Name of the new.</param>
            ###
            <returns>.</returns>
        </member>
        <member name="M:Extensions.RenameExtension(System.IO.FileInfo,System.String)">
            <summary>
                Changes the extension of a @this string.
            </summary>
            <param name="this">
                The @this information to modify. The @this cannot contain any of the characters defined in
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .
            </param>
            <param name="extension">
                The new extension (with or without a leading period). Specify null to remove an existing
                extension from
                <paramref
                    name="this" />
                .
            </param>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this" /> contains one or more of the invalid
                characters defined in
                <see
                    cref="M:System.IO.Path.GetInvalidPathChars" />
                .
            </exception>
        </member>
        <member name="M:Extensions.RenameFileWithoutExtension(System.IO.FileInfo,System.String)">
            <summary>
                A FileInfo extension method that rename file without extension.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="newName">Name of the new.</param>
            ###
            <returns>.</returns>
        </member>
        <member name="M:Extensions.WriteAllBytes(System.IO.FileInfo,System.Byte[])">
            <summary>
                Creates a new file, writes the specified byte array to the file, and then closes the file. If the target file
                already exists, it is overwritten.
            </summary>
            <param name="this">The file to write to.</param>
            <param name="bytes">The bytes to write to the file.</param>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this" /> is a zero-length string, contains only
                white space, or contains one or more invalid characters as defined by
                <see
                    cref="F:System.IO.Path.InvalidPathChars" />
                .
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null or the byte array is empty.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or both exceed the system-
                defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file
                names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                The specified @this is invalid (for example, it is on
                an unmapped drive).
            </exception>
            ###
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">
                <paramref name="this" /> specified a file that is
                read-only.-or- This operation is not supported on the current platform.-or-
                <paramref
                    name="this" />
                specified a directory.-or- The caller does not have the required permission.
            </exception>
            ###
            <exception cref="T:System.NotSupportedException">
                <paramref name="this" /> is in an invalid format.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.WriteAllLines(System.IO.FileInfo,System.String[])">
            <summary>
                Creates a new file, write the specified string array to the file, and then closes the file.
            </summary>
            <param name="this">The file to write to.</param>
            <param name="contents">The string array to write to the file.</param>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this" /> is a zero-length string, contains only
                white space, or contains one or more invalid characters as defined by
                <see
                    cref="F:System.IO.Path.InvalidPathChars" />
                .
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                Either <paramref name="this" /> or
                <paramref name="contents" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or both exceed the system-
                defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file
                names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                The specified @this is invalid (for example, it is on
                an unmapped drive).
            </exception>
            ###
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">
                <paramref name="this" /> specified a file that is
                read-only.-or- This operation is not supported on the current platform.-or-
                <paramref
                    name="this" />
                specified a directory.-or- The caller does not have the required permission.
            </exception>
            ###
            <exception cref="T:System.NotSupportedException">
                <paramref name="this" /> is in an invalid format.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.WriteAllLines(System.IO.FileInfo,System.String[],System.Text.Encoding)">
            <summary>
                Creates a new file, writes the specified string array to the file by using the specified encoding, and then
                closes the file.
            </summary>
            <param name="this">The file to write to.</param>
            <param name="contents">The string array to write to the file.</param>
            <param name="encoding">
                An <see cref="T:System.Text.Encoding" /> object that represents the character encoding
                applied to the string array.
            </param>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this" /> is a zero-length string, contains only
                white space, or contains one or more invalid characters as defined by
                <see
                    cref="F:System.IO.Path.InvalidPathChars" />
                .
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                Either <paramref name="this" /> or
                <paramref name="contents" /> is null.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or both exceed the system-
                defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file
                names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                The specified @this is invalid (for example, it is on
                an unmapped drive).
            </exception>
            ###
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">
                <paramref name="this" /> specified a file that is
                read-only.-or- This operation is not supported on the current platform.-or-
                <paramref
                    name="this" />
                specified a directory.-or- The caller does not have the required permission.
            </exception>
            ###
            <exception cref="T:System.NotSupportedException">
                <paramref name="this" /> is in an invalid format.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.WriteAllLines(System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Creates a new file, write the specified string array to the file, and then closes the file.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="contents">The string array to write to the file.</param>
        </member>
        <member name="M:Extensions.WriteAllLines(System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
                Creates a new file, writes the specified string array to the file by using the specified encoding, and then
                closes the file.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="contents">The string array to write to the file.</param>
            <param name="encoding">
                An <see cref="T:System.Text.Encoding" /> object that represents the character encoding
                applied to the string array.
            </param>
        </member>
        <member name="M:Extensions.WriteAllText(System.IO.FileInfo,System.String)">
            <summary>
                Creates a new file, writes the specified string to the file, and then closes the file. If the target file
                already exists, it is overwritten.
            </summary>
            <param name="this">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this" /> is a zero-length string, contains only
                white space, or contains one or more invalid characters as defined by
                <see
                    cref="F:System.IO.Path.InvalidPathChars" />
                .
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null or
                <paramref name="contents" /> is empty.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or both exceed the system-
                defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file
                names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                The specified @this is invalid (for example, it is on
                an unmapped drive).
            </exception>
            ###
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">
                <paramref name="this" /> specified a file that is
                read-only.-or- This operation is not supported on the current platform.-or-
                <paramref
                    name="this" />
                specified a directory.-or- The caller does not have the required permission.
            </exception>
            ###
            <exception cref="T:System.NotSupportedException">
                <paramref name="this" /> is in an invalid format.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.WriteAllText(System.IO.FileInfo,System.String,System.Text.Encoding)">
            <summary>
                Creates a new file, writes the specified string to the file using the specified encoding, and then closes the
                file. If the target file already exists, it is overwritten.
            </summary>
            <param name="this">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            <param name="encoding">The encoding to apply to the string.</param>
            ###
            <exception cref="T:System.ArgumentException">
                <paramref name="this" /> is a zero-length string, contains only
                white space, or contains one or more invalid characters as defined by
                <see
                    cref="F:System.IO.Path.InvalidPathChars" />
                .
            </exception>
            ###
            <exception cref="T:System.ArgumentNullException">
                <paramref name="this" /> is null or
                <paramref name="contents" /> is empty.
            </exception>
            ###
            <exception cref="T:System.IO.PathTooLongException">
                The specified @this, file name, or both exceed the system-
                defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file
                names must be less than 260 characters.
            </exception>
            ###
            <exception cref="T:System.IO.DirectoryNotFoundException">
                The specified @this is invalid (for example, it is on
                an unmapped drive).
            </exception>
            ###
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            ###
            <exception cref="T:System.UnauthorizedAccessException">
                <paramref name="this" /> specified a file that is
                read-only.-or- This operation is not supported on the current platform.-or-
                <paramref
                    name="this" />
                specified a directory.-or- The caller does not have the required permission.
            </exception>
            ###
            <exception cref="T:System.NotSupportedException">
                <paramref name="this" /> is in an invalid format.
            </exception>
            ###
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:Extensions.ReadToEnd(System.IO.Stream)">
            <summary>
                A Stream extension method that reads a stream to the end.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>
                The rest of the stream as a string, from the current position to the end. If the current position is at the
                end of the stream, returns an empty string ("").
            </returns>
        </member>
        <member name="M:Extensions.ReadToEnd(System.IO.Stream,System.Text.Encoding)">
            <summary>
                A Stream extension method that reads a stream to the end.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="encoding">The encoding.</param>
            <returns>
                The rest of the stream as a string, from the current position to the end. If the current position is at the
                end of the stream, returns an empty string ("").
            </returns>
        </member>
        <member name="M:Extensions.ReadToEnd(System.IO.Stream,System.Int64)">
            <summary>
                A Stream extension method that reads a stream to the end.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="position">The position.</param>
            <returns>
                The rest of the stream as a string, from the current position to the end. If the current position is at the
                end of the stream, returns an empty string ("").
            </returns>
        </member>
        <member name="M:Extensions.ReadToEnd(System.IO.Stream,System.Text.Encoding,System.Int64)">
            <summary>
                A Stream extension method that reads a stream to the end.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="encoding">The encoding.</param>
            <param name="position">The position.</param>
            <returns>
                The rest of the stream as a string, from the current position to the end. If the current position is at the
                end of the stream, returns an empty string ("").
            </returns>
        </member>
        <member name="M:Extensions.ToByteArray(System.IO.Stream)">
            <summary>
                A Stream extension method that converts the Stream to a byte array.
            </summary>
            <param name="this">The Stream to act on.</param>
            <returns>The Stream as a byte[].</returns>
        </member>
        <member name="M:Extensions.ToMD5Hash(System.IO.Stream)">
            <summary>
                A Stream extension method that converts the @this to a md 5 hash.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>@this as a string.</returns>
        </member>
        <member name="M:Extensions.Send(System.Net.Mail.MailMessage)">
            <summary>
                A MailMessage extension method that send this message.
            </summary>
            <param name="this">The @this to act on.</param>
        </member>
        <member name="M:Extensions.SendAsync(System.Net.Mail.MailMessage,System.Object)">
            <summary>
                A MailMessage extension method that sends this message asynchronous.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="userToken">The user token.</param>
        </member>
        <member name="M:Extensions.GetResponseSafe(System.Net.WebRequest)">
            <summary>
                A WebRequest extension method that gets the WebRequest response or the WebException response.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The WebRequest response or WebException response.</returns>
        </member>
        <member name="M:Extensions.ReadToEnd(System.Net.WebResponse)">
            <summary>
                A WebResponse extension method that reads the response stream to the end.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The response stream as a string, from the current position to the end.</returns>
        </member>
        <member name="M:Extensions.ReadToEndAndDispose(System.Net.WebResponse)">
            <summary>
                A WebRequest extension method that gets the WebRequest response and read the response stream.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The response stream as a string, from the current position to the end.</returns>
        </member>
        <member name="M:Extensions.GetDeclaraction(System.Reflection.FieldInfo)">
            <summary>A FieldInfo extension method that gets a declaraction.</summary>
            <param name="this">The @this to act on.</param>
            <returns>The declaraction.</returns>
        </member>
        <member name="M:Extensions.GetDeclaraction(System.Reflection.MemberInfo)">
            <summary>A MemberInfo extension method that gets a declaraction.</summary>
            <param name="this">The @this to act on.</param>
            <returns>The declaraction.</returns>
        </member>
        <member name="M:Extensions.GetDeclaraction(System.Reflection.MethodInfo)">
            <summary>A MethodInfo extension method that gets a declaraction.</summary>
            <param name="this">The @this to act on.</param>
            <returns>The declaraction.</returns>
        </member>
        <member name="M:Extensions.GetDeclaraction(System.Reflection.ParameterInfo)">
            <summary>A ParameterInfo extension method that gets a declaraction.</summary>
            <param name="this">The @this to act on.</param>
            <returns>The declaraction.</returns>
        </member>
        <member name="M:Extensions.GetDeclaraction(System.Reflection.PropertyInfo)">
            <summary>A PropertyInfo extension method that gets a declaraction.</summary>
            <param name="this">The @this to act on.</param>
            <returns>The declaraction.</returns>
        </member>
        <member name="M:Extensions.GetDeclaraction(System.Type)">
            <summary>A Type extension method that gets a declaraction.</summary>
            <param name="this">The @this to act on.</param>
            <returns>The declaraction.</returns>
        </member>
        <member name="M:Extensions.GetShortDeclaraction(System.Type)">
            <summary>A Type extension method that gets short declaraction.</summary>
            <param name="this">The @this to act on.</param>
            <returns>The short declaraction.</returns>
        </member>
        <member name="M:Extensions.GetSignature(System.Reflection.FieldInfo)">
            <summary>A FieldInfo extension method that gets a declaraction.</summary>
            <param name="this">The @this to act on.</param>
            <returns>The declaraction.</returns>
        </member>
        <member name="M:Extensions.GetSignature(System.Reflection.MemberInfo)">
            <summary>A MemberInfo extension method that gets a declaraction.</summary>
            <param name="this">The @this to act on.</param>
            <returns>The declaraction.</returns>
        </member>
        <member name="M:Extensions.GetSignature(System.Reflection.MethodInfo)">
            <summary>A MethodInfo extension method that gets a declaraction.</summary>
            <param name="this">The @this to act on.</param>
            <returns>The declaraction.</returns>
        </member>
        <member name="M:Extensions.GetSignature(System.Reflection.ParameterInfo)">
            <summary>A ParameterInfo extension method that gets a declaraction.</summary>
            <param name="this">The @this to act on.</param>
            <returns>The declaraction.</returns>
        </member>
        <member name="M:Extensions.GetSignature(System.Reflection.PropertyInfo)">
            <summary>A PropertyInfo extension method that gets a declaraction.</summary>
            <param name="this">The @this to act on.</param>
            <returns>The declaraction.</returns>
        </member>
        <member name="M:Extensions.GetSignature(System.Type)">
            <summary>A Type extension method that gets a declaraction.</summary>
            <param name="this">The @this to act on.</param>
            <returns>The declaraction.</returns>
        </member>
        <member name="M:Extensions.GetShortSignature(System.Type)">
            <summary>A Type extension method that gets short declaraction.</summary>
            <param name="this">The @this to act on.</param>
            <returns>The short declaraction.</returns>
        </member>
        <member name="M:Extensions.GetCustomAttribute(System.Object,System.Type)">
            <summary>An object extension method that gets the first custom attribute.</summary>
            <param name="this">The @this to act on.</param>
            <param name="attribute">The attribute.</param>
            <returns>The custom attribute.</returns>
        </member>
        <member name="M:Extensions.GetCustomAttribute(System.Object,System.Type,System.Boolean)">
            <summary>
                An object extension method that gets the first custom attribute.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="attribute">The attribute.</param>
            <param name="inherit">true to inherit.</param>
            <returns>The custom attribute.</returns>
        </member>
        <member name="M:Extensions.GetCustomAttribute``1(System.Object)">
            <summary>An object extension method that gets custom attribute.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>The custom attribute.</returns>
        </member>
        <member name="M:Extensions.GetCustomAttribute``1(System.Object,System.Boolean)">
            <summary>
                An object extension method that gets custom attribute.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="inherit">true to inherit.</param>
            <returns>The custom attribute.</returns>
        </member>
        <member name="M:Extensions.GetCustomAttribute``1(System.Reflection.MemberInfo)">
            <summary>An object extension method that gets custom attribute.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>The custom attribute.</returns>
        </member>
        <member name="M:Extensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>An object extension method that gets custom attribute.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="inherit">true to inherit.</param>
            <returns>The custom attribute.</returns>
        </member>
        <member name="M:Extensions.GetCustomAttributeByFullName(System.Object,System.String)">
            <summary>A MemberInfo extension method that gets custom attribute by full name.</summary>
            <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            <param name="this">The @this to act on.</param>
            <param name="fullName">Name of the full.</param>
            <returns>The custom attribute by full name.</returns>
        </member>
        <member name="M:Extensions.GetCustomAttributeByFullName(System.Object,System.String,System.Boolean)">
            <summary>A MemberInfo extension method that gets custom attribute by full name.</summary>
            <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            <param name="this">The @this to act on.</param>
            <param name="fullName">Name of the full.</param>
            <param name="inherit">true to inherit.</param>
            <returns>The custom attribute by full name.</returns>
        </member>
        <member name="M:Extensions.GetCustomAttributeByFullName(System.Reflection.MemberInfo,System.String)">
            <summary>A MemberInfo extension method that gets custom attribute by full name.</summary>
            <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            <param name="this">The @this to act on.</param>
            <param name="fullName">Name of the full.</param>
            <returns>The custom attribute by full name.</returns>
        </member>
        <member name="M:Extensions.GetCustomAttributeByFullName(System.Reflection.MemberInfo,System.String,System.Boolean)">
            <summary>A MemberInfo extension method that gets custom attribute by full name.</summary>
            <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            <param name="this">The @this to act on.</param>
            <param name="fullName">Name of the full.</param>
            <param name="inherit">true to inherit.</param>
            <returns>The custom attribute by full name.</returns>
        </member>
        <member name="M:Extensions.GetCustomAttributeByName(System.Object,System.String)">
            <summary>An object extension method that gets custom attribute by name.</summary>
            <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            <param name="this">The @this to act on.</param>
            <param name="name">The name.</param>
            <returns>The custom attribute by name.</returns>
        </member>
        <member name="M:Extensions.GetCustomAttributeByName(System.Object,System.String,System.Boolean)">
            <summary>An object extension method that gets custom attribute by name.</summary>
            <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            <param name="this">The @this to act on.</param>
            <param name="name">The name.</param>
            <param name="inherit">true to inherit.</param>
            <returns>The custom attribute by name.</returns>
        </member>
        <member name="M:Extensions.GetCustomAttributeByName(System.Reflection.MemberInfo,System.String)">
            <summary>An object extension method that gets custom attribute by name.</summary>
            <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            <param name="this">The @this to act on.</param>
            <param name="name">The name.</param>
            <returns>The custom attribute by name.</returns>
        </member>
        <member name="M:Extensions.GetCustomAttributeByName(System.Reflection.MemberInfo,System.String,System.Boolean)">
            <summary>An object extension method that gets custom attribute by name.</summary>
            <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            <param name="this">The @this to act on.</param>
            <param name="name">The name.</param>
            <param name="inherit">true to inherit.</param>
            <returns>The custom attribute by name.</returns>
        </member>
        <member name="M:Extensions.GetCustomAttributeDescription(System.Object)">
            <summary>
                An object extension method that gets description attribute.
            </summary>
            <param name="value">The value to act on.</param>
            <returns>The description attribute.</returns>
        </member>
        <member name="M:Extensions.GetCustomAttributeDescription(System.Object,System.Boolean)">
            <summary>An object extension method that gets description attribute.</summary>
            <param name="value">The value to act on.</param>
            <param name="inherit">true to inherit.</param>
            <returns>The description attribute.</returns>
        </member>
        <member name="M:Extensions.GetCustomAttributeDescription(System.Reflection.MemberInfo)">
            <summary>An object extension method that gets description attribute.</summary>
            <param name="value">The value to act on.</param>
            <returns>The description attribute.</returns>
        </member>
        <member name="M:Extensions.GetCustomAttributeDescription(System.Reflection.MemberInfo,System.Boolean)">
            <summary>An object extension method that gets description attribute.</summary>
            <param name="value">The value to act on.</param>
            <param name="inherit">true to inherit.</param>
            <returns>The description attribute.</returns>
        </member>
        <member name="M:Extensions.GetCustomAttributes(System.Object)">
            <summary>An object extension method that gets custom attributes.</summary>
            <param name="this">The @this to act on.</param>
            <returns>An array of object.</returns>
        </member>
        <member name="M:Extensions.GetCustomAttributes(System.Object,System.Boolean)">
            <summary>
                An object extension method that gets custom attributes.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="inherit">true to inherit.</param>
            <returns>An array of object.</returns>
        </member>
        <member name="M:Extensions.GetCustomAttributes``1(System.Object)">
            <summary>An object extension method that gets custom attributes.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>An array of object.</returns>
        </member>
        <member name="M:Extensions.GetCustomAttributes``1(System.Object,System.Boolean)">
            <summary>
                An object extension method that gets custom attributes.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="inherit">true to inherit.</param>
            <returns>An array of object.</returns>
        </member>
        <member name="M:Extensions.GetCustomAttributes``1(System.Reflection.MemberInfo)">
            <summary>An object extension method that gets custom attributes.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>An array of object.</returns>
        </member>
        <member name="M:Extensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>An object extension method that gets custom attributes.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="inherit">true to inherit.</param>
            <returns>An array of object.</returns>
        </member>
        <member name="M:Extensions.GetCustomAttributesByFullName(System.Object,System.String)">
            <summary>An object extension method that gets custom attributes by full name.</summary>
            <param name="this">The @this to act on.</param>
            <param name="fullName">Name of the full.</param>
            <returns>An array of attribute.</returns>
        </member>
        <member name="M:Extensions.GetCustomAttributesByFullName(System.Object,System.String,System.Boolean)">
            <summary>An object extension method that gets custom attributes by full name.</summary>
            <param name="this">The @this to act on.</param>
            <param name="fullName">Name of the full.</param>
            <param name="inherit">true to inherit.</param>
            <returns>An array of attribute.</returns>
        </member>
        <member name="M:Extensions.GetCustomAttributesByFullName(System.Reflection.MemberInfo,System.String)">
            <summary>An object extension method that gets custom attributes by full name.</summary>
            <param name="this">The @this to act on.</param>
            <param name="fullName">Name of the full.</param>
            <returns>An array of attribute.</returns>
        </member>
        <member name="M:Extensions.GetCustomAttributesByFullName(System.Reflection.MemberInfo,System.String,System.Boolean)">
            <summary>An object extension method that gets custom attributes by full name.</summary>
            <param name="this">The @this to act on.</param>
            <param name="fullName">Name of the full.</param>
            <param name="inherit">true to inherit.</param>
            <returns>An array of attribute.</returns>
        </member>
        <member name="M:Extensions.GetCustomAttributesByName(System.Object,System.String)">
            <summary>An object extension method that gets custom attributes by name.</summary>
            <param name="this">The @this to act on.</param>
            <param name="name">The name.</param>
            <returns>An array of attribute.</returns>
        </member>
        <member name="M:Extensions.GetCustomAttributesByName(System.Object,System.String,System.Boolean)">
            <summary>An object extension method that gets custom attributes by name.</summary>
            <param name="this">The @this to act on.</param>
            <param name="name">The name.</param>
            <param name="inherit">true to inherit.</param>
            <returns>An array of attribute.</returns>
        </member>
        <member name="M:Extensions.GetCustomAttributesByName(System.Reflection.MemberInfo,System.String)">
            <summary>An object extension method that gets custom attributes by name.</summary>
            <param name="this">The @this to act on.</param>
            <param name="name">The name.</param>
            <returns>An array of attribute.</returns>
        </member>
        <member name="M:Extensions.GetCustomAttributesByName(System.Reflection.MemberInfo,System.String,System.Boolean)">
            <summary>An object extension method that gets custom attributes by name.</summary>
            <param name="this">The @this to act on.</param>
            <param name="name">The name.</param>
            <param name="inherit">true to inherit.</param>
            <returns>An array of attribute.</returns>
        </member>
        <member name="M:Extensions.GetField``1(``0,System.String)">
            <summary>A T extension method that searches for the public field with the specified name.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="name">The string containing the name of the data field to get.</param>
            <returns>
                An object representing the field that matches the specified requirements, if found;
                otherwise, null.
            </returns>
        </member>
        <member name="M:Extensions.GetField``1(``0,System.String,System.Reflection.BindingFlags)">
            <summary>
                A T extension method that searches for the specified field, using the specified
                binding constraints.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="name">The string containing the name of the data field to get.</param>
            <param name="bindingAttr">
                A bitmask comprised of one or more BindingFlags that specify how the
                search is conducted.
            </param>
            <returns>
                An object representing the field that matches the specified requirements, if found;
                otherwise, null.
            </returns>
        </member>
        <member name="M:Extensions.GetFields(System.Object)">
            <summary>An object extension method that gets the fields.</summary>
            <param name="this">The @this to act on.</param>
            <returns>An array of field information.</returns>
        </member>
        <member name="M:Extensions.GetFields(System.Object,System.Reflection.BindingFlags)">
            <summary>An object extension method that gets the fields.</summary>
            <param name="this">The @this to act on.</param>
            <param name="bindingAttr">The binding attribute.</param>
            <returns>An array of field information.</returns>
        </member>
        <member name="M:Extensions.GetFieldValue``1(``0,System.String)">
            <summary>
                A T extension method that gets a field value (Public | NonPublic | Instance | Static)
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="fieldName">Name of the field.</param>
            <returns>The field value.</returns>
        </member>
        <member name="M:Extensions.GetMemberPaths``1(``0,System.String)">
            <summary>A T extension method that gets member paths.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="path">Full pathname of the file.</param>
            <returns>An array of member information.</returns>
        </member>
        <member name="M:Extensions.GetMethod``1(``0,System.String)">
            <summary>
                A T extension method that searches for the public method with the specified name.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="name">The string containing the name of the public method to get.</param>
            <returns>
                An object that represents the public method with the specified name, if found; otherwise, null.
            </returns>
        </member>
        <member name="M:Extensions.GetMethod``1(``0,System.String,System.Reflection.BindingFlags)">
            <summary>
                A T extension method that searches for the specified method whose parameters match the specified argument
                types and modifiers, using the specified binding constraints.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="name">The string containing the name of the public method to get.</param>
            <param name="bindingAttr">A bitmask comprised of one or more BindingFlags that specify how the search is conducted.</param>
            <returns>
                An object that represents the public method with the specified name, if found; otherwise, null.
            </returns>
        </member>
        <member name="M:Extensions.GetMethods``1(``0)">
            <summary>
                A T extension method that returns all the public methods of the current Type.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>
                An array of MethodInfo objects representing all the public methods defined for the current Type. or An empty
                array of type MethodInfo, if no public methods are defined for the current Type.
            </returns>
        </member>
        <member name="M:Extensions.GetMethods``1(``0,System.Reflection.BindingFlags)">
            <summary>
                A T extension method that searches for the methods defined for the current Type, using the specified binding
                constraints.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="bindingAttr">A bitmask comprised of one or more BindingFlags that specify how the search is conducted.</param>
            <returns>
                An array of MethodInfo objects representing all methods defined for the current Type that match the specified
                binding constraints. or An empty array of type MethodInfo, if no methods are defined for the current Type, or
                if none of the defined methods match the binding constraints.
            </returns>
        </member>
        <member name="M:Extensions.GetProperties(System.Object)">
            <summary>An object extension method that gets the properties.</summary>
            <param name="this">The @this to act on.</param>
            <returns>An array of property information.</returns>
        </member>
        <member name="M:Extensions.GetProperties(System.Object,System.Reflection.BindingFlags)">
            <summary>An object extension method that gets the properties.</summary>
            <param name="this">The @this to act on.</param>
            <param name="bindingAttr">The binding attribute.</param>
            <returns>An array of property information.</returns>
        </member>
        <member name="M:Extensions.GetProperty``1(``0,System.String)">
            <summary>
                A T extension method that gets a property.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="name">The name.</param>
            <returns>The property.</returns>
        </member>
        <member name="M:Extensions.GetProperty``1(``0,System.String,System.Reflection.BindingFlags)">
            <summary>
                A T extension method that gets a property.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="name">The name.</param>
            <param name="bindingAttr">The binding attribute.</param>
            <returns>The property.</returns>
        </member>
        <member name="M:Extensions.GetPropertyOrField``1(``0,System.String)">
            <summary>A T extension method that gets property or field.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="name">The name.</param>
            <returns>The property or field.</returns>
        </member>
        <member name="M:Extensions.GetPropertyValue``1(``0,System.String)">
            <summary>
                A T extension method that gets property value.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:Extensions.InvokeMethod``1(``0,System.String,System.Object[])">
            <summary>
                An object extension method that executes the method on a different thread, and waits for the result.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="obj">The obj to act on.</param>
            <param name="methodName">Name of the method.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:Extensions.InvokeMethod``1(System.Object,System.String,System.Object[])">
            <summary>
                An object extension method that executes the method on a different thread, and waits for the result.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="obj">The obj to act on.</param>
            <param name="methodName">Name of the method.</param>
            <param name="parameters">Options for controlling the operation.</param>
            <returns>A T.</returns>
        </member>
        <member name="M:Extensions.IsAttributeDefined(System.Object,System.Type,System.Boolean)">
            <summary>
                An object extension method that query if '@this' is attribute defined.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="attributeType">Type of the attribute.</param>
            <param name="inherit">true to inherit.</param>
            <returns>true if attribute defined, false if not.</returns>
        </member>
        <member name="M:Extensions.IsAttributeDefined``1(System.Object,System.Boolean)">
            <summary>
                An object extension method that query if '@this' is attribute defined.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="inherit">true to inherit.</param>
            <returns>true if attribute defined, false if not.</returns>
        </member>
        <member name="M:Extensions.SetFieldValue``1(``0,System.String,System.Object)">
            <summary>
                A T extension method that sets field value.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Extensions.SetPropertyValue``1(``0,System.String,System.Object)">
            <summary>
                A T extension method that sets property value.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Extensions.IsArray``1(``0)">
            <summary>
                A T extension method that query if '@this' is array.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>true if array, false if not.</returns>
        </member>
        <member name="M:Extensions.IsClass``1(``0)">
            <summary>
                A T extension method that query if '@this' is class.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>true if class, false if not.</returns>
        </member>
        <member name="M:Extensions.IsEnum``1(``0)">
            <summary>
                A T extension method that query if '@this' is enum.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>true if enum, false if not.</returns>
        </member>
        <member name="M:Extensions.IsSubclassOf``1(``0,System.Type)">
            <summary>
                A T extension method that query if '@this' is subclass of.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="type">The Type to process.</param>
            <returns>true if subclass of, false if not.</returns>
        </member>
        <member name="M:Extensions.IsTypeOf``1(``0,System.Type)">
            <summary>
                A T extension method that query if '@this' is type of.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="type">The type.</param>
            <returns>true if type of, false if not.</returns>
        </member>
        <member name="M:Extensions.IsTypeOrInheritsOf``1(``0,System.Type)">
            <summary>
                A T extension method that query if '@this' is type or inherits of.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="type">The type.</param>
            <returns>true if type or inherits of, false if not.</returns>
        </member>
        <member name="M:Extensions.GetAttribute``1(System.Reflection.Assembly)">
            <summary>
                An Assembly extension method that gets an attribute.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Extensions.GetCustomAttribute(System.Reflection.Assembly,System.Type)">
            <summary>
                Retrieves a custom attribute applied to a specified assembly. Parameters specify the assembly and the type of
                the custom attribute to search for.
            </summary>
            <param name="element">An object derived from the  class that describes a reusable collection of modules.</param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <returns>
                A reference to the single custom attribute of type  that is applied to , or null if there is no such
                attribute.
            </returns>
        </member>
        <member name="M:Extensions.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)">
            <summary>
                Retrieves a custom attribute applied to an assembly. Parameters specify the assembly, the type of the custom
                attribute to search for, and an ignored search option.
            </summary>
            <param name="element">An object derived from the  class that describes a reusable collection of modules.</param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
            <returns>
                A reference to the single custom attribute of type  that is applied to , or null if there is no such
                attribute.
            </returns>
        </member>
        <member name="M:Extensions.GetCustomAttributes(System.Reflection.Assembly,System.Type)">
            <summary>
                Retrieves an array of the custom attributes applied to an assembly. Parameters specify the assembly, and the
                type of the custom attribute to search for.
            </summary>
            <param name="element">An object derived from the  class that describes a reusable collection of modules.</param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <returns>
                An  array that contains the custom attributes of type  applied to , or an empty array if no such custom
                attributes exist.
            </returns>
        </member>
        <member name="M:Extensions.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)">
            <summary>
                Retrieves an array of the custom attributes applied to an assembly. Parameters specify the assembly, the type
                of the custom attribute to search for, and an ignored search option.
            </summary>
            <param name="element">An object derived from the  class that describes a reusable collection of modules.</param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
            <returns>
                An  array that contains the custom attributes of type  applied to , or an empty array if no such custom
                attributes exist.
            </returns>
        </member>
        <member name="M:Extensions.GetCustomAttributes(System.Reflection.Assembly)">
            <summary>
                Retrieves an array of the custom attributes applied to an assembly. A parameter specifies the assembly.
            </summary>
            <param name="element">An object derived from the  class that describes a reusable collection of modules.</param>
            <returns>
                An  array that contains the custom attributes applied to , or an empty array if no such custom attributes
                exist.
            </returns>
        </member>
        <member name="M:Extensions.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)">
            <summary>
                Retrieves an array of the custom attributes applied to an assembly. Parameters specify the assembly, and an
                ignored search option.
            </summary>
            <param name="element">An object derived from the  class that describes a reusable collection of modules.</param>
            <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
            <returns>
                An  array that contains the custom attributes applied to , or an empty array if no such custom attributes
                exist.
            </returns>
        </member>
        <member name="M:Extensions.IsDefined(System.Reflection.Assembly,System.Type)">
            <summary>
                Determines whether any custom attributes are applied to an assembly. Parameters specify the assembly, and the
                type of the custom attribute to search for.
            </summary>
            <param name="element">An object derived from the  class that describes a reusable collection of modules.</param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <returns>true if a custom attribute of type  is applied to ; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)">
            <summary>
                Determines whether any custom attributes are applied to an assembly. Parameters specify the assembly, the
                type of the custom attribute to search for, and an ignored search option.
            </summary>
            <param name="element">An object derived from the  class that describes a reusable collection of modules.</param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
            <returns>true if a custom attribute of type  is applied to ; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)">
            <summary>
                Retrieves a custom attribute applied to a member of a type. Parameters specify the member, and the type of
                the custom attribute to search for.
            </summary>
            <param name="element">
                An object derived from the  class that describes a constructor, event, field, method, or
                property member of a class.
            </param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <returns>
                A reference to the single custom attribute of type  that is applied to , or null if there is no such
                attribute.
            </returns>
        </member>
        <member name="M:Extensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
                Retrieves a custom attribute applied to a member of a type. Parameters specify the member, the type of the
                custom attribute to search for, and whether to search ancestors of the member.
            </summary>
            <param name="element">
                An object derived from the  class that describes a constructor, event, field, method, or
                property member of a class.
            </param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <param name="inherit">If true, specifies to also search the ancestors of  for custom attributes.</param>
            <returns>
                A reference to the single custom attribute of type  that is applied to , or null if there is no such
                attribute.
            </returns>
        </member>
        <member name="M:Extensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)">
            <summary>
                Retrieves an array of the custom attributes applied to a member of a type. Parameters specify the member, and
                the type of the custom attribute to search for.
            </summary>
            <param name="element">
                An object derived from the  class that describes a constructor, event, field, method, or
                property member of a class.
            </param>
            <param name="type">The type, or a base type, of the custom attribute to search for.</param>
            <returns>
                An  array that contains the custom attributes of type  applied to , or an empty array if no such custom
                attributes exist.
            </returns>
        </member>
        <member name="M:Extensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
                Retrieves an array of the custom attributes applied to a member of a type. Parameters specify the member, the
                type of the custom attribute to search for, and whether to search ancestors of the member.
            </summary>
            <param name="element">
                An object derived from the  class that describes a constructor, event, field, method, or
                property member of a class.
            </param>
            <param name="type">The type, or a base type, of the custom attribute to search for.</param>
            <param name="inherit">If true, specifies to also search the ancestors of  for custom attributes.</param>
            <returns>
                An  array that contains the custom attributes of type  applied to , or an empty array if no such custom
                attributes exist.
            </returns>
        </member>
        <member name="M:Extensions.GetCustomAttributes(System.Reflection.MemberInfo)">
            <summary>
                Retrieves an array of the custom attributes applied to a member of a type. A parameter specifies the member.
            </summary>
            <param name="element">
                An object derived from the  class that describes a constructor, event, field, method, or
                property member of a class.
            </param>
            <returns>
                An  array that contains the custom attributes applied to , or an empty array if no such custom attributes
                exist.
            </returns>
        </member>
        <member name="M:Extensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
                Retrieves an array of the custom attributes applied to a member of a type. Parameters specify the member, the
                type of the custom attribute to search for, and whether to search ancestors of the member.
            </summary>
            <param name="element">
                An object derived from the  class that describes a constructor, event, field, method, or
                property member of a class.
            </param>
            <param name="inherit">If true, specifies to also search the ancestors of  for custom attributes.</param>
            <returns>
                An  array that contains the custom attributes applied to , or an empty array if no such custom attributes
                exist.
            </returns>
        </member>
        <member name="M:Extensions.IsDefined(System.Reflection.MemberInfo,System.Type)">
            <summary>
                Determines whether any custom attributes are applied to a member of a type. Parameters specify the member,
                and the type of the custom attribute to search for.
            </summary>
            <param name="element">
                An object derived from the  class that describes a constructor, event, field, method, type,
                or property member of a class.
            </param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <returns>true if a custom attribute of type  is applied to ; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
                Determines whether any custom attributes are applied to a member of a type. Parameters specify the member,
                the type of the custom attribute to search for, and whether to search ancestors of the member.
            </summary>
            <param name="element">
                An object derived from the  class that describes a constructor, event, field, method, type,
                or property member of a class.
            </param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <param name="inherit">If true, specifies to also search the ancestors of  for custom attributes.</param>
            <returns>true if a custom attribute of type  is applied to ; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.GetCustomAttribute(System.Reflection.Module,System.Type)">
            <summary>
                Retrieves a custom attribute applied to a module. Parameters specify the module, and the type of the custom
                attribute to search for.
            </summary>
            <param name="element">An object derived from the  class that describes a portable executable file.</param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <returns>
                A reference to the single custom attribute of type  that is applied to , or null if there is no such
                attribute.
            </returns>
        </member>
        <member name="M:Extensions.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)">
            <summary>
                Retrieves a custom attribute applied to a module. Parameters specify the module, the type of the custom
                attribute to search for, and an ignored search option.
            </summary>
            <param name="element">An object derived from the  class that describes a portable executable file.</param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
            <returns>
                A reference to the single custom attribute of type  that is applied to , or null if there is no such
                attribute.
            </returns>
        </member>
        <member name="M:Extensions.GetCustomAttributes(System.Reflection.Module,System.Type)">
            <summary>
                Retrieves an array of the custom attributes applied to a module. Parameters specify the module, and the type
                of the custom attribute to search for.
            </summary>
            <param name="element">An object derived from the  class that describes a portable executable file.</param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <returns>
                An  array that contains the custom attributes of type  applied to , or an empty array if no such custom
                attributes exist.
            </returns>
        </member>
        <member name="M:Extensions.GetCustomAttributes(System.Reflection.Module)">
            <summary>
                Retrieves an array of the custom attributes applied to a module. A parameter specifies the module.
            </summary>
            <param name="element">An object derived from the  class that describes a portable executable file.</param>
            <returns>
                An  array that contains the custom attributes applied to , or an empty array if no such custom attributes
                exist.
            </returns>
        </member>
        <member name="M:Extensions.GetCustomAttributes(System.Reflection.Module,System.Boolean)">
            <summary>
                Retrieves an array of the custom attributes applied to a module. Parameters specify the module, and an
                ignored search option.
            </summary>
            <param name="element">An object derived from the  class that describes a portable executable file.</param>
            <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
            <returns>
                An  array that contains the custom attributes applied to , or an empty array if no such custom attributes
                exist.
            </returns>
        </member>
        <member name="M:Extensions.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)">
            <summary>
                Retrieves an array of the custom attributes applied to a module. Parameters specify the module, the type of
                the custom attribute to search for, and an ignored search option.
            </summary>
            <param name="element">An object derived from the  class that describes a portable executable file.</param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
            <returns>
                An  array that contains the custom attributes of type  applied to , or an empty array if no such custom
                attributes exist.
            </returns>
        </member>
        <member name="M:Extensions.IsDefined(System.Reflection.Module,System.Type)">
            <summary>
                Determines whether any custom attributes of a specified type are applied to a module. Parameters specify the
                module, and the type of the custom attribute to search for.
            </summary>
            <param name="element">An object derived from the  class that describes a portable executable file.</param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <returns>true if a custom attribute of type  is applied to ; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.IsDefined(System.Reflection.Module,System.Type,System.Boolean)">
            <summary>
                Determines whether any custom attributes are applied to a module. Parameters specify the module, the type of
                the custom attribute to search for, and an ignored search option.
            </summary>
            <param name="element">An object derived from the  class that describes a portable executable file.</param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
            <returns>true if a custom attribute of type  is applied to ; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)">
            <summary>
                Retrieves a custom attribute applied to a method parameter. Parameters specify the method parameter, and the
                type of the custom attribute to search for.
            </summary>
            <param name="element">An object derived from the  class that describes a parameter of a member of a class.</param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <returns>
                A reference to the single custom attribute of type  that is applied to , or null if there is no such
                attribute.
            </returns>
        </member>
        <member name="M:Extensions.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
            <summary>
                Retrieves a custom attribute applied to a method parameter. Parameters specify the method parameter, the type
                of the custom attribute to search for, and whether to search ancestors of the method parameter.
            </summary>
            <param name="element">An object derived from the  class that describes a parameter of a member of a class.</param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <param name="inherit">If true, specifies to also search the ancestors of  for custom attributes.</param>
            <returns>
                A reference to the single custom attribute of type  that is applied to , or null if there is no such
                attribute.
            </returns>
        </member>
        <member name="M:Extensions.GetCustomAttributes(System.Reflection.ParameterInfo)">
            <summary>
                Retrieves an array of the custom attributes applied to a method parameter. A parameter specifies the method
                parameter.
            </summary>
            <param name="element">An object derived from the  class that describes a parameter of a member of a class.</param>
            <returns>
                An  array that contains the custom attributes applied to , or an empty array if no such custom attributes
                exist.
            </returns>
        </member>
        <member name="M:Extensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)">
            <summary>
                Retrieves an array of the custom attributes applied to a method parameter. Parameters specify the method
                parameter, and the type of the custom attribute to search for.
            </summary>
            <param name="element">An object derived from the  class that describes a parameter of a member of a class.</param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <returns>
                An  array that contains the custom attributes of type  applied to , or an empty array if no such custom
                attributes exist.
            </returns>
        </member>
        <member name="M:Extensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
            <summary>
                Retrieves an array of the custom attributes applied to a method parameter. Parameters specify the method
                parameter, the type of the custom attribute to search for, and whether to search ancestors of the method
                parameter.
            </summary>
            <param name="element">An object derived from the  class that describes a parameter of a member of a class.</param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <param name="inherit">If true, specifies to also search the ancestors of  for custom attributes.</param>
            <returns>
                An  array that contains the custom attributes of type  applied to , or an empty array if no such custom
                attributes exist.
            </returns>
        </member>
        <member name="M:Extensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)">
            <summary>
                Retrieves an array of the custom attributes applied to a method parameter. Parameters specify the method
                parameter, and whether to search ancestors of the method parameter.
            </summary>
            <param name="element">An object derived from the  class that describes a parameter of a member of a class.</param>
            <param name="inherit">If true, specifies to also search the ancestors of  for custom attributes.</param>
            <returns>
                An  array that contains the custom attributes applied to , or an empty array if no such custom attributes
                exist.
            </returns>
        </member>
        <member name="M:Extensions.IsDefined(System.Reflection.ParameterInfo,System.Type)">
            <summary>
                Determines whether any custom attributes are applied to a method parameter. Parameters specify the method
                parameter, and the type of the custom attribute to search for.
            </summary>
            <param name="element">An object derived from the  class that describes a parameter of a member of a class.</param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <returns>true if a custom attribute of type  is applied to ; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
            <summary>
                Determines whether any custom attributes are applied to a method parameter. Parameters specify the method
                parameter, the type of the custom attribute to search for, and whether to search ancestors of the method
                parameter.
            </summary>
            <param name="element">An object derived from the  class that describes a parameter of a member of a class.</param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <param name="inherit">If true, specifies to also search the ancestors of  for custom attributes.</param>
            <returns>true if a custom attribute of type  is applied to ; otherwise, false.</returns>
        </member>
        <member name="M:Extensions.SerializeBinary``1(``0)">
            <summary>
                An object extension method that serialize an object to binary.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Extensions.SerializeBinary``1(``0,System.Text.Encoding)">
            <summary>
                An object extension method that serialize an object to binary.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="encoding">The encoding.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Extensions.SerializeJavaScript``1(``0)">
            <summary>
                A T extension method that serialize java script.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Extensions.SerializeJson``1(``0)">
            <summary>
                A T extension method that serialize an object to Json.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>The Json string.</returns>
        </member>
        <member name="M:Extensions.SerializeJson``1(``0,System.Text.Encoding)">
            <summary>
                A T extension method that serialize an object to Json.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="encoding">The encoding.</param>
            <returns>The Json string.</returns>
        </member>
        <member name="M:Extensions.SerializeXml(System.Object)">
            <summary>
                An object extension method that serialize a string to XML.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>The string representation of the Xml Serialization.</returns>
        </member>
        <member name="M:Extensions.DeserializeBinary``1(System.String)">
            <summary>
                A string extension method that deserialize a string binary as &lt;T&gt;.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>The desrialize binary as &lt;T&gt;</returns>
        </member>
        <member name="M:Extensions.DeserializeBinary``1(System.String,System.Text.Encoding)">
            <summary>
                A string extension method that deserialize a string binary as &lt;T&gt;.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="encoding">The encoding.</param>
            <returns>The desrialize binary as &lt;T&gt;</returns>
        </member>
        <member name="M:Extensions.DeserializeJavaScript``1(System.String)">
            <summary>
                A string extension method that deserialize a string binary as &lt;T&gt;.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>The desrialize binary as &lt;T&gt;</returns>
        </member>
        <member name="M:Extensions.DeserializeJson``1(System.String)">
            <summary>
                A string extension method that deserialize a Json string to object.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>The object deserialized.</returns>
        </member>
        <member name="M:Extensions.DeserializeJson``1(System.String,System.Text.Encoding)">
            <summary>
                A string extension method that deserialize a Json string to object.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="encoding">The encoding.</param>
            <returns>The object deserialized.</returns>
        </member>
        <member name="M:Extensions.DeserializeXml``1(System.String)">
            <summary>
                A string extension method that deserialize an Xml as &lt;T&gt;.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <returns>The desieralize Xml as &lt;T&gt;</returns>
        </member>
        <member name="M:Extensions.Redirect(System.Web.HttpResponse,System.String,System.Object[])">
            <summary>
                A HttpResponse extension method that redirects.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="urlFormat">The URL format.</param>
            <param name="values">A variable-length parameters list containing values.</param>
        </member>
        <member name="M:Extensions.Reload(System.Web.HttpResponse)">
            <summary>
                A HttpResponse extension method that reloads the given this.
            </summary>
            <param name="this">The @this to act on.</param>
        </member>
        <member name="M:Extensions.SendAttachment(System.Web.HttpResponse,System.String,System.String)">
            <summary>
                A HttpResponse extension method that sends an attachment.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="fullPathToFile">The full path to file.</param>
            <param name="outputFileName">Filename of the output file.</param>
        </member>
        <member name="M:Extensions.SetStatus(System.Web.HttpResponse,System.Int32)">
            <summary>
                A HttpResponse extension method that sets the status.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="code">The code.</param>
        </member>
        <member name="M:Extensions.SetStatus(System.Web.HttpResponse,System.Int32,System.Boolean)">
            <summary>
                A HttpResponse extension method that sets the status.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="code">The code.</param>
            <param name="endResponse">true to end response.</param>
        </member>
        <member name="M:Extensions.SetStatus(System.Web.HttpResponse,System.Int32,System.String)">
            <summary>
                A HttpResponse extension method that sets the status.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="code">The code.</param>
            <param name="description">The description.</param>
        </member>
        <member name="M:Extensions.SetStatus(System.Web.HttpResponse,System.Int32,System.String,System.Boolean)">
            <summary>
                A HttpResponse extension method that sets the status.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="code">The code.</param>
            <param name="description">The description.</param>
            <param name="endResponse">true to end response.</param>
        </member>
        <member name="M:Extensions.SetStatusAccepted(System.Web.HttpResponse)">
            <summary>
                A HttpResponse extension method that sets the response to status code 202 (Accepted.).
            </summary>
            <param name="this">The @this to act on.</param>
        </member>
        <member name="M:Extensions.SetStatusClientBrowserDoesNotAcceptMimeType(System.Web.HttpResponse)">
            <summary>
                A HttpResponse extension method that sets the response to status code 406 (Client browser does not accept the
                MIME type of the requested page.).
            </summary>
            <param name="this">The @this to act on.</param>
        </member>
        <member name="M:Extensions.SetStatusContinue(System.Web.HttpResponse)">
            <summary>
                A HttpResponse extension method that sets the response to status code 100 (Continue.).
            </summary>
            <param name="this">The @this to act on.</param>
        </member>
        <member name="M:Extensions.SetStatusCreated(System.Web.HttpResponse)">
            <summary>
                A HttpResponse extension method that sets the response to status code 201 (Created.).
            </summary>
            <param name="this">The @this to act on.</param>
        </member>
        <member name="M:Extensions.SetStatusInternalServerError(System.Web.HttpResponse)">
            <summary>
                A HttpResponse extension method that sets the response to status code 500 (Internal server error. ).
            </summary>
            <param name="this">The @this to act on.</param>
        </member>
        <member name="M:Extensions.SetStatusInvalidHeaderValueConfiguration(System.Web.HttpResponse)">
            <summary>
                A HttpResponse extension method that sets the response to status code 501 (Header values specify a
                configuration that is not implemented.).
            </summary>
            <param name="this">The @this to act on.</param>
        </member>
        <member name="M:Extensions.SetStatusInvalidResponseWhileGatewayOrProxy(System.Web.HttpResponse)">
            <summary>
                A HttpResponse extension method that sets the response to status code 502 (Web server received an invalid
                response while acting as a gateway or proxy. ).
            </summary>
            <param name="this">The @this to act on.</param>
        </member>
        <member name="M:Extensions.SetStatusMethodNotAllowed(System.Web.HttpResponse)">
            <summary>
                A HttpResponse extension method that sets the response to status code 405 (Method Not Allowed.).
            </summary>
            <param name="this">The @this to act on.</param>
        </member>
        <member name="M:Extensions.SetStatusMovedPermanently(System.Web.HttpResponse)">
            <summary>
                A HttpResponse extension method that sets the response to status code 301 (Moved permanently.).
            </summary>
            <param name="this">The @this to act on.</param>
        </member>
        <member name="M:Extensions.SetStatusNoContent(System.Web.HttpResponse)">
            <summary>
                A HttpResponse extension method that sets the response to status code 204 (No content.).
            </summary>
            <param name="this">The @this to act on.</param>
        </member>
        <member name="M:Extensions.SetStatusNonauthoritativeInformation(System.Web.HttpResponse)">
            <summary>
                A HttpResponse extension method that sets the response to status code 203 (Nonauthoritative information.).
            </summary>
            <param name="this">The @this to act on.</param>
        </member>
        <member name="M:Extensions.SetStatusNotFound(System.Web.HttpResponse)">
            <summary>
                A HttpResponse extension method that sets the response to status code 404 (Not found. ).
            </summary>
            <param name="this">The @this to act on.</param>
        </member>
        <member name="M:Extensions.SetStatusNotModified(System.Web.HttpResponse)">
            <summary>
                A HttpResponse extension method that sets the response to status code 304 (Not modified.).
            </summary>
            <param name="this">The @this to act on.</param>
        </member>
        <member name="M:Extensions.SetStatusObjectMoved(System.Web.HttpResponse)">
            <summary>
                A HttpResponse extension method that sets the response to status code 302 (Object moved.).
            </summary>
            <param name="this">The @this to act on.</param>
        </member>
        <member name="M:Extensions.SetStatusPartialContent(System.Web.HttpResponse)">
            <summary>
                A HttpResponse extension method that sets the response to status code 206 (Partial content.).
            </summary>
            <param name="this">The @this to act on.</param>
        </member>
        <member name="M:Extensions.SetStatusPreconditionFailed(System.Web.HttpResponse)">
            <summary>
                A HttpResponse extension method that sets the response to status code 412 (Precondition failed.).
            </summary>
            <param name="this">The @this to act on.</param>
        </member>
        <member name="M:Extensions.SetStatusRequestTimedOut(System.Web.HttpResponse)">
            <summary>
                A HttpResponse extension method that sets the response to status code 408 (Request timed out.).
            </summary>
            <param name="this">The @this to act on.</param>
        </member>
        <member name="M:Extensions.SetStatusResetContent(System.Web.HttpResponse)">
            <summary>
                A HttpResponse extension method that sets the response to status code 205 (Reset content.).
            </summary>
            <param name="this">The @this to act on.</param>
        </member>
        <member name="M:Extensions.SetStatusServiceUnavailable(System.Web.HttpResponse)">
            <summary>
                A HttpResponse extension method that sets the response to status code 503 (Service unavailable. ).
            </summary>
            <param name="this">The @this to act on.</param>
        </member>
        <member name="M:Extensions.SetStatusSwitchingProtocols(System.Web.HttpResponse)">
            <summary>
                A HttpResponse extension method that sets the response to status code 101 (Switching protocols.).
            </summary>
            <param name="this">The @this to act on.</param>
        </member>
        <member name="M:Extensions.SetStatusTemporaryRedirect(System.Web.HttpResponse)">
            <summary>
                A HttpResponse extension method that sets the response to status code 307 (Temporary redirect.).
            </summary>
            <param name="this">The @this to act on.</param>
        </member>
        <member name="M:Extensions.FindControl``1(System.Web.UI.Control,System.String)">
            <summary>
                Searches the current naming container for a server control with the specified id parameter.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="id">The identifier for the control to be found.</param>
            <returns>The specified control, or a null reference if the specified control does not exist.</returns>
        </member>
        <member name="M:Extensions.FindControlRecursive(System.Web.UI.Control,System.String)">
            <summary>
                Searches recursively in the container and child container for a server control with the specified id
                parameter.
            </summary>
            <param name="this">The @this to act on.</param>
            <param name="id">The identifier for the control to be found.</param>
            <returns>The specified control, or a null reference if the specified control does not exist.</returns>
        </member>
        <member name="M:Extensions.FindControlRecursive``1(System.Web.UI.Control,System.String)">
            <summary>
                Searches recursively in the container and child container for a server control with the specified id
                parameter.
            </summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="this">The @this to act on.</param>
            <param name="id">The identifier for the control to be found.</param>
            <returns>The specified control, or a null reference if the specified control does not exist.</returns>
        </member>
        <member name="M:Extensions.ToFullScreen(System.Windows.Forms.Form,System.Int32)">
            <summary>
                A Form extension method that set the window form to full screen mode to the specified screen.
            </summary>
            <param name="form">The form to act on.</param>
            <param name="screen">(Optional) the screen to act on.</param>
        </member>
        <member name="M:Extensions.RemoveAllNamespaces(System.Xml.Linq.XElement)">
            <summary>
                An XElement extension method that removes all namespaces described by @this.
            </summary>
            <param name="this">The @this to act on.</param>
            <returns>An XElement.</returns>
        </member>
    </members>
</doc>
